/*
   Generated by EX4-TO-MQ4 decompiler V4.0.220.2c []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2008-2009, Sotnikov Denis (fxexpert@freemail.ru)"
#property link      "fxexpert@freemail.ru"

#include <WinUser32.mqh>

extern string OrderOptions = "--------   Orders options  --------";
extern double Lots = 0.0;
extern int LotsPercent = 10;
double gd_96 = 0.0;
extern int BalanceControlMode = 4;
extern bool ResetMaxBalance = TRUE;
double gd_112 = 0.0;
extern string TradeOptions = "--------   Trade  options  --------";
extern int SettingsNumber = 1;
extern bool CheckDrawDown = TRUE;
int gi_136 = 0;
extern int LowRiskSettingsNumber = 0;
bool gi_144 = TRUE;
int g_str2int_148 = 0;
extern int StopLoss = 32;
extern int TakeProfit = 15;
extern bool InvisibleStopLoss = FALSE;
extern bool TrailingTakeProfit = FALSE;
bool g_str2int_168 = FALSE;
int g_str2int_172 = 0;
int g_str2int_176 = 20;
string gs_unused_180 = "--------";
extern int MinOrderLifeTime = 0;
bool g_str2int_192 = FALSE;
bool g_str2int_196 = FALSE;
int g_str2int_200 = 300;
bool g_str2int_204 = FALSE;
int g_str2int_208 = 0;
int gi_212 = 0;
int gi_216 = 0;
bool g_str2int_220 = TRUE;
int g_slippage_224 = 2;
int g_slippage_228 = 2;
bool g_str2int_232 = FALSE;
int gi_236 = 0;
int gi_240 = 0;
bool g_str2int_244 = FALSE;
int g_str2int_248 = 0;
bool g_str2int_252 = FALSE;
bool g_str2int_256 = FALSE;
string gs_unused_260 = "--------";
bool g_str2int_268 = FALSE;
int gi_272 = 0;
bool g_str2int_276 = FALSE;
int gi_280 = 0;
bool g_str2int_284 = FALSE;
bool g_str2int_288 = FALSE;
string gs_unused_292 = "--------";
double gd_300 = 0.0;
int g_str2int_308 = 0;
int g_str2int_312 = 0;
string gs_unused_316 = "--------";
double gd_324 = 0.0;
int g_str2int_332 = 0;
double gd_336 = 0.0;
int g_str2int_344 = 0;
int g_str2int_348 = 0;
int g_str2int_352 = 0;
string gs_unused_356 = "--------";
bool g_str2int_364 = FALSE;
int g_str2int_368 = 0;
int g_str2int_372 = 0;
int g_str2int_376 = 0;
int g_str2int_380 = 0;
int g_str2int_384 = 0;
int gi_388 = 0;
int gi_392 = 0;
int gi_396 = 0;
int gi_400 = 0;
int g_str2int_404 = 0;
bool g_str2int_408 = FALSE;
bool g_str2int_412 = FALSE;
bool g_str2int_416 = FALSE;
bool g_str2int_420 = FALSE;
bool g_str2int_424 = FALSE;
bool g_str2int_428 = FALSE;
string gs_unused_432 = "--------";
int g_str2int_440 = 0;
double gd_444 = 0.0;
int g_str2int_452 = 0;
int g_str2int_456 = 0;
int g_str2int_460 = 0;
string gs_unused_464 = "--------";
int g_str2int_472 = 0;
double gd_476 = 0.0;
int g_str2int_484 = 0;
int g_str2int_488 = 0;
int g_str2int_492 = 0;
string gs_unused_496 = "--------";
double gd_504 = 0.0;
int g_str2int_512 = 0;
int g_str2int_516 = 0;
double gd_520 = 0.0;
int g_str2int_528 = 0;
int g_str2int_532 = 0;
string gs_unused_536 = "--------";
bool g_str2int_544 = FALSE;
int g_str2int_548 = 0;
int gi_552 = 0;
int g_str2int_556 = 0;
int gi_560 = 0;
int g_str2int_564 = 0;
int gi_568 = 0;
int g_str2int_572 = 0;
int gi_576 = 0;
int g_str2int_580 = 0;
int gi_584 = 0;
string gs_unused_588 = "--------";
bool g_str2int_596 = FALSE;
int g_timeframe_600 = 0;
int g_period_604 = 0;
int g_applied_price_608 = PRICE_CLOSE;
int g_timeframe_612 = 0;
int g_period_616 = 0;
int g_applied_price_620 = PRICE_CLOSE;
int g_period_624 = 0;
double gd_628 = 0.0;
int g_ma_method_636 = MODE_SMA;
int g_applied_price_640 = PRICE_CLOSE;
int gi_644 = 0;
int g_str2int_648 = 0;
double g_str2dbl_652 = 0.0;
double g_str2dbl_660 = 0.0;
double g_str2dbl_668 = 0.0;
double g_str2dbl_676 = 0.0;
int g_str2int_684 = 0;
int g_str2int_688 = 0;
string gs_unused_692 = "--------";
bool g_str2int_700 = FALSE;
bool gi_704 = FALSE;
double gd_708 = 0.0;
double gd_716 = 0.0;
double gd_724 = 0.0;
extern string TimeOptions = "--------   Time   options  --------";
extern bool UseAutoTimeSettings = TRUE;
extern int TimeZone = 0;
extern int SWChangeMode = 0;
bool gi_752 = TRUE;
extern int TimeRiskFactor = 8;
int gi_760 = 4;
int gi_764 = 3;
bool gi_768 = TRUE;
bool gi_772 = TRUE;
bool gi_776 = FALSE;
int gi_780 = 0;
int gi_784 = 0;
bool gi_788 = FALSE;
int gi_792 = 0;
int gi_796 = 12;
int gi_800 = 12;
int gi_804 = 24;
bool gi_808 = TRUE;
bool gi_812 = FALSE;
bool gi_816 = TRUE;
string gs_unused_820 = "--------Transmite options--------";
bool gi_828 = FALSE;
bool gi_832 = FALSE;
bool gi_836 = FALSE;
int gi_840 = 10;
bool gi_844 = TRUE;
int gi_848 = 10;
bool gi_852 = FALSE;
string gs_unused_856 = "--------   News   options  --------";
bool gi_864 = FALSE;
int gi_868 = 5;
int gi_872 = 30;
int gi_876 = 60;
bool gi_880 = TRUE;
bool gi_884 = TRUE;
bool gi_888 = TRUE;
bool gi_892 = TRUE;
bool gi_896 = TRUE;
bool gi_900 = TRUE;
bool gi_904 = TRUE;
bool gi_908 = TRUE;
bool gi_912 = TRUE;
extern string OtherOptions = "--------   Other  options  --------";
int gi_924 = 642;
bool gi_928 = TRUE;
extern bool ShowTimes = TRUE;
extern bool ShowInformation = TRUE;
bool gi_940 = FALSE;
bool gi_944 = FALSE;
bool gi_948 = FALSE;
extern int InformationStringNumber = 20;
extern bool SaveInformation = TRUE;
bool gi_960 = TRUE;
bool gi_964 = FALSE;
bool gi_968 = FALSE;
extern bool UseMailReport = TRUE;
extern int MailReportHourGMT = 6;
bool gi_980 = FALSE;
bool gi_984 = TRUE;
double gd_988 = 10.0;
bool gi_996 = TRUE;
int gi_1000 = 2;
int gi_unused_1004 = 20;
int gi_unused_1008 = 0;
double gd_unused_1012 = 2.5;
int gi_unused_1020 = 50;
bool gi_1024 = FALSE;
bool gi_unused_1028 = FALSE;
bool gi_unused_1032 = TRUE;
bool gi_1036 = TRUE;
int gi_1040;
int gi_1044;
bool gi_1048;
bool gi_1052;
int gi_1056;
int gi_1060;
bool gi_1064;
int gi_unused_1068;
int g_bars_1072;
int gi_unused_1076;
int gi_unused_1080;
int g_hour_1084;
int g_bars_1088;
int g_ticket_1092;
int g_ticket_1096;
int gi_unused_1100;
int gi_1104;
int g_ticket_1108;
int g_bars_1112;
int g_magic_1116;
int g_count_1120;
int g_count_1124;
int gi_1128;
int g_count_1132;
int gi_unused_1136 = 99;
int gi_unused_1140 = 99;
int gi_1144 = 10;
int gi_1148;
int g_day_of_week_1152;
int gi_unused_1156;
int gi_unused_1160;
int gi_1164;
datetime g_time_1168;
int gi_1172;
int gi_1176;
int gi_1180;
int gi_1184;
int gi_1188;
int g_hour_1192;
int g_day_of_week_1196;
int gi_1200;
int g_month_1204;
int g_year_1208;
int g_count_1212;
int gi_1216;
int gi_1220;
int g_count_1224;
int gi_1228;
int gi_1232;
int gi_1236;
int gi_1240;
int g_bars_1244;
int gia_1248[5][10];
int gia_1252[500][10];
int gia_1256[6];
double gd_1260;
double gd_1268;
double gd_1276;
double gd_1284;
double gd_1292;
double gd_1300;
double gd_1308;
double gd_1316;
double g_price_1324;
double gd_unused_1332;
double g_ord_profit_1340;
double g_global_var_1348;
double g_price_1356;
double gd_unused_1364;
double gda_1372[1][6];
double gda_1376[1][8];
double gda_1380[30];
bool gi_1384;
bool gi_1388;
int gi_unused_1392;
int gi_unused_1396;
bool gi_1400;
bool gi_1404;
bool gi_1408;
bool gi_1412;
bool gi_1416;
bool gi_1420;
int gi_unused_1424;
bool gi_1428;
bool gi_1432;
bool gi_1436;
bool gi_1440;
bool gi_1444;
bool gi_1448;
int gi_unused_1452;
bool gi_1456;
int gi_unused_1460;
bool gi_1464;
int gi_unused_1468;
int gi_unused_1472;
bool gi_1476;
bool gi_1480;
bool gi_1484;
bool gi_1488;
bool gi_1492;
bool gi_1496;
bool gi_1500;
bool g_bool_1504;
bool gi_1508;
bool gi_1512;
bool gi_1516;
bool gi_1520;
int gi_1524;
int gi_1528;
int g_datetime_1532;
int gi_1536;
int gi_1540;
int gi_1544;
int gi_1548;
int gi_1552;
int gi_1556;
string gs_1560;
string gs_1568;
string gs_dummy_1576;
string gs_unused_1584;
string gs_1592;
string gs_1600;
string gs_1608;
string gs_1616;
string gsa_1624[7];
string gsa_1628[50];
string gsa_1632[130][11];
string gsa_1636[4300];
string gsa_1640[20];
string g_var_name_1644;
string g_var_name_1652;
string g_var_name_1660;

int init() {
   Comment("");
   gi_1040 = 0;
   gi_1044 = 0;
   gi_1048 = FALSE;
   gi_1052 = FALSE;
   gi_1060 = 0;
   gi_1064 = FALSE;
   gi_unused_1068 = 0;
   g_bars_1072 = 0;
   gi_unused_1076 = -1;
   gi_unused_1080 = -1;
   g_hour_1084 = 25;
   g_bars_1088 = 0;
   gi_1176 = 0;
   gi_1180 = 0;
   gi_1148 = g_str2int_248;
   g_ticket_1092 = -1;
   g_ticket_1096 = 0;
   g_ticket_1108 = 0;
   gi_unused_1100 = 0;
   gi_1104 = 0;
   gi_unused_1160 = -1;
   gi_unused_1136 = 99;
   gi_unused_1140 = 99;
   gi_1144 = 10;
   gi_1524 = 0;
   gi_1528 = 0;
   g_datetime_1532 = 0;
   gi_unused_1156 = 25;
   g_bars_1112 = 0;
   gi_1232 = 99;
   g_count_1212 = 0;
   gi_1216 = 999;
   g_day_of_week_1152 = -1;
   gi_1220 = 0;
   g_count_1224 = 0;
   gi_1164 = -1;
   g_time_1168 = -1;
   gi_1240 = 0;
   g_bars_1244 = 0;
   gia_1256[1] = 0;
   gia_1256[2] = 0;
   gia_1256[3] = 0;
   gia_1256[4] = 0;
   gia_1256[5] = 0;
   gd_1268 = 0.0;
   gd_1308 = 0.0;
   gd_1316 = 0.0;
   g_price_1324 = 0.0;
   gd_unused_1332 = 0.0;
   g_ord_profit_1340 = 0.0;
   g_global_var_1348 = 0.0;
   g_price_1356 = 0.0;
   gd_unused_1364 = 0.0;
   gd_1260 = 0.0;
   gd_1292 = 0.0;
   gd_1300 = 0.0;
   gi_1400 = FALSE;
   gi_1416 = FALSE;
   gi_1420 = FALSE;
   gi_unused_1424 = 0;
   gi_1404 = FALSE;
   gi_1412 = TRUE;
   gi_unused_1452 = 0;
   gi_1456 = TRUE;
   gi_unused_1460 = 1;
   gi_unused_1468 = 0;
   gi_unused_1472 = 0;
   gi_1384 = FALSE;
   gi_1388 = FALSE;
   gi_1408 = FALSE;
   gi_unused_1396 = 0;
   gi_unused_1392 = 0;
   gi_1428 = FALSE;
   gi_1432 = FALSE;
   gi_1496 = FALSE;
   gi_1464 = TRUE;
   gi_1444 = FALSE;
   gi_1476 = FALSE;
   g_bool_1504 = FALSE;
   gi_1508 = FALSE;
   gi_1512 = FALSE;
   gi_1516 = FALSE;
   gi_1520 = FALSE;
   gs_1560 = "";
   gs_1568 = "";
   gs_unused_1584 = "";
   gs_1592 = "";
   gs_1600 = "";
   g_var_name_1644 = "";
   g_var_name_1652 = "";
   gs_1616 = StringSubstr(AccountCompany(), 0, StringFind(AccountCompany(), " ", 0));
   CheckPointDifference();
   gs_1608 = StringSubstr(Symbol(), 0, 6);
   g_var_name_1660 = "StopDay" + AccountNumber();
   gi_1508 = CheckLicense();
   if (TimeRiskFactor >= 0) {
      if (TimeRiskFactor > 10) TimeRiskFactor = 10;
      if (TimeRiskFactor == 0) {
         gi_760 = 0;
         gi_764 = 0;
      }
      if (TimeRiskFactor == 1) {
         gi_760 = 1;
         gi_764 = 0;
      }
      if (TimeRiskFactor == 2) {
         gi_760 = 1;
         gi_764 = 1;
      }
      if (TimeRiskFactor == 3) {
         gi_760 = 2;
         gi_764 = 0;
      }
      if (TimeRiskFactor == 4) {
         gi_760 = 2;
         gi_764 = 1;
      }
      if (TimeRiskFactor == 5) {
         gi_760 = 3;
         gi_764 = 0;
      }
      if (TimeRiskFactor == 6) {
         gi_760 = 3;
         gi_764 = 1;
      }
      if (TimeRiskFactor == 7) {
         gi_760 = 3;
         gi_764 = 3;
      }
      if (TimeRiskFactor == 8) {
         gi_760 = 4;
         gi_764 = 0;
      }
      if (TimeRiskFactor == 9) {
         gi_760 = 4;
         gi_764 = 1;
      }
      if (TimeRiskFactor == 10) {
         gi_760 = 4;
         gi_764 = 3;
      }
   }
   if (IsOptimization() || IsTesting()) {
      SaveInformation = FALSE;
      if (!IsVisualMode()) {
         gi_928 = FALSE;
         gi_960 = FALSE;
      }
      if (gi_788) {
         if (gi_792 > 23) gi_792 = 23;
         gi_796 = gi_792 + 1;
         gi_800 = 24;
         gi_804 = 24;
      }
      gd_1292 = GlobalVariableGet("TestGBPUSD");
      gd_1300 = GlobalVariableGet("TestUSDCHF");
   } else gi_788 = FALSE;
   gi_1512 = CheckLastOptTime();
   for (gi_1540 = StrToTime(Year() + ".10.31"); TimeDayOfWeek(gi_1540) != 0; gi_1540 -= 86400) {
   }
   gi_1552 = gi_1540 + 604800;
   for (gi_1544 = StrToTime(Year() + ".03.31"); TimeDayOfWeek(gi_1544) != 0; gi_1544 -= 86400) {
   }
   for (gi_1548 = StrToTime((Year() + 1) + ".03.31"); TimeDayOfWeek(gi_1548) != 0; gi_1548 -= 86400) {
   }
   gi_1556 = gi_1544 + 604800;
   ClearBuffer("ReceiveBuffer", 0);
   ClearBuffer("CommandBuffer", 0);
   ClearBuffer("VariablesBuffer", 0);
   ClearBuffer("InformationBuffer", 0);
   ClearBuffer("LogFileBuffer", 0);
   ClearBuffer("ErrorArray", 0);
   InitErrorArray();
   FillTimeBuffer();
   FillSettingsArray();
   SetTimeSettings(gi_760);
   gi_1236 = LoadSettings();
   SetSettings(SettingsNumber);
   SetGMTTime();
   gi_1228 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
   gi_1536 = Time[0];
   g_magic_1116 = gi_924 + AccountNumber() + StringGetChar(Symbol(), 0) + StringGetChar(Symbol(), 1) + StringGetChar(Symbol(), 2) + StringGetChar(Symbol(), 3) + StringGetChar(Symbol(), 4) + StringGetChar(Symbol(), 5) + Period();
   gd_1276 = NormalizeDouble(MarketInfo(Symbol(), MODE_LOTSTEP), 2);
   gd_1284 = NormalizeDouble(MarketInfo(Symbol(), MODE_MINLOT), 2);
   if (gd_96 == 0.0 || gd_96 > NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2)) gd_96 = NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2);
   StartRulls();
   if (gi_1036) HideTestIndicators(TRUE);
   if (!g_str2int_364) {
      g_str2int_372 = g_str2int_368;
      g_str2int_380 = g_str2int_368;
   }
   if (g_str2int_244) {
      if (LotsPercent > 30 && Lots == 0.0) {
         g_str2int_244 = FALSE;
         Comments(9, "Init()", "Íåâîçìîæíî óñòàíîâèòü ContinueAfterClose: LotsPercent>30");
      }
   }
   if (Lots != 0.0) BalanceControlMode = 0;
   MakeInitString();
   MakeTimeString();
   if (gi_1508) Comments(9, "Init()", "Èíèöèàëèçàöèÿ çàâåðøåíà (Ëèöåíçèÿ-ÍÅÒ)");
   else Comments(9, "Init()", "Èíèöèàëèçàöèÿ çàâåðøåíà (Ëèöåíçèÿ-ÎÊ)");
   if (gi_832) SaveFileOrder(0, 99, 0, 0, 0, 0, 0);
   Comments(1, "", "CurrentOrderProfitPoint = " + DoubleToStr(gd_1308, 0));
   return (0);
}

int start() {
   int li_0;
   gi_1172 = GetTickCount();
   MainProgram();
   if (gi_980) {
      li_0 = GetTickCount() - gi_1172;
      if (gi_1216 > li_0) gi_1216 = li_0;
      if (gi_1220 < li_0) gi_1220 = li_0;
      g_count_1224++;
      gd_1260 += 1.0 * li_0;
      if (gi_928) Comments(2, "", "SysSpeed:  min=" + gi_1216 + "  average=" + DoubleToStr(gd_1260 / (1.0 * g_count_1224), 0) + "  max=" + gi_1220 + "   current=" + li_0);
      else Comment("SysSpeed:  min=" + gi_1216 + "  average=" + DoubleToStr(gd_1260 / (1.0 * g_count_1224), 0) + "  max=" + gi_1220 + "   current=" + li_0);
   }
   SaveCommentsFile(" ");
   return (0);
}

int MainProgram() {
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   if (!StartRulls()) return (0);
   if (gi_828) {
      if (ReadFileOrder()) CheckReceiveBuffer();
      CheckCommandBuffer();
      return (0);
   }
   if (isOrderSell() && !TimeCurrentBar(g_str2int_412)) {
      isRSItoOpen(99);
      li_4 = TRUE;
      if (isCloseSellOrder()) {
         if (isTimeFiltertoClose(1)) {
            if (CloseSellOrder()) {
               gi_1476 = FALSE;
               li_4 = FALSE;
               if (!g_str2int_244) return (li_ret_0);
            }
         }
      }
   }
   if (isOrderBuy() && !TimeCurrentBar(g_str2int_412)) {
      isRSItoOpen(99);
      li_4 = TRUE;
      if (isCloseBuyOrder()) {
         if (isTimeFiltertoClose(0)) {
            if (CloseBuyOrder()) {
               gi_1476 = FALSE;
               li_4 = FALSE;
               if (!g_str2int_244) return (li_ret_0);
            }
         }
      }
   }
   gi_1476 = FALSE;
   if (li_4 && g_str2int_288) return (li_ret_0);
   if (isOpenBuyOrder() || isErrorOpenOrder(0)) {
      if (isTimeFiltertoOpen(0)) SendBuyOrder(StopLoss, TakeProfit);
      return (li_ret_0);
   }
   if (isOpenSellOrder() || isErrorOpenOrder(1)) {
      if (isTimeFiltertoOpen(1)) SendSellOrder(StopLoss, TakeProfit);
      return (li_ret_0);
   }
   return (li_ret_0);
}

int isErrorOpenOrder(int ai_0) {
   double ld_8;
   bool li_ret_4 = FALSE;
   if (g_str2int_204) {
      if (gi_1384 && ai_0 == 1) {
         ld_8 = MathRound((g_price_1356 - Ask) / Point);
         if (Bars - g_bars_1088 > g_str2int_208) {
            gi_1384 = FALSE;
            g_count_1132 = 0;
            Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Sell, èñòåê ëèìèò áàðîâ îæèäàíèÿ");
         } else {
            if (ld_8 >= gi_280 - gi_212) {
               gi_1384 = FALSE;
               g_count_1132 = 0;
               Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Sell, ïðîôèò îòðàáîòàí (" + DoubleToStr(g_price_1356, Digits) + "/" + DoubleToStr(Bid, Digits) +
                  ")");
            } else {
               if (Bid >= g_price_1356 + gi_212 * Point && !gi_1480) {
                  li_ret_4 = TRUE;
                  g_count_1132++;
                  Comments(9, "isErrorOpenOrder()", "Ïîâòîð îòêðûòèÿ îðäåðà Sell (" + DoubleToStr(Bid, Digits) + "), ïîïûòêà " + g_count_1132);
               }
            }
         }
      }
      if (gi_1388 && ai_0 == 0) {
         ld_8 = MathRound((Bid - g_price_1356) / Point);
         if (Bars - g_bars_1088 > g_str2int_208) {
            gi_1388 = FALSE;
            g_count_1132 = 0;
            Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Buy, èñòåê ëèìèò áàðîâ îæèäàíèÿ");
         } else {
            if (ld_8 >= gi_280 - gi_212) {
               gi_1388 = FALSE;
               g_count_1132 = 0;
               Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Buy, ïðîôèò îòðàáîòàí (" + DoubleToStr(g_price_1356, Digits) + "/" + DoubleToStr(Ask, Digits) +
                  ")");
            } else {
               if (Ask <= g_price_1356 - gi_212 * Point && !gi_1480) {
                  li_ret_4 = TRUE;
                  g_count_1132++;
                  Comments(9, "isErrorOpenOrder()", "Ïîâòîð îòêðûòèÿ îðäåðà Buy (" + DoubleToStr(Ask, Digits) + "), ïîïûòêà " + g_count_1132);
               }
            }
         }
      }
   }
   return (li_ret_4);
}

bool isTimeFiltertoClose(int ai_0) {
   double l_price_8;
   bool li_ret_4 = TRUE;
   if (!IsOptimization() && !IsTesting() && !IsVisualMode() && g_str2int_196) {
      if (ai_0 == 1) {
         l_price_8 = Ask;
         Sleep(g_str2int_200);
         if (Ask > l_price_8) li_ret_4 = FALSE;
      }
      if (ai_0 == 0) {
         l_price_8 = Bid;
         Sleep(g_str2int_200);
         if (Bid < l_price_8) li_ret_4 = FALSE;
      }
   }
   if (!li_ret_4) Comments(9, "isTimeFiltertoClose()", "Îøèáêà çàêðûòèÿ îðäåðà: èçìåíèëàñü öåíà");
   return (li_ret_4);
}

bool isTimeFiltertoOpen(int ai_0) {
   double l_bid_8;
   bool li_ret_4 = TRUE;
   if (!IsOptimization() && !IsTesting() && !IsVisualMode() && g_str2int_192) {
      if (ai_0 == 1) {
         l_bid_8 = Bid;
         Sleep(g_str2int_200);
         if (Bid < l_bid_8) li_ret_4 = FALSE;
      }
      if (ai_0 == 0) {
         l_bid_8 = Bid;
         Sleep(g_str2int_200);
         if (Ask > l_bid_8) li_ret_4 = FALSE;
      }
   }
   if (!li_ret_4) Comments(9, "isTimeFiltertoOpen()", "Îøèáêà îòêðûòèÿ îðäåðà: èçìåíèëàñü öåíà");
   return (li_ret_4);
}

bool isCloseSellOrder() {
   bool li_ret_0 = FALSE;
   if ((g_str2int_268 && isChanneltoClose(1, g_str2int_380, g_str2int_424, gi_396) && isProfitValuetoClose(gi_272 - gi_1040 + gi_1060)) || (!g_str2int_268 && isChanneltoClose(1, g_str2int_380, g_str2int_424, gi_396)) ||
      (isChanneltoClose(1, g_str2int_384, g_str2int_428, gi_400) && g_str2int_384 != 0) || (g_str2int_276 && isProfitValuetoClose(TimeProfit())) || isErrorCloseOrder(1) ||
      isInvisibleStopLosstoClose(1)) li_ret_0 = TRUE;
   return (li_ret_0);
}

bool isCloseBuyOrder() {
   bool li_ret_0 = FALSE;
   if ((g_str2int_268 && isChanneltoClose(0, g_str2int_380, g_str2int_424, gi_396) && isProfitValuetoClose(gi_272 - gi_1040 + gi_1060)) || (!g_str2int_268 && isChanneltoClose(0, g_str2int_380, g_str2int_424, gi_396)) ||
      (isChanneltoClose(0, g_str2int_384, g_str2int_428, gi_400) && g_str2int_384 != 0) || (g_str2int_276 && isProfitValuetoClose(TimeProfit())) || isErrorCloseOrder(0) ||
      isInvisibleStopLosstoClose(0)) li_ret_0 = TRUE;
   return (li_ret_0);
}

int isBarsHeighttoOpen(int ai_0, int ai_4, double ad_8) {
   double l_high_20;
   double l_low_28;
   bool li_ret_16 = FALSE;
   if (ad_8 != 0.0) {
      l_high_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 0)];
      l_low_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 0)];
      if (ai_0 == 1 && Close[0] >= l_high_20 && (l_high_20 - l_low_28) / Point >= ad_8) li_ret_16 = TRUE;
      if (ai_0 == 0 && Close[0] <= l_low_28 && (l_high_20 - l_low_28) / Point >= ad_8) li_ret_16 = TRUE;
   }
   return (li_ret_16);
}

int isMADistancetoOpen(int ai_0, int a_ma_method_4, int a_period_8, int a_applied_price_12, double a_pips_16, int ai_24) {
   double ld_32;
   bool li_ret_28 = TRUE;
   if (a_period_8 != 0) {
      ld_32 = iMA(NULL, 0, a_period_8, 0, a_ma_method_4, a_applied_price_12, 0);
      if (ai_24 == 1) ld_32 = MathRound(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 1) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 0) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 0) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 1) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (MathAbs(Bid - ld_32) <= a_pips_16 * Point) li_ret_28 = FALSE;
   }
   return (li_ret_28);
}

int isOpenSellOrder() {
   bool li_ret_0 = FALSE;
   if (!TimeCurrentBar(g_str2int_408) && !TimeCurrentBar(g_str2int_416) && !gi_1480 && !gi_1428 && g_ticket_1096 == 0 && !gi_1384 && !gi_1436 && !gi_1488 && !gi_1484 &&
      !gi_1492 && !gi_1496 && !gi_1508) {
      if (!gi_1500) {
         if ((g_str2int_148 == 0 || g_str2int_148 == 1 && isMADistancetoOpen(1, g_str2int_452, g_str2int_440, g_str2int_456, gd_444, g_str2int_460) && isChanneltoOpen(1, g_str2int_372, g_str2int_420, gi_388)) ||
            (g_str2int_148 == 0 || g_str2int_148 == 2 && isMADistancetoOpen(1, g_str2int_528, g_str2int_516, g_str2int_532, gd_520, g_str2int_460) && isChanneltoOpen(1, g_str2int_376, g_str2int_420, gi_392)) ||
            (g_str2int_148 == 0 || g_str2int_148 == 3 && isBarsHeighttoOpen(1, g_str2int_512, gd_504)) || (g_str2int_148 == 4 && isRSItoOpen(1))) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

int isOpenBuyOrder() {
   bool li_ret_0 = FALSE;
   if (!TimeCurrentBar(g_str2int_408) && !TimeCurrentBar(g_str2int_416) && !gi_1480 && !gi_1428 && g_ticket_1096 == 0 && !gi_1388 && !gi_1436 && !gi_1488 && !gi_1484 &&
      !gi_1492 && !gi_1496 && !gi_1508) {
      if (!gi_1500) {
         if ((g_str2int_148 == 0 || g_str2int_148 == 1 && isMADistancetoOpen(0, g_str2int_452, g_str2int_440, g_str2int_456, gd_444, g_str2int_460) && isChanneltoOpen(0, g_str2int_372, g_str2int_420, gi_388)) ||
            (g_str2int_148 == 0 || g_str2int_148 == 2 && isMADistancetoOpen(0, g_str2int_528, g_str2int_516, g_str2int_532, gd_520, g_str2int_460) && isChanneltoOpen(0, g_str2int_376, g_str2int_420, gi_392)) ||
            (g_str2int_148 == 0 || g_str2int_148 == 3 && isBarsHeighttoOpen(0, g_str2int_512, gd_504)) || (g_str2int_148 == 4 && isRSItoOpen(0))) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

int isSpreadtoTrade() {
   bool li_ret_0 = FALSE;
   int li_4 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
   if (gi_1228 != li_4 && gi_948) {
      Comments(9, "isSpreadtoTrade()", "Èçìåíèëîñü çíà÷åíèå ñïðåäà ñ " + gi_1228 + " íà " + li_4);
      gi_1228 = li_4;
   }
   if ((!g_str2int_232 && li_4 <= gi_236) || (g_str2int_232 && li_4 <= gi_240)) li_ret_0 = TRUE;
   return (li_ret_0);
}

int MaxChannelLimit(double ad_0, int ai_8, int ai_12) {
   double ld_20;
   double ld_28;
   double ld_36;
   int li_ret_16 = 0;
   int li_48 = 0;
   int li_52 = 0;
   int li_56 = 0;
   if (ad_0 > 0.0) {
      ld_36 = MathAbs(ad_0);
      ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_8, ai_12)] / Point;
      ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_8, ai_12)] / Point;
      if (ld_20 - ld_28 - ld_36 > 0.0) {
         if (IsTesting() || IsOptimization() || !gi_944 || !gi_928) li_ret_16 = 1;
         for (int li_44 = 1; li_44 <= ai_8; li_44++) {
            if (li_ret_16 != 0) break;
            li_56 = li_44;
            if (High[li_44] > High[li_48]) li_48 = li_44;
            if (Low[li_44] < Low[li_52]) li_52 = li_44;
            if ((High[li_48] - Low[li_52]) / Point - ld_36 > 0.0) li_ret_16 = (ai_8 - li_56) * Period();
         }
      }
   }
   return (li_ret_16);
}

bool MaxVolumeLimit(double ad_0, int ai_8, int ai_12) {
   bool l_bool_16 = FALSE;
   bool li_20 = FALSE;
   if (ad_0 != 0.0) {
      if (ad_0 < 0.0) li_20 = TRUE;
      ad_0 = MathAbs(ad_0);
      if (g_bars_1112 != Bars) {
         gd_1268 = 0.0;
         for (int li_24 = ai_8 + ai_12; li_24 > ai_12; li_24--) gd_1268 += Volume[li_24];
         g_bars_1112 = Bars;
         gd_1268 /= ai_8;
      }
      if (ad_0 < gd_1268) l_bool_16 = TRUE;
   }
   if (li_20) l_bool_16 = !l_bool_16;
   return (l_bool_16);
}

bool TimeCurrentBar(int ai_0) {
   bool li_ret_4 = FALSE;
   if (ai_0 && Time[0] == gi_1536) li_ret_4 = TRUE;
   return (li_ret_4);
}

int isOrderSell() {
   double l_price_16;
   double l_pips_24;
   bool li_ret_0 = FALSE;
   int l_pos_4 = 0;
   int l_ord_total_12 = OrdersTotal();
   for (l_pos_4 = 0; l_pos_4 < l_ord_total_12; l_pos_4++) {
      OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_SELL) {
         if (!gi_832 && OrderMagicNumber() != g_magic_1116) continue;
         g_ord_profit_1340 = OrderProfit();
         gd_1308 = MathRound((OrderOpenPrice() - Ask) / Point);
         g_hour_1084 = TimeHour(OrderOpenTime() + 7200 - 3600 * (TimeZone + gi_1240));
         g_datetime_1532 = OrderOpenTime();
         g_ticket_1096 = OrderTicket();
         gi_1104 = TimeCurrent() - g_datetime_1532;
         if (g_str2int_168) {
            l_price_16 = 1.0 * StopLoss;
            l_pips_24 = TrailingTP();
            if (InvisibleStopLoss) l_price_16 = 0.0;
            if ((l_price_16 != 0.0 && OrderStopLoss() == 0.0) || l_pips_24 != 0.0 && !gi_832) {
               if (l_price_16 != 0.0) {
                  if (l_price_16 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_16 = MarketInfo(Symbol(), MODE_STOPLEVEL);
                  l_price_16 = NormalizeDouble(OrderOpenPrice() + l_price_16 * Point, Digits);
               }
               if (l_pips_24 != 0.0) l_pips_24 = NormalizeDouble(OrderOpenPrice() - l_pips_24 * Point, Digits);
               if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_16, l_pips_24, 0, Red)) {
                  Comments(9, "isOrderSell()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + PrintError(GetLastError()) + " : Bid=" + DoubleToStr(Bid, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) +
                     "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")");
               }
            }
         }
         li_ret_0 = TRUE;
         break;
      }
   }
   gi_1416 = li_ret_0;
   return (li_ret_0);
}

int isOrderBuy() {
   double l_price_16;
   double l_pips_24;
   bool li_ret_0 = FALSE;
   int l_pos_4 = 0;
   int l_ord_total_12 = OrdersTotal();
   for (l_pos_4 = 0; l_pos_4 < l_ord_total_12; l_pos_4++) {
      OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_BUY) {
         if (!gi_832 && OrderMagicNumber() != g_magic_1116) continue;
         g_ord_profit_1340 = OrderProfit();
         gd_1308 = MathRound((Bid - OrderOpenPrice()) / Point);
         g_hour_1084 = TimeHour(OrderOpenTime() + 7200 - 3600 * (TimeZone + gi_1240));
         g_datetime_1532 = OrderOpenTime();
         g_ticket_1096 = OrderTicket();
         gi_1104 = TimeCurrent() - g_datetime_1532;
         if (g_str2int_168) {
            l_price_16 = 1.0 * StopLoss;
            l_pips_24 = TrailingTP();
            if (InvisibleStopLoss) l_price_16 = 0.0;
            if ((l_price_16 != 0.0 && OrderStopLoss() == 0.0) || l_pips_24 != 0.0 && !gi_832) {
               if (l_price_16 != 0.0) {
                  if (l_price_16 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_16 = MarketInfo(Symbol(), MODE_STOPLEVEL);
                  l_price_16 = NormalizeDouble(OrderOpenPrice() - l_price_16 * Point, Digits);
               }
               if (l_pips_24 != 0.0) l_pips_24 = NormalizeDouble(OrderOpenPrice() + l_pips_24 * Point, Digits);
               if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_16, l_pips_24, 0, Blue)) {
                  Comments(9, "isOrderBuy()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + PrintError(GetLastError()) + " : Ask=" + DoubleToStr(Ask, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) +
                     "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")");
               }
            }
         }
         li_ret_0 = TRUE;
         break;
      }
   }
   gi_1420 = li_ret_0;
   return (li_ret_0);
}

bool CloseBuyOrder() {
   bool l_bool_12;
   int li_20;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   int l_pos_8 = 0;
   double l_bid_24 = Bid;
   int l_ord_total_16 = OrdersTotal();
   for (l_pos_8 = 0; l_pos_8 < l_ord_total_16; l_pos_8++) {
      l_bool_12 = OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_BUY) {
         if (isFreezLevel() == 0) {
            if (Bid >= OrderTakeProfit() && OrderTakeProfit() > 0.0) continue;
            if (!gi_832) {
               if (OrderMagicNumber() == g_magic_1116) {
                  li_4 = TRUE;
                  li_20 = GetTickCount();
                  if (OrderClose(OrderTicket(), OrderLots(), Bid, g_slippage_228, Blue)) li_ret_0 = TRUE;
               }
            } else {
               li_4 = TRUE;
               li_20 = GetTickCount();
               if (SaveFileOrder(Time[0], 98, OrderTicket(), OrderLots(), Bid, 0, 0)) li_ret_0 = TRUE;
            }
         }
      }
   }
   if (li_4) {
      gi_1180 = GetTickCount() - li_20;
      gi_1188 = GetTickCount() - gi_1172;
      if (li_ret_0) {
         gi_1052 = gi_1064;
         gi_1536 = Time[0];
         gi_unused_1140 = 0;
         if (!gi_1448) g_price_1324 = l_bid_24;
         gi_1448 = FALSE;
         gi_1128 = g_str2int_248 - gi_1148;
         gi_unused_1396 = 0;
         gi_unused_1392 = 0;
         gi_1420 = FALSE;
         if (!gi_1476) {
            g_ticket_1092 = OrderTicket();
            g_ticket_1096 = 0;
         } else g_ticket_1108 = OrderTicket();
         gi_1408 = FALSE;
      } else {
         if (!gi_1476) {
            Comments(9, "CloseBuyOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Buy" + " (" + DoubleToStr(l_bid_24, Digits) + "): " + PrintError(GetLastError()));
            if (!gi_1448) g_price_1324 = l_bid_24;
            gi_1448 = TRUE;
            gi_unused_1396 = 1;
            gi_unused_1392 = 0;
            gd_unused_1364 = Bid;
         }
      }
   }
   return (li_ret_0);
}

bool CloseSellOrder() {
   bool l_bool_12;
   int li_20;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   int l_pos_8 = 0;
   double l_ask_24 = Ask;
   int l_ord_total_16 = OrdersTotal();
   for (l_pos_8 = 0; l_pos_8 < l_ord_total_16; l_pos_8++) {
      l_bool_12 = OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_SELL) {
         if (isFreezLevel() == 0) {
            if (Ask > OrderTakeProfit()) {
               if (!gi_832) {
                  if (OrderMagicNumber() == g_magic_1116) {
                     li_4 = TRUE;
                     li_20 = GetTickCount();
                     if (OrderClose(OrderTicket(), OrderLots(), Ask, g_slippage_228, Red)) li_ret_0 = TRUE;
                  }
               } else {
                  li_4 = TRUE;
                  li_20 = GetTickCount();
                  if (SaveFileOrder(Time[0], 98, OrderTicket(), OrderLots(), Ask, 0, 0)) li_ret_0 = TRUE;
               }
            }
         }
      }
   }
   if (li_4) {
      gi_1180 = GetTickCount() - li_20;
      gi_1188 = GetTickCount() - gi_1172;
      if (li_ret_0) {
         gi_1052 = gi_1064;
         gi_1536 = Time[0];
         gi_unused_1140 = 1;
         if (!gi_1448) g_price_1324 = l_ask_24;
         gi_1448 = FALSE;
         gi_1128 = g_str2int_248 - gi_1148;
         gi_unused_1396 = 0;
         gi_unused_1392 = 0;
         gi_1416 = FALSE;
         if (!gi_1476) {
            g_ticket_1092 = OrderTicket();
            g_ticket_1096 = 0;
         } else g_ticket_1108 = OrderTicket();
         gi_1408 = FALSE;
      } else {
         if (!gi_1476) {
            Comments(9, "CloseSellOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Sell" + " (" + DoubleToStr(l_ask_24, Digits) + "): " + PrintError(GetLastError()));
            if (!gi_1448) g_price_1324 = l_ask_24;
            gi_1448 = TRUE;
            gi_unused_1396 = 0;
            gi_unused_1392 = 1;
            gd_unused_1364 = Ask;
         }
      }
   }
   return (li_ret_0);
}

int isErrorCloseOrder(int ai_unused_0) {
   bool li_ret_4 = FALSE;
   if (g_str2int_248 != 0) {
      if (!gi_1448) gi_1148 = g_str2int_248;
      else {
         gi_1148--;
         if (gi_1148 > 0) {
            li_ret_4 = TRUE;
            Comments(9, "isErrorCloseOrder()", "Ïîâòîð çàêðûòèÿ îðäåðà (ïîïûòêà " + ((g_str2int_248 - gi_1148)) + " èç " + g_str2int_248 + ")");
         } else {
            gi_1448 = FALSE;
            gi_1128 = g_str2int_248 - gi_1148;
            Comments(9, "isErrorCloseOrder()", "Îøèáêà ïîâòîðà çàêðûòèÿ îðäåðà (ïîïûòîê " + g_str2int_248 + ")");
         }
      }
   }
   return (li_ret_4);
}

bool isFreezLevel() {
   double l_price_4;
   double ld_12;
   bool li_ret_0 = FALSE;
   if (g_str2int_256) {
      if (OrderStopLoss() != 0.0 || OrderTakeProfit() != 0.0) {
         if (OrderType() == OP_BUY) l_price_4 = Bid;
         if (OrderType() == OP_SELL) l_price_4 = Ask;
         ld_12 = MarketInfo(Symbol(), MODE_FREEZELEVEL) * Point;
         if (OrderStopLoss() != 0.0 && ld_12 > MathAbs(l_price_4 - OrderStopLoss())) li_ret_0 = TRUE;
         if (OrderTakeProfit() != 0.0 && ld_12 > MathAbs(l_price_4 - OrderTakeProfit())) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

bool SendBuyOrder(int ai_0, int ai_4) {
   int l_error_60;
   int l_ticket_8 = 0;
   bool li_ret_16 = FALSE;
   double l_price_28 = Ask;
   double l_price_36 = ai_0 / 10.0;
   double l_price_44 = ai_4 / 10.0;
   string ls_52 = "";
   gi_1448 = FALSE;
   double l_lots_20 = LotsForTrade(LotsPercent);
   if (l_lots_20 < 0.0) {
      Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : Íåäîñòàòî÷íî äåíåã (" + DoubleToStr(l_price_28, Digits) + ")");
      return (FALSE);
   }
   if (l_price_36 != 0.0 && !InvisibleStopLoss) {
      if (l_price_36 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_36 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_36 = NormalizeDouble(Ask - l_price_36 * Point, Digits);
   }
   if (l_price_44 != 0.0) {
      if (l_price_44 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_44 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_44 = NormalizeDouble(Ask + l_price_44 * Point, Digits);
   }
   if (g_str2int_168 && !gi_832) {
      l_price_36 = 0;
      l_price_44 = 0;
   }
   int li_12 = GetTickCount();
   if (!gi_832) {
      if (gi_212 == 0 || (gi_212 > 0 && gi_1388)) l_ticket_8 = OrderSend(Symbol(), OP_BUY, l_lots_20, Ask, g_slippage_224, l_price_36, l_price_44, "euronis", g_magic_1116, 0, Blue);
      if (l_ticket_8 > 0)
         if (OrderSelect(l_ticket_8, SELECT_BY_TICKET, MODE_TRADES)) li_ret_16 = TRUE;
   } else
      if (SaveFileOrder(Time[0], 0, l_ticket_8, l_lots_20, Ask, l_price_36, l_price_44)) li_ret_16 = TRUE;
   gi_1176 = GetTickCount() - li_12;
   gi_1184 = GetTickCount() - gi_1172;
   if (li_ret_16) {
      if (gi_1388) l_price_28 = g_price_1356;
      gi_1040 = MathRound((OrderOpenPrice() - l_price_28) / Point);
      gi_1044 = -1 * gi_1040;
      gi_1048 = gi_1064;
      if (g_str2int_220) {
         if (gi_1040 > gi_280) gi_1040 = gi_280;
         ls_52 = ls_52 + ", SlippageCorrection=" + (-1 * gi_1040);
      } else gi_1040 = 0;
      if (g_str2int_232) ls_52 = ls_52 + ", SpreadDifference=" + gi_1064;
      Comments(9, "SendBuyOrder()", "Îòêðûò Buy îðäåð : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_28, Digits) + "), Slippage=" + gi_1044 + ls_52);
      gi_1388 = FALSE;
      gi_1384 = FALSE;
      gi_1536 = Time[0];
      g_bars_1072 = Bars;
      gi_unused_1080 = l_ticket_8;
      gd_unused_1332 = 0;
      gi_1232 = 0;
      gi_1420 = TRUE;
   } else {
      if (gi_212 > 0 && !gi_1388) l_error_60 = 0;
      else l_error_60 = GetLastError();
      if (g_str2int_204) {
         if (!gi_1388) {
            gi_1388 = TRUE;
            gi_1384 = FALSE;
            g_bars_1088 = Bars;
            g_price_1356 = l_price_28;
         }
         Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy, îæèäàíèå ïîâòîðà : " + PrintError(l_error_60) + " (" + DoubleToStr(l_price_28, Digits) + ")");
      } else Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : " + PrintError(l_error_60) + " (" + DoubleToStr(l_price_28, Digits) + ")");
   }
   return (li_ret_16);
}

bool SendSellOrder(int ai_0, int ai_4) {
   int l_error_60;
   bool li_ret_8 = FALSE;
   int l_ticket_12 = 0;
   double l_price_28 = Bid;
   double l_price_36 = ai_0 / 10.0;
   double l_price_44 = ai_4 / 10.0;
   string ls_52 = "";
   gi_1448 = FALSE;
   double l_lots_20 = LotsForTrade(LotsPercent);
   if (l_lots_20 < 0.0) {
      Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : Íåäîñòàòî÷íî äåíåã (" + DoubleToStr(l_price_28, Digits) + ")");
      return (FALSE);
   }
   if (l_price_36 != 0.0 && !InvisibleStopLoss) {
      if (l_price_36 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_36 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_36 = NormalizeDouble(Bid + l_price_36 * Point, Digits);
   }
   if (l_price_44 != 0.0) {
      if (l_price_44 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_44 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_44 = NormalizeDouble(Bid - l_price_44 * Point, Digits);
   }
   if (g_str2int_168 && !gi_832) {
      l_price_36 = 0;
      l_price_44 = 0;
   }
   int li_16 = GetTickCount();
   if (!gi_832) {
      if (gi_212 == 0 || (gi_212 > 0 && gi_1384)) l_ticket_12 = OrderSend(Symbol(), OP_SELL, l_lots_20, Bid, g_slippage_224, l_price_36, l_price_44, "euronis", g_magic_1116, 0, Red);
      if (l_ticket_12 > 0)
         if (OrderSelect(l_ticket_12, SELECT_BY_TICKET, MODE_TRADES)) li_ret_8 = TRUE;
   } else
      if (SaveFileOrder(Time[0], 1, l_ticket_12, l_lots_20, Bid, l_price_36, l_price_44)) li_ret_8 = TRUE;
   gi_1176 = GetTickCount() - li_16;
   gi_1184 = GetTickCount() - gi_1172;
   if (li_ret_8) {
      if (gi_1384) l_price_28 = g_price_1356;
      gi_1040 = MathRound((l_price_28 - OrderOpenPrice()) / Point);
      gi_1044 = -1 * gi_1040;
      gi_1048 = gi_1064;
      if (g_str2int_220) {
         if (gi_1040 > gi_280) gi_1040 = gi_280;
         ls_52 = ls_52 + ", SlippageCorrection=" + (-1 * gi_1040);
      } else gi_1040 = 0;
      if (g_str2int_232) ls_52 = ls_52 + ", SpreadDifference=" + gi_1064;
      Comments(9, "SendSellOrder()", "Îòêðûò Sell îðäåð : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_28, Digits) + "), Slippage=" + gi_1044 +
         ls_52);
      gi_1384 = FALSE;
      gi_1388 = FALSE;
      gi_1536 = Time[0];
      g_bars_1072 = Bars;
      gi_unused_1080 = l_ticket_12;
      gd_unused_1332 = 0;
      gi_1232 = 1;
      gi_1416 = TRUE;
   } else {
      if (gi_212 > 0 && !gi_1384) l_error_60 = 0;
      else l_error_60 = GetLastError();
      if (g_str2int_204) {
         if (!gi_1384) {
            gi_1384 = TRUE;
            gi_1388 = FALSE;
            g_bars_1088 = Bars;
            g_price_1356 = l_price_28;
         }
         Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell, îæèäàíèå ïîâòîðà : " + PrintError(l_error_60) + " (" + DoubleToStr(l_price_28, Digits) + ")");
      } else Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : " + PrintError(l_error_60) + " (" + DoubleToStr(l_price_28, Digits) + ")");
   }
   return (li_ret_8);
}

int isOrderClose() {
   double ld_12;
   double ld_20;
   string ls_28;
   string l_name_44;
   color l_color_52;
   int li_unused_56;
   string l_name_60;
   int l_file_68;
   string ls_72;
   int l_ticket_0 = 0;
   double ld_4 = 0;
   string l_dbl2str_36 = "";
   if (g_ticket_1092 != 0) {
      if (OrderSelect(g_ticket_1092, SELECT_BY_TICKET) == TRUE) {
         ld_20 = OrderClosePrice();
         if (OrderCloseTime() > 0) {
            l_ticket_0 = OrderTicket();
            if (OrderType() == OP_SELL) {
               ld_12 = (OrderOpenPrice() - OrderClosePrice()) / Point;
               ld_4 = g_price_1324 - ld_20;
               ls_28 = " (Slippage o/c=" + gi_1044 + "/" + DoubleToStr(ld_4 / Point, 0) + ", SpreadD o/c=" + gi_1048 + "/" + gi_1052 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1324, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) +
                  ls_28);
            }
            if (OrderType() == OP_BUY) {
               ld_12 = (OrderClosePrice() - OrderOpenPrice()) / Point;
               ld_4 = ld_20 - g_price_1324;
               ls_28 = " (Slippage o/c=" + gi_1044 + "/" + DoubleToStr(ld_4 / Point, 0) + ", SpreadD o/c=" + gi_1048 + "/" + gi_1052 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1324, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) +
                  ls_28);
            }
            g_ticket_1092 = 0;
            g_ticket_1096 = 0;
         }
      }
   }
   if (g_ticket_1096 != 0) {
      if (OrderSelect(g_ticket_1096, SELECT_BY_TICKET) == TRUE) {
         if (OrderCloseTime() > 0) {
            l_ticket_0 = OrderTicket();
            ld_20 = OrderClosePrice();
            if (OrderType() == OP_SELL) {
               ld_12 = (OrderOpenPrice() - OrderClosePrice()) / Point;
               ls_28 = " (Slippage o/c=" + gi_1044 + "/..." + ", SpreadD o/c=" + gi_1048 + "/" + gi_1052 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               if (OrderClosePrice() <= OrderTakeProfit() && OrderTakeProfit() != 0.0) {
                  l_dbl2str_36 = "TP";
                  Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî TakeProfit (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                  gda_1380[25] += 1.0;
                  if (gi_812) {
                     gi_1428 = TRUE;
                     if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                     Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî TakeProfit");
                  }
               } else {
                  if (OrderClosePrice() >= OrderStopLoss() && OrderStopLoss() != 0.0) {
                     l_dbl2str_36 = "SL";
                     Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî StopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                     gia_1256[TimeDayOfWeek(OrderOpenTime())]++;
                     gda_1380[24] += 1.0;
                     if (gi_808) {
                        gi_1428 = TRUE;
                        if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                        Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî StopLoss");
                     }
                  } else {
                     if (g_ticket_1108 != 0) {
                        l_dbl2str_36 = "iSL";
                        Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî iStopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                        gia_1256[TimeDayOfWeek(OrderOpenTime())]++;
                        gda_1380[24] += 1.0;
                        if (gi_808) {
                           gi_1428 = TRUE;
                           if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî iStopLoss");
                        }
                     } else {
                        l_dbl2str_36 = "H";
                        Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò âðó÷íóþ (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                        gda_1380[26] += 1.0;
                        if (gi_816) {
                           gi_1428 = TRUE;
                           if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ");
                        }
                     }
                  }
               }
            }
            if (OrderType() == OP_BUY) {
               ld_12 = (OrderClosePrice() - OrderOpenPrice()) / Point;
               ls_28 = " (Slippage o/c=" + gi_1044 + "/..." + ", SpreadD o/c=" + gi_1048 + "/" + gi_1052 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               if (OrderClosePrice() >= OrderTakeProfit() && OrderTakeProfit() != 0.0) {
                  l_dbl2str_36 = "TP";
                  Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî TakeProfit (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                  gda_1380[25] += 1.0;
                  if (gi_812) {
                     gi_1428 = TRUE;
                     if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                     Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî TakeProfit");
                  }
               } else {
                  if (OrderClosePrice() <= OrderStopLoss() && OrderStopLoss() != 0.0) {
                     l_dbl2str_36 = "SL";
                     Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî StopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                     gia_1256[TimeDayOfWeek(OrderOpenTime())]++;
                     gda_1380[24] += 1.0;
                     if (gi_808) {
                        gi_1428 = TRUE;
                        if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                        Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî StopLoss");
                     }
                  } else {
                     if (g_ticket_1108 != 0) {
                        l_dbl2str_36 = "iSL";
                        Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî iStopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                        gia_1256[TimeDayOfWeek(OrderOpenTime())]++;
                        gda_1380[24] += 1.0;
                        if (gi_808) {
                           gi_1428 = TRUE;
                           if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî iStopLoss");
                        }
                     } else {
                        l_dbl2str_36 = "H";
                        Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò âðó÷íóþ (" + DoubleToStr(ld_20, Digits) + ")" + ls_28);
                        gda_1380[26] += 1.0;
                        if (gi_816) {
                           gi_1428 = TRUE;
                           if (!IsTesting() && !IsOptimization()) GlobalVariableSet(g_var_name_1660, gi_1200);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ");
                        }
                     }
                  }
               }
            }
            if (OrderCloseTime() >= Time[0] && g_str2int_416) gi_1536 = Time[0];
            if (!IsOptimization()) {
               if (OrderType() == OP_BUY) {
                  li_unused_56 = 1;
                  l_color_52 = Blue;
                  l_name_44 = OrderTicket() + " buy  " + DoubleToStr(OrderLots(), 2) + " " + OrderSymbol() + " at " + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               }
               if (OrderType() == OP_SELL) {
                  li_unused_56 = 2;
                  l_color_52 = Red;
                  l_name_44 = OrderTicket() + " sell  " + DoubleToStr(OrderLots(), 2) + " " + OrderSymbol() + " at " + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               }
               ObjectCreate(l_name_44, OBJ_ARROW, 0, OrderCloseTime(), OrderClosePrice());
               ObjectSet(l_name_44, OBJPROP_ARROWCODE, 3);
               ObjectSet(l_name_44, OBJPROP_COLOR, Black);
               l_name_44 = OrderTicket() + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS)) + "->" + DoubleToStr(OrderClosePrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               ObjectCreate(l_name_44, OBJ_TREND, 0, OrderOpenTime(), OrderOpenPrice(), OrderCloseTime(), OrderClosePrice());
               ObjectSet(l_name_44, OBJPROP_STYLE, STYLE_DOT);
               ObjectSet(l_name_44, OBJPROP_WIDTH, 1);
               ObjectSet(l_name_44, OBJPROP_RAY, FALSE);
               ObjectSet(l_name_44, OBJPROP_COLOR, l_color_52);
            }
            g_ticket_1108 = 0;
            g_ticket_1096 = 0;
         }
      }
   }
   if (l_ticket_0 > 0 && !IsOptimization()) {
      l_name_60 = gs_1616 + "Report.csv";
      if (gi_1464 && IsTesting()) {
         gi_1464 = FALSE;
         FileDelete(l_name_60);
      }
      l_file_68 = FileOpen(l_name_60, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_68 < 1) Comments(9, "isOrderClose()", "Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + l_name_60 + " :" + PrintError(GetLastError()));
      else {
         if (FileSize(l_file_68) <= 0) {
            FileWrite(l_file_68, "Ticket", "Type", "Size", "Item", "", "", "", "Open", "", "", "TakeProfit", "StopLoss", "", "", "", "Close", "", "", "ProfitP", "Profit$", "Profit%", "LifeTime", "Expert");
            FileWrite(l_file_68, "", "", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "SpreadD", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "SpreadD", "", "", "", "", "");
         }
         FileSeek(l_file_68, 0, SEEK_END);
         ls_72 = "";
         if (l_dbl2str_36 == "") l_dbl2str_36 = DoubleToStr(ld_4 / Point, 0);
         if (OrderType() == OP_SELL) ls_72 = "sell";
         if (OrderType() == OP_BUY) ls_72 = "buy";
         FileWrite(l_file_68, OrderTicket(), ls_72, " " + DoubleToStr(OrderLots(), 2), gs_1608, TimeToStr(OrderOpenTime(), TIME_DATE|TIME_SECONDS) + " (" + NameDayOfWeek(OrderOpenTime()) +
            ")", gi_1176 + " (" + gi_1184 + ")", DoubleToStr(OrderOpenPrice(), Digits), g_count_1132, gi_1044, gi_1048, DoubleToStr(OrderTakeProfit(), Digits), DoubleToStr(OrderStopLoss(), Digits), TimeToStr(OrderCloseTime(), TIME_DATE|TIME_SECONDS) + " (" + NameDayOfWeek(OrderCloseTime()) + ")", gi_1180 + " (" + gi_1188 + ")", DoubleToStr(OrderClosePrice(), Digits), gi_1128, l_dbl2str_36, gi_1052, DoubleToStr(ld_12, 0), " " + DoubleToStr(OrderProfit(), 2), " " + DoubleToStr(100.0 * OrderProfit() / (AccountBalance() - OrderProfit()), 1), OrderCloseTime() - OrderOpenTime(), WindowExpertName());
         FileClose(l_file_68);
      }
      g_count_1132 = 0;
      gi_1176 = 0;
      gi_1184 = 0;
      gi_1180 = 0;
      gi_1188 = 0;
   }
   if (l_ticket_0 > 0) gi_1516 = TRUE;
   return (l_ticket_0);
}

string NameDayOfWeek(int ai_0) {
   if (TimeDayOfWeek(ai_0) == 0) return ("âñ");
   if (TimeDayOfWeek(ai_0) == 1) return ("ïí");
   if (TimeDayOfWeek(ai_0) == 2) return ("âò");
   if (TimeDayOfWeek(ai_0) == 3) return ("ñð");
   if (TimeDayOfWeek(ai_0) == 4) return ("÷ò");
   if (TimeDayOfWeek(ai_0) == 5) return ("ïò");
   if (TimeDayOfWeek(ai_0) == 6) return ("ñá");
   return ("");
}

bool isNewBar() {
   bool li_ret_0 = FALSE;
   if (Time[0] != g_time_1168) {
      g_time_1168 = Time[0];
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool isNewHour() {
   bool li_ret_0 = FALSE;
   if (Hour() != gi_1164) {
      gi_1164 = Hour();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool isNewDayOfWeek() {
   bool li_ret_0 = FALSE;
   if (DayOfWeek() != g_day_of_week_1152) {
      g_day_of_week_1152 = DayOfWeek();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

int GMTSWDifference() {
   int li_ret_0 = 0;
   if (SWChangeMode == 1 || SWChangeMode == 3) {
      if (TimeCurrent() > gi_1540 && TimeCurrent() < gi_1552) li_ret_0 = 1;
      if (TimeCurrent() > gi_1544 && TimeCurrent() < gi_1556) li_ret_0 = -1;
   }
   if (SWChangeMode == 2)
      if (TimeCurrent() > gi_1540 || TimeCurrent() < gi_1544) li_ret_0 = 1;
   return (li_ret_0);
}

bool StartRulls() {
   int li_4;
   int li_unused_0 = 1;
   gi_1524 = TimeCurrent() + 7200 - 3600 * (TimeZone + gi_1240);
   g_hour_1192 = TimeHour(gi_1524);
   g_day_of_week_1196 = TimeDayOfWeek(gi_1524);
   gi_1200 = TimeDay(gi_1524);
   g_month_1204 = TimeMonth(gi_1524);
   g_year_1208 = TimeYear(gi_1524);
   if (isNewDayOfWeek()) {
      li_4 = gi_1240;
      gi_1240 = GMTSWDifference();
      if (li_4 != gi_1240) {
         MakeInitString();
         if (gi_1240 >= 0) Comments(9, "GMTSWDifference()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction+" + gi_1240);
         if (gi_1240 < 0) Comments(9, "GMTSWDifference()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction" + gi_1240);
      }
   }
   CheckSpreadDifference();
   CheckBlockByStopsDate();
   isOrderClose();
   isNoNews(gi_1524, gi_868);
   if (IsOptimization() && !gi_788) {
      if (gi_792 > 12) return (FALSE);
      if (gi_796 > 12) return (FALSE);
      if (gi_800 < 12) return (FALSE);
      if (gi_804 < 12) return (FALSE);
      if (gi_792 > gi_796 || gi_800 > gi_804) return (FALSE);
   }
   if (IsTesting() || IsOptimization()) {
      gi_828 = FALSE;
      gi_832 = FALSE;
   }
   if (gi_828 && gi_832) {
      Comment("TradeTransferIn è TradeTransferOut íå ìîãóò ðàáîòàòü îäíîâðåìåííî!!!");
      li_unused_0 = 0;
   }
   MarginControl();
   if (!g_bool_1504 && IsTradeAllowed()) Comments(9, "IsTradeAllowed()", "Òîðãîâûå îïåðàöèè ðàçðåøåíû");
   if (g_bool_1504 && !IsTradeAllowed()) Comments(9, "IsTradeAllowed()", "Òîðãîâûå îïåðàöèè çàïðåùåíû");
   g_bool_1504 = IsTradeAllowed();
   int li_8 = gi_1496;
   gi_1496 = FALSE;
   if (!isVolatilitytoTrade()) gi_1496 = TRUE;
   if (g_str2int_700) Comments(3, "", "BlockByVolatility = " + gi_1496);
   li_8 = gi_1488;
   gi_1488 = FALSE;
   int li_12 = MaxChannelLimit(gd_324, g_str2int_332, g_str2int_348);
   if (li_12 != 0) gi_1488 = TRUE;
   if (!li_8 && gi_1488) Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð êàíàëà (" + DoubleToStr(gd_324, 0) + "/" + g_str2int_332 + ")");
   if (li_8 && !gi_1488) Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_324, 0) + "/" + g_str2int_332 + ")");
   li_8 = gi_1484;
   gi_1484 = FALSE;
   int li_16 = MaxChannelLimit(gd_336, g_str2int_344, g_str2int_352);
   if (li_16 != 0) gi_1484 = TRUE;
   if (!li_8 && gi_1484) Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð êàíàëà (" + DoubleToStr(gd_336, 0) + "/" + g_str2int_344 + ")");
   if (li_8 && !gi_1484) Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_336, 0) + "/" + g_str2int_344 + ")");
   li_8 = gi_1492;
   gi_1492 = FALSE;
   if (MaxVolumeLimit(gd_300, g_str2int_308, g_str2int_312)) gi_1492 = TRUE;
   if (!li_8 && gi_1492) Comments(9, "MaxVolumeLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð áàðîâ (" + DoubleToStr(gd_300, 0) + "/" + g_str2int_308 + ")");
   if (li_8 && !gi_1492) Comments(9, "MaxVolumeLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_300, 0) + "/" + g_str2int_308 + ")");
   if (gi_1232 == 1) Comments(4, "", "Next Direction = buy");
   if (gi_1232 == 0) Comments(4, "", "Next Direction = sell");
   if (gi_1232 == 99) Comments(4, "", "Next Direction = buy or sell");
   li_8 = gi_1480;
   gi_1480 = FALSE;
   if (!isSpreadtoTrade()) gi_1480 = TRUE;
   if (!li_8 && gi_1480) Comments(9, "isSpreadtoTrade()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð ñïðåäà (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")");
   if (li_8 && !gi_1480) Comments(9, "isSpreadtoTrade()", "Òîðãîâëÿ ðàçðåøåíà (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")");
   if (CheckDrawDown) {
      if (gi_1444) {
         if (!gi_1432) {
            if (LowRiskSettingsNumber != 0) {
               SetSettings(LowRiskSettingsNumber);
               MakeInitString();
            }
            SetTimeSettings(gi_764);
            MakeTimeString();
            gi_1164--;
            gi_1432 = TRUE;
            Comments(9, "isTimetoTrade()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìèí. ðèñêàìè");
         }
      } else {
         if (gi_1432) {
            if (LowRiskSettingsNumber != 0) {
               SetSettings(SettingsNumber);
               MakeInitString();
            }
            SetTimeSettings(gi_760);
            MakeTimeString();
            gi_1164--;
            gi_1432 = FALSE;
            Comments(9, "isTimetoTrade()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìàêñ. ðèñêàìè");
         }
      }
   }
   if (isNewBar()) {
   }
   if (isNewHour()) {
      SendMailReport();
      li_8 = gi_1500;
      gi_1500 = FALSE;
      if (!isTimetoTrade(gi_1524)) gi_1500 = TRUE;
      if (!li_8 && gi_1500) {
         Comments(9, "isTimetoTrade()", "Òîðãîâëÿ çàáëîêèðîâàíà: Òîðãîâîå âðåìÿ âûøëî");
         gi_1428 = FALSE;
      }
      if (li_8 && !gi_1500) {
         gi_1232 = 99;
         Comments(9, "isTimetoTrade()", "Òîðãîâëÿ ðàçðåøåíà");
      }
      gi_1520 = FALSE;
      if (!gi_1500 && g_hour_1192 == 23) gi_1520 = TRUE;
   }
   return (TRUE);
}

int CheckSpreadDifference() {
   bool li_ret_0 = FALSE;
   if (g_str2int_232) {
      gi_1064 = MathRound(gi_236 - MarketInfo(Symbol(), MODE_SPREAD));
      if (gi_1420) gi_1060 = gi_1048;
      if (gi_1416) gi_1060 = gi_1064;
      Comments(0, "", "SpreadDifference = " + gi_1064 + "   SpreadCorrection = " + gi_1060);
   } else gi_1060 = 0;
   return (li_ret_0);
}

int SendMailReport() {
   double l_global_var_8;
   double l_global_var_16;
   double ld_24;
   string ls_96;
   bool li_ret_0 = FALSE;
   bool li_4 = TRUE;
   string ls_32 = "";
   int l_error_40 = 0;
   int li_44 = TimeCurrent() - 3600 * (TimeZone + gi_1240);
   double ld_48 = 1.0 * TimeHour(li_44);
   double ld_56 = 1.0 * TimeDay(li_44);
   string ls_64 = " ";
   string ls_72 = "";
   string l_var_name_80 = "MailReportLB" + AccountNumber();
   string l_var_name_88 = "MailReportLD" + AccountNumber();
   if (IsTesting() || IsOptimization()) {
      l_var_name_80 = "Test" + l_var_name_80;
      l_var_name_88 = "Test" + l_var_name_88;
   }
   if (UseMailReport) {
      if (!gi_1400) {
         gi_1400 = TRUE;
         if (!GlobalVariableCheck(l_var_name_80) || !GlobalVariableCheck(l_var_name_88) || IsTesting() || IsOptimization()) {
            if (GlobalVariableSet(l_var_name_80, AccountBalance()) == 0 || GlobalVariableSet(l_var_name_88, TimeDay(li_44 - 86400)) == 0) {
               Comments(9, "SendMailReport()", "Íåâîçìîæíî óñòàíîâèòü ãëîá. ïåðåìåííûå äëÿ îòïðàâêè îò÷åòà íà e-mail");
               UseMailReport = FALSE;
            } else Comments(9, "SendMailReport()", "Íîâûå çíà÷åíèÿ ãëîá. ïåðåìåííûõ äëÿ îòïðàâêè îò÷åòà íà e-mail");
         }
      }
      l_global_var_16 = GlobalVariableGet(l_var_name_80);
      l_global_var_8 = GlobalVariableGet(l_var_name_88);
      if ((l_global_var_8 != ld_56 && ld_56 != 6.0 && ld_56 != 0.0 && ld_48 >= 1.0 * MailReportHourGMT) || (AccountMargin() == 0.0 && gi_1404)) {
         if (AccountMargin() == 0.0 && gi_1404) {
            gi_1404 = FALSE;
            li_4 = FALSE;
         }
         ls_96 = gs_1616 + " " + AccountNumber();
         ls_32 = ls_32 + ls_96 + ls_64;
         ls_32 = ls_32 + TimeToStr(li_44, TIME_DATE|TIME_MINUTES) + " GMT" + ls_64;
         ls_32 = ls_32 + "Balance: " + DoubleToStr(AccountBalance(), 2) + AccountCurrency() + ls_64;
         ld_24 = AccountBalance() - l_global_var_16;
         ls_72 = "";
         if (AccountMargin() != 0.0) {
            gi_1404 = TRUE;
            if (AccountEquity() > AccountBalance()) ls_72 = "+";
            ls_32 = ls_32 + "Trades: " + ls_72 + DoubleToStr(AccountEquity() - AccountBalance(), 2) + AccountCurrency() + ls_64;
         }
         ls_72 = "";
         if (ld_24 > 0.0) ls_72 = "+";
         if (li_4) ls_32 = ls_32 + "DayProfit: " + ls_72 + DoubleToStr(ld_24, 2) + AccountCurrency();
         if (!IsTesting() && !IsOptimization()) {
            GetLastError();
            SendMail("report", ls_32);
            l_error_40 = GetLastError();
         }
         if (l_error_40 != 0/* NO_ERROR */) {
            Comments(9, "SendMailReport()", "Íå óäàëîñü îòïðàâèòü îò÷åò íà e-mail: " + PrintError(l_error_40));
            UseMailReport = FALSE;
         } else {
            Comments(9, "SendMailReport()", "Îòïðàâëåí îò÷åò íà e-mail");
            if (li_4) {
               GlobalVariableSet(l_var_name_88, ld_56);
               GlobalVariableSet(l_var_name_80, AccountBalance());
            }
            li_ret_0 = TRUE;
         }
      }
   }
   return (li_ret_0);
}

int isProfitValuetoClose(int ai_0) {
   int li_8;
   bool li_ret_4 = FALSE;
   Comments(1, "", "CurrentOrderProfitPoint = " + DoubleToStr(gd_1308, 0));
   if (g_str2int_172 == 0 || ai_0 == gi_272) {
      if (gd_1308 >= ai_0) {
         if (gi_1104 < MinOrderLifeTime && MinOrderLifeTime > 0) gi_unused_1100 = g_ticket_1096;
         else li_ret_4 = TRUE;
      } else {
         if (g_str2int_252) {
            li_8 = Bars - g_bars_1072;
            if (gd_1308 > 0.0 && gd_1308 - ai_0 * (1 - li_8 / g_str2int_368) >= 0.0) li_ret_4 = TRUE;
         }
      }
   } else {
      if (gd_1308 >= ai_0 && !gi_1408) {
         gd_1316 = 0.0;
         gi_1408 = TRUE;
      }
      if (gi_1408) {
         if (gd_1308 <= MathFloor((100 - g_str2int_176) * gi_280 / 100)) {
            li_ret_4 = TRUE;
            gi_1408 = FALSE;
         } else {
            if (gd_1316 < gd_1308) gd_1316 = gd_1308;
            if (gd_1308 <= MathFloor((100 - g_str2int_172) * gd_1316 / 100.0)) {
               li_ret_4 = TRUE;
               gi_1408 = FALSE;
            }
         }
      }
   }
   return (li_ret_4);
}

int isInvisibleStopLosstoClose(int ai_0) {
   bool li_ret_4 = FALSE;
   if (InvisibleStopLoss) {
      if (StopLoss != 0) {
         if ((gd_1308 <= (-1 * StopLoss) + gi_1060 && ai_0 == 1) || (gd_1308 <= (-1 * StopLoss) && ai_0 == 0)) {
            li_ret_4 = TRUE;
            gi_1476 = TRUE;
         }
      }
   }
   return (li_ret_4);
}

int isChanneltoOpen(int ai_0, int ai_4, int ai_8, int ai_12) {
   bool li_ret_16 = FALSE;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_16);
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)] + Point * ai_12;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)] - Point * ai_12;
   if (gi_1056 == 10) {
      if (g_str2int_404 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1056) * Point * gi_1056;
         ld_28 = MathRound(ld_28 / Point / gi_1056) * Point * gi_1056;
      }
      if (g_str2int_404 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1056) * Point * gi_1056;
         ld_28 = MathCeil(ld_28 / Point / gi_1056) * Point * gi_1056;
      }
      if (g_str2int_404 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1056) * Point * gi_1056;
         ld_28 = MathFloor(ld_28 / Point / gi_1056) * Point * gi_1056;
      }
   }
   if (ai_0 == 0) {
      if (!gi_1024) {
         if (Bid < ld_28 || (ai_8 && Bid <= ld_28)) li_ret_16 = TRUE;
      } else
         if (Bid > ld_20 || (ai_8 && Bid >= ld_20)) li_ret_16 = TRUE;
   }
   if (ai_0 == 1) {
      if (!gi_1024) {
         if (Bid > ld_20 || (ai_8 && Bid >= ld_20)) li_ret_16 = TRUE;
      } else
         if (Bid < ld_28 || (ai_8 && Bid <= ld_28)) li_ret_16 = TRUE;
   }
   return (li_ret_16);
}

int isChanneltoClose(int ai_0, int ai_4, int ai_8, int ai_12) {
   bool li_ret_16 = FALSE;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_16);
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)] + Point * ai_12;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)] - Point * ai_12;
   if (gi_1056 == 10) {
      if (g_str2int_404 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1056) * Point * gi_1056;
         ld_28 = MathRound(ld_28 / Point / gi_1056) * Point * gi_1056;
      }
      if (g_str2int_404 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1056) * Point * gi_1056;
         ld_28 = MathCeil(ld_28 / Point / gi_1056) * Point * gi_1056;
      }
      if (g_str2int_404 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1056) * Point * gi_1056;
         ld_28 = MathFloor(ld_28 / Point / gi_1056) * Point * gi_1056;
      }
   }
   if (ai_0 == 0) {
      if (!gi_1024) {
         if (Bid > ld_20 || (ai_8 && Bid >= ld_20)) li_ret_16 = TRUE;
      } else
         if (Bid < ld_28 || (ai_8 && Bid <= ld_28)) li_ret_16 = TRUE;
   }
   if (ai_0 == 1) {
      if (!gi_1024) {
         if (Bid < ld_28 || (ai_8 && Bid <= ld_28)) li_ret_16 = TRUE;
      } else
         if (Bid > ld_20 || (ai_8 && Bid >= ld_20)) li_ret_16 = TRUE;
   }
   return (li_ret_16);
}

bool isTimetoTrade(int ai_0) {
   int li_12;
   int li_16;
   bool li_ret_4 = FALSE;
   int l_hour_20 = TimeHour(ai_0);
   int l_day_of_week_24 = TimeDayOfWeek(ai_0);
   int l_day_28 = TimeDay(ai_0);
   int l_month_32 = TimeMonth(ai_0);
   int l_year_36 = TimeYear(ai_0);
   if (l_day_of_week_24 > 0 && l_day_of_week_24 < 6) {
      for (int li_8 = 0; li_8 < 10; li_8 += 2) {
         li_12 = gia_1248[l_day_of_week_24 - 1][li_8];
         li_16 = gia_1248[l_day_of_week_24 - 1][li_8 + 1];
         if (CheckTimes(l_hour_20, li_12, li_16)) {
            li_ret_4 = TRUE;
            break;
         }
      }
      if (l_day_of_week_24 == 1 && l_hour_20 < 12 && gi_768) li_ret_4 = FALSE;
      if (l_day_of_week_24 == 5 && l_hour_20 >= 12 && gi_772) li_ret_4 = FALSE;
      if ((l_day_of_week_24 != MathAbs(gi_780) && gi_780 > 0) || (l_day_of_week_24 == MathAbs(gi_780) && gi_780 < 0)) li_ret_4 = FALSE;
      if (l_month_32 != gi_784 && gi_784 != 0) li_ret_4 = FALSE;
      if (gi_776) {
         if (l_month_32 == 1 || l_month_32 == 3 || l_month_32 == 5 || l_month_32 == 7 || l_month_32 == 9 || l_month_32 == 11 && l_day_28 == 30 || l_day_28 == 31) li_ret_4 = FALSE;
         if (l_month_32 == 4 || l_month_32 == 6 || l_month_32 == 8 || l_month_32 == 10 || l_month_32 == 12 && l_day_28 == 29 || l_day_28 == 30) li_ret_4 = FALSE;
         if (l_month_32 == 2 && l_day_28 == 27 || l_day_28 == 28 || l_day_28 == 29) li_ret_4 = FALSE;
      }
   }
   if (ai_0 > StrToTime("2008.06.10 5:00") && ai_0 < StrToTime("2008.06.10 10:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.10.15 19:00") && ai_0 < StrToTime("2008.10.16 23:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2009.1.19 22:45") && ai_0 < StrToTime("2009.1.19 23:15")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.10.29 5:00") && ai_0 < StrToTime("2008.10.29 10:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.12.18 4:45") && ai_0 < StrToTime("2008.12.18 10:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.12.24 12:00") && ai_0 < StrToTime("2009.01.05 12:00")) li_ret_4 = FALSE;
   return (li_ret_4);
}

bool CheckTimes(int ai_0, int ai_4, int ai_8) {
   bool li_ret_12 = FALSE;
   if (ai_4 > 23 || ai_4 < 0) ai_4 = 0;
   if (ai_8 > 23 || ai_8 < 0) ai_8 = 0;
   if (ai_4 < ai_8 && (ai_0 >= ai_4 && ai_0 < ai_8)) li_ret_12 = TRUE;
   if (ai_4 > ai_8 && ai_0 >= ai_4 || ai_0 < ai_8) li_ret_12 = TRUE;
   return (li_ret_12);
}

int ClearBuffer(string as_0, int ai_unused_8) {
   bool li_ret_12 = FALSE;
   if (as_0 == "ReceiveBuffer") {
      gda_1372[0][0] = 0;
      gda_1372[0][1] = 99;
      gda_1372[0][2] = 0;
      gda_1372[0][3] = 0;
      gda_1372[0][4] = 0;
      gda_1372[0][5] = 0;
   }
   if (as_0 == "CommandBuffer") {
      gda_1376[0][0] = 0;
      gda_1376[0][1] = 99;
      gda_1376[0][2] = 0;
      gda_1376[0][3] = 0;
      gda_1376[0][4] = 0;
      gda_1376[0][5] = 0;
      gda_1376[0][6] = 0;
      gda_1376[0][7] = 0;
   }
   if (as_0 == "VariablesBuffer") for (int l_index_16 = 0; l_index_16 < 7; l_index_16++) gsa_1624[l_index_16] = "";
   if (as_0 == "InformationBuffer") for (l_index_16 = 0; l_index_16 < 50; l_index_16++) gsa_1628[l_index_16] = "";
   if (as_0 == "LogFileBuffer") for (l_index_16 = 0; l_index_16 < 20; l_index_16++) gsa_1640[l_index_16] = "";
   if (as_0 == "ErrorArray") for (l_index_16 = 0; l_index_16 < 4300; l_index_16++) gsa_1636[l_index_16] = "Íåïîíÿòíàÿ îøèáêà";
   return (li_ret_12);
}

bool isNoNews(int ai_0, int ai_4) {
   int l_file_12;
   int li_20;
   string ls_32;
   string ls_40;
   string ls_48;
   string ls_56;
   string ls_64;
   string ls_72;
   int li_80;
   int li_84;
   bool li_ret_8 = TRUE;
   bool li_16 = FALSE;
   string ls_24 = "";
   if (gi_864 && (ai_0 - gi_1528) / 60 - ai_4 >= 0 || ai_4 == 0) {
      if (ai_4 != 0) gi_1528 = ai_0;
      l_file_12 = FileOpen("news" + TimeMonth(ai_0 - 3600 * (TimeZone + gi_1240)) + TimeYear(ai_0 - 3600 * (TimeZone + gi_1240)) + ".csv", FILE_CSV|FILE_READ, ';');
      if (l_file_12 < 1) {
         if (!gi_1440) {
            gi_1440 = TRUE;
            if (ai_4 != 0) Comments(9, "isNoNews()", "Ôàéë íå îáíàðóæåí, îøèáêà : " + GetLastError());
         }
      } else {
         gi_1440 = FALSE;
         while (!FileIsEnding(l_file_12)) {
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 1) ls_40 = "0" + ls_32;
            else ls_40 = ls_32;
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 1) ls_48 = "0" + ls_32;
            else ls_48 = ls_32;
            ls_56 = FileReadString(l_file_12);
            ls_32 = FileReadString(l_file_12);
            if (StrToInteger(ls_32) == 1) li_16 = TRUE;
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 4) ls_64 = "0" + ls_32;
            else ls_64 = ls_32;
            li_20 = StrToTime(ls_56 + "." + ls_48 + "." + ls_40 + " " + ls_64) + 3600 * (TimeZone + gi_1240);
            ls_72 = FileReadString(l_file_12);
            ls_24 = FileReadString(l_file_12);
            li_80 = li_20 - 60 * gi_872;
            li_84 = li_20 + 60 * gi_876;
            if (ai_0 >= li_80 && ai_0 < li_84 && li_16 || (!li_16 && !gi_880) && (gi_884 && ls_72 == "ÑØÀ") || (gi_888 && ls_72 == "Ôðàí." || ls_72 == "Ãåðì." || ls_72 == "Èòàë." ||
               ls_72 == "ÅÑ") || (gi_892 && ls_72 == "Øâåéö.") || (gi_900 && ls_72 == "Âåëèêîá.") || (gi_896 && ls_72 == "ßïîí.") || (gi_904 && ls_72 == "Àâñòðàë.") || (gi_908 && ls_72 == "Í.Çåëàíä.") ||
               (gi_912 && ls_72 == "Êàíàäà")) {
               li_ret_8 = FALSE;
               if (!(!gi_1436)) break;
               gi_1436 = TRUE;
               if (ai_4 == 0) break;
               Comments(9, "isNoNews()", "Áëîêèðîâêà ïî íîâîñòÿì âêëþ÷åíà ñ " + TimeToStr(li_80, TIME_MINUTES) + " äî " + TimeToStr(li_84, TIME_MINUTES) + " GMT+2 (" + ls_72 + ")");
               break;
            }
         }
         FileClose(l_file_12);
      }
      if (li_ret_8 && gi_1436) {
         gi_1436 = FALSE;
         if (ai_4 != 0) Comments(9, "isNoNews()", "Áëîêèðîâêà ïî íîâîñòÿì âûêëþ÷åíà");
      }
   }
   return (li_ret_8);
}

int SetTimeSettings(int ai_0) {
   bool li_ret_4 = FALSE;
   for (int l_count_8 = 0; l_count_8 < 10; l_count_8++) {
      gia_1248[0][l_count_8] = 0;
      gia_1248[1][l_count_8] = 0;
      gia_1248[2][l_count_8] = 0;
      gia_1248[3][l_count_8] = 0;
      gia_1248[4][l_count_8] = 0;
   }
   if (gi_752 && ai_0 >= 0) {
      if (ai_0 > 99) ai_0 = 99;
      li_ret_4 = TRUE;
      if (li_ret_4) {
         for (l_count_8 = 0; l_count_8 < 10; l_count_8++) {
            gia_1248[0][l_count_8] = gia_1252[5 * ai_0 + 0][l_count_8];
            gia_1248[1][l_count_8] = gia_1252[5 * ai_0 + 1][l_count_8];
            gia_1248[2][l_count_8] = gia_1252[5 * ai_0 + 2][l_count_8];
            gia_1248[3][l_count_8] = gia_1252[5 * ai_0 + 3][l_count_8];
            gia_1248[4][l_count_8] = gia_1252[5 * ai_0 + 4][l_count_8];
         }
      }
   } else {
      gia_1248[0][0] = gi_792;
      gia_1248[0][1] = gi_796;
      gia_1248[0][2] = gi_800;
      gia_1248[0][3] = gi_804;
      gia_1248[1][0] = gi_792;
      gia_1248[1][1] = gi_796;
      gia_1248[1][2] = gi_800;
      gia_1248[1][3] = gi_804;
      gia_1248[2][0] = gi_792;
      gia_1248[2][1] = gi_796;
      gia_1248[2][2] = gi_800;
      gia_1248[2][3] = gi_804;
      gia_1248[3][0] = gi_792;
      gia_1248[3][1] = gi_796;
      gia_1248[3][2] = gi_800;
      gia_1248[3][3] = gi_804;
      gia_1248[4][0] = gi_792;
      gia_1248[4][1] = gi_796;
      gia_1248[4][2] = gi_800;
      gia_1248[4][3] = gi_804;
   }
   return (li_ret_4);
}

double LotsForTrade(int ai_0) {
   double ld_ret_4;
   int li_unused_20;
   double ld_24;
   double ld_32;
   double l_free_magrin_12 = AccountFreeMargin();
   if (gd_1276 == 0.01) li_unused_20 = 2;
   else li_unused_20 = 1;
   if (Lots != 0.0) ld_ret_4 = Lots;
   else {
      ld_ret_4 = gd_1276 * MathFloor((l_free_magrin_12 - gd_112) * ai_0 / 100000.0 / gd_1276);
      if (ld_ret_4 > gd_96) ld_ret_4 = gd_96;
      if (BalanceControlMode == 1 || (BalanceControlMode == 4 && !gi_1520)) {
         ld_ret_4 = gd_1276 * MathFloor((g_global_var_1348 - gd_112) * ai_0 / 100000.0 / gd_1276);
         if (ld_ret_4 / ((l_free_magrin_12 - gd_112) / 100000.0) - 65.0 > 0.0) ld_ret_4 = gd_1276 * MathFloor(65.0 * (l_free_magrin_12 - gd_112) / 100000.0 / gd_1276);
         if (ld_ret_4 > gd_96) ld_ret_4 = gd_96;
      }
      if (BalanceControlMode == 2 || BalanceControlMode == 3 || (BalanceControlMode == 4 && gi_1520)) {
         ld_24 = 0.0;
         ld_32 = 0.0;
         if (AccountCurrency() == "USD") {
            if (!IsTesting() && !IsOptimization()) {
               if (gd_1292 <= 0.0) gd_1292 = iOpen("GBPUSD", PERIOD_H1, 0);
               if (gd_1300 <= 0.0) gd_1300 = iOpen("USDCHF", PERIOD_H1, 0);
            }
            if (gd_1292 <= 0.0) gd_1292 = 1.5;
            if (gd_1300 <= 0.0) gd_1300 = 1.15;
            if (gs_1608 == "EURGBP") ld_24 = (100000.0 * (Bid + Point) - 100000.0 * Bid) * gd_1292 * gd_1284;
            if (gs_1608 == "EURCHF") ld_24 = (100000.0 * (Bid + Point) - 100000.0 * Bid) / gd_1300 * gd_1284;
         }
         if (AccountCurrency() == "EUR") ld_24 = 10.0 * gd_1284 / gi_1056;
         if (ld_24 == 0.0 && gi_280 != 0.0 && g_str2int_276) {
            Comments(9, "LotsForTrade()", "Ðåæèì BalanceControlMode âûêëþ÷åí: Íåäîñòàòî÷íî äàííûõ äëÿ ðàñ÷åòà");
            BalanceControlMode = 0;
         } else {
            ld_32 = gd_1276 * MathFloor((g_global_var_1348 - l_free_magrin_12) / gi_280 / ld_24 * gd_1284 / gd_1276);
            if (ld_32 > ld_ret_4) {
               if (ld_32 / ((l_free_magrin_12 - gd_112) / 100000.0) - 65.0 > 0.0) ld_32 = gd_1276 * MathFloor(65.0 * (l_free_magrin_12 - gd_112) / 100000.0 / gd_1276);
               ld_ret_4 = ld_32;
            }
         }
      }
   }
   if (ld_ret_4 > NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2)) ld_ret_4 = NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2);
   if (ld_ret_4 < gd_1284) ld_ret_4 = gd_1284;
   if (0.00067 * l_free_magrin_12 - ld_ret_4 < 0.0) ld_ret_4 = -1.0;
   return (ld_ret_4);
}

double MarginControl() {
   double ld_8;
   double l_global_var_16;
   int l_mb_code_24;
   double ld_28;
   double ld_36;
   double ld_ret_0 = 0.0;
   if (gi_1456) {
      gi_1456 = FALSE;
      g_var_name_1644 = "MaxBalance";
      g_var_name_1652 = "LB";
      if (IsTesting() || IsOptimization()) {
         g_var_name_1644 = "Test" + g_var_name_1644;
         g_var_name_1652 = "Test" + g_var_name_1652;
      } else {
         g_var_name_1644 = g_var_name_1644 + AccountNumber();
         g_var_name_1652 = g_var_name_1652 + AccountNumber();
      }
      if (!IsOptimization() && !IsTesting() && GlobalVariableCheck(g_var_name_1644)) {
         if (GlobalVariableGet(g_var_name_1644) > AccountBalance() && ResetMaxBalance) {
            l_mb_code_24 = MessageBox("Ñáðîñèòü ïåðåìåííóþ MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1644), 2) + AccountCurrency(), "Question", MB_YESNO|MB_ICONQUESTION);
            if (l_mb_code_24 == IDYES) {
               GlobalVariableSet(g_var_name_1644, AccountBalance());
               Comments(9, "MarginControl()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1644), 2) + AccountCurrency());
            } else Comments(9, "MarginControl()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1644), 2) + AccountCurrency());
         } else Comments(9, "MarginControl()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1644), 2) + AccountCurrency());
      } else {
         GlobalVariableSet(g_var_name_1644, AccountBalance());
         Comments(9, "MarginControl()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1644), 2) + AccountCurrency());
      }
      GlobalVariableSet(g_var_name_1652, GlobalVariableGet(g_var_name_1644));
      if (AccountCurrency() != "USD" && AccountCurrency() != "EUR" && BalanceControlMode > 0) {
         Comments(9, "MarginControl()", "Íåâîçìîæíî óñòàíîâèòü ðåæèì BalanceControlMode=" + BalanceControlMode + ", íåèçâåòñíàÿ âàëþòà äåïîçèòà " + AccountCurrency());
         BalanceControlMode = 0;
      }
   }
   if (!GlobalVariableCheck(g_var_name_1644) || !GlobalVariableCheck(g_var_name_1652)) {
      GlobalVariableSet(g_var_name_1644, AccountBalance());
      GlobalVariableSet(g_var_name_1652, AccountBalance());
      if (!GlobalVariableCheck(g_var_name_1644) || !GlobalVariableCheck(g_var_name_1652)) {
         Comments(9, "MarginControl()", "Îøèáêà ñîçäàíèÿ ãëîáàëüíûõ ïåðåìåííûõ MaxBalance: " + PrintError(GetLastError()));
         g_global_var_1348 = AccountBalance();
         l_global_var_16 = AccountBalance();
      }
   } else {
      g_global_var_1348 = GlobalVariableGet(g_var_name_1644);
      l_global_var_16 = GlobalVariableGet(g_var_name_1652);
   }
   if (AccountBalance() > g_global_var_1348) {
      gi_1444 = FALSE;
      g_global_var_1348 = AccountBalance();
      GlobalVariableSet(g_var_name_1644, g_global_var_1348);
   }
   if (BalanceControlMode == 3 || BalanceControlMode == 4 && gi_1516) {
      gi_1516 = FALSE;
      ld_36 = gd_1276 * MathFloor((l_global_var_16 - gd_112) * LotsPercent / 100000.0 / gd_1276);
      if (ld_36 > gd_96) ld_36 = gd_96;
      if (ld_36 < gd_1284) ld_36 = gd_1284;
      if (AccountCurrency() == "USD") {
         if (!IsTesting() && !IsOptimization()) {
            if (gd_1292 <= 0.0) gd_1292 = iOpen("GBPUSD", PERIOD_H1, 0);
            if (gd_1300 <= 0.0) gd_1300 = iOpen("USDCHF", PERIOD_H1, 0);
         }
         if (gd_1292 <= 0.0) gd_1292 = 1.5;
         if (gd_1300 <= 0.0) gd_1300 = 1.15;
         if (gs_1608 == "EURGBP") ld_28 = (100000.0 * (Bid + Point) - 100000.0 * Bid) * gd_1292 * ld_36;
         if (gs_1608 == "EURCHF") ld_28 = (100000.0 * (Bid + Point) - 100000.0 * Bid) / gd_1300 * ld_36;
      }
      if (AccountCurrency() == "EUR") ld_28 = 10.0 * ld_36 / gi_1056;
      ld_8 = l_global_var_16 + 4.0 * ld_28 * gi_1056;
      if (g_global_var_1348 < ld_8) {
         Comments(9, "MarginControl()", "Óâåëè÷åíî çíà÷åíèå MaxBalance íà ðàçìåð ïîòåðÿííîé ïðèáûëè äî " + DoubleToStr(ld_8, 2) + AccountCurrency());
         g_global_var_1348 = ld_8;
         GlobalVariableSet(g_var_name_1644, g_global_var_1348);
      }
      GlobalVariableSet(g_var_name_1652, g_global_var_1348);
   }
   if (AccountBalance() < g_global_var_1348) {
      if (gi_136 > 0.0) {
         if (100.0 * (g_global_var_1348 - AccountBalance()) / (g_global_var_1348 - gd_112) > gi_136) gi_1444 = TRUE;
      } else {
         if (gi_136 == 0.0) {
            if (100.0 * (g_global_var_1348 - AccountBalance()) / (g_global_var_1348 - gd_112) > MathRound(LotsPercent / 4)) gi_1444 = TRUE;
         } else gi_1444 = TRUE;
      }
   }
   return (ld_ret_0);
}

int TimeProfit() {
   int li_4 = TimeCurrent() - g_datetime_1532;
   if (g_str2int_544) {
      if (li_4 >= 60 * g_str2int_580) return (gi_584 - gi_1040 + gi_1060);
      if (li_4 >= 60 * g_str2int_572) return (gi_576 - gi_1040 + gi_1060);
      if (li_4 >= 60 * g_str2int_564) return (gi_568 - gi_1040 + gi_1060);
      if (li_4 >= 60 * g_str2int_556) return (gi_560 - gi_1040 + gi_1060);
      if (li_4 >= 60 * g_str2int_548) return (gi_552 - gi_1040 + gi_1060);
   }
   return (gi_280 - gi_1040 + gi_1060);
}

int isRSItoOpen(int ai_0) {
   bool li_ret_4 = FALSE;
   if (g_period_604 == 0 || g_period_616 == 0 || g_period_624 == 0) return (li_ret_4);
   double l_irsi_8 = iRSI(NULL, g_timeframe_600, g_period_604, g_applied_price_608, 0);
   double l_irsi_16 = iRSI(NULL, g_timeframe_612, g_period_616, g_applied_price_620, 0);
   double ld_24 = iMA(NULL, 0, g_period_624, 0, g_ma_method_636, g_applied_price_640, gi_644);
   double ld_32 = iMA(NULL, 0, g_period_624, 0, g_ma_method_636, g_applied_price_640, gi_644);
   double l_price_40 = Ask;
   double l_price_48 = Bid;
   if (g_str2int_648 == 1) l_price_40 = Bid;
   if (g_str2int_648 == 2) l_price_48 = Ask;
   if (g_str2int_460 == 1) {
      ld_24 = MathRound(ld_24 / Point) * Point;
      ld_32 = MathRound(ld_32 / Point) * Point;
   }
   if (g_str2int_460 == 2) {
      ld_24 = MathCeil(ld_24 / Point) * Point;
      ld_32 = MathFloor(ld_32 / Point) * Point;
   }
   if (g_str2int_460 == 3) {
      ld_24 = MathFloor(ld_24 / Point) * Point;
      ld_32 = MathCeil(ld_32 / Point) * Point;
   }
   if (l_irsi_8 < g_str2dbl_652 || l_irsi_16 < g_str2int_684 && ld_24 >= l_price_40 + gd_628 * Point)
      if (gi_1232 == 1 || gi_1232 == 99 && ai_0 == 0) li_ret_4 = TRUE;
   if (l_irsi_8 > g_str2dbl_660 || l_irsi_16 > g_str2int_688 && ld_32 <= l_price_48 - gd_628 * Point)
      if (gi_1232 == 0 || gi_1232 == 99 && ai_0 == 1) li_ret_4 = TRUE;
   if (l_irsi_8 < g_str2dbl_676 && l_irsi_8 > g_str2dbl_668 && g_str2int_596) gi_1232 = 99;
   return (li_ret_4);
}

bool isVolatilitytoTrade() {
   bool li_ret_0 = TRUE;
   if (g_str2int_700) {
      if (iOpen(Symbol(), PERIOD_M5, 0) >= Ask + gd_708 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 0) <= Bid - gd_708 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) >= Ask + gd_716 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) <= Bid - gd_716 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) >= Ask + gd_724 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) <= Bid - gd_724 * Point) li_ret_0 = FALSE;
   }
   if (!li_ret_0) {
      if (gi_704) g_bars_1244 = Bars;
   } else
      if (g_bars_1244 == Bars) li_ret_0 = FALSE;
   return (li_ret_0);
}

double TrailingTP() {
   int li_8;
   int li_12;
   int li_unused_16;
   int li_20;
   int li_24;
   double ld_28;
   double ld_36;
   double ld_44;
   double ld_ret_0 = 0.0;
   if (TakeProfit != 0 && gi_280 != 0) {
      li_8 = MathRound(MarketInfo(Symbol(), MODE_STOPLEVEL));
      li_12 = MathRound(MarketInfo(Symbol(), MODE_FREEZELEVEL));
      li_unused_16 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
      li_20 = li_8 + li_12;
      if (!TrailingTakeProfit) {
         if (OrderTakeProfit() == 0.0) ld_ret_0 = 1.0 * TakeProfit;
      } else {
         li_24 = TimeProfit();
         if (OrderType() == OP_BUY) {
            ld_36 = OrderOpenPrice() + li_24 * Point;
            ld_28 = Ask + li_8 * Point;
            if (OrderTakeProfit() == 0.0) {
               ld_44 = ld_36 + li_12 * Point;
               if (ld_44 < ld_28) ld_44 = ld_28;
               if (ld_44 < ld_36) ld_44 = ld_36;
               ld_ret_0 = (ld_44 - OrderOpenPrice()) / Point;
            } else
               if (OrderTakeProfit() - NormalizeDouble(ld_36, Digits) != 0.0 && ld_36 > ld_28) ld_ret_0 = 1.0 * li_24;
         }
         if (OrderType() == OP_SELL) {
            ld_36 = OrderOpenPrice() - li_24 * Point;
            ld_28 = Bid - li_8 * Point;
            if (OrderTakeProfit() == 0.0) {
               ld_44 = ld_36 - li_12 * Point;
               if (ld_44 > ld_28) ld_44 = ld_28;
               if (ld_44 > ld_36) ld_44 = ld_36;
               ld_ret_0 = (OrderOpenPrice() - ld_44) / Point;
            } else
               if (OrderTakeProfit() - NormalizeDouble(ld_36, Digits) != 0.0 && ld_36 < ld_28) ld_ret_0 = 1.0 * li_24;
         }
      }
   }
   return (ld_ret_0);
}

int deinit() {
   int l_file_8;
   double l_global_var_12;
   double ld_20;
   string ls_0 = "OptReport";
   SaveCommentsFile("deinit");
   if (gi_980) Print("SysSpeed:  min=" + gi_1216 + "  average=" + DoubleToStr(gd_1260 / (1.0 * g_count_1224), 0) + "  max=" + gi_1220);
   if (!gi_984) return (0);
   if (IsOptimization() || IsTesting()) {
      l_global_var_12 = GlobalVariableGet("LastTimeLocal");
      ld_20 = GlobalVariableGet("OptCounter");
      if (gi_1512) ld_20 = 1.0;
      else ld_20 += 1.0;
      GlobalVariableSet("OptCounter", ld_20);
      GlobalVariableSet("LastOptTime", l_global_var_12);
      if (gi_1512 && gi_996) l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE, ';');
      else l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_8 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + ls_0 + ".csv, îøèáêà: ", GetLastError());
         return (0);
      }
      FileSeek(l_file_8, 0, SEEK_END);
      FillReportBuffer();
      if (IsTesting() && !IsOptimization() && gi_1512) FileWrite(l_file_8, "Testing", "s/l");
      if (IsOptimization() && gi_1512) FileWrite(l_file_8, "Optimization", "s/l");
      FileWrite(l_file_8, DoubleToStr(ld_20, 0), " " + DoubleToStr(gda_1380[24], 0));
      FileClose(l_file_8);
   }
   return (0);
}

int FillReportBuffer() {
   int l_pos_0 = 0;
   double ld_12 = 0.0;
   int l_hist_total_8 = OrdersHistoryTotal();
   for (l_pos_0 = 0; l_pos_0 < l_hist_total_8; l_pos_0++) {
      OrderSelect(l_pos_0, SELECT_BY_POS, MODE_HISTORY);
      if (OrderSymbol() != Symbol() || OrderMagicNumber() != g_magic_1116) continue;
      gda_1380[17] += 1.0;
      gda_1380[1] += OrderProfit();
      if (ld_12 < gda_1380[1]) ld_12 = gda_1380[1];
      if (ld_12 > gda_1380[1])
         if (gda_1380[5] < ld_12 - MathAbs(gda_1380[1])) gda_1380[5] = ld_12 - MathAbs(gda_1380[1]);
      if (OrderProfit() >= 0.0) {
         gda_1380[9] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1380[10] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1380[15] < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1380[15] = MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1380[7] < OrderProfit()) gda_1380[7] = OrderProfit();
         gda_1380[2] += OrderProfit();
         gda_1380[18] += 1.0;
      } else {
         gda_1380[9] = gda_1380[9] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1380[11] = gda_1380[11] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (MathAbs(gda_1380[16]) < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1380[16] = -1.0 * MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1380[8] > OrderProfit()) gda_1380[8] = OrderProfit();
         gda_1380[3] += OrderProfit();
         gda_1380[19] = gda_1380[18] + 1.0;
      }
   }
   if (gda_1380[17] != 0.0) gda_1380[20] = 100.0 * (gda_1380[18] / gda_1380[17]);
   if (gda_1380[17] != 0.0) gda_1380[21] = 100.0 * (gda_1380[19] / gda_1380[17]);
   if (gda_1380[3] != 0.0) gda_1380[4] = MathAbs(gda_1380[2] / gda_1380[3]);
   if (gda_1380[11] != 0.0) gda_1380[12] = MathAbs(gda_1380[10] / gda_1380[11]);
   if (gda_1380[19] != 0.0) gda_1380[23] = gda_1380[18] / gda_1380[19];
   return (0);
}

int SetGMTTime() {
   string ls_12;
   string l_name_20;
   string ls_28;
   int l_file_36;
   int l_str2time_80;
   string ls_84;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = FALSE;
   int li_48 = 99;
   int li_52 = 99;
   int l_str2int_56 = 99;
   int l_str2int_60 = 99;
   bool l_str2time_64 = FALSE;
   bool l_str2time_68 = FALSE;
   bool l_str2time_72 = FALSE;
   bool l_str2time_76 = FALSE;
   int l_count_40 = 21;
   while (l_count_40 > 0) {
      l_count_40--;
      if (l_count_40 == 0) ls_12 = "";
      else {
         if (l_count_40 > 9) ls_12 = l_count_40;
         else ls_12 = "0" + l_count_40;
      }
      l_name_20 = "gmtstd" + ls_12 + ".csv";
      l_file_36 = FileOpen(l_name_20, FILE_CSV|FILE_READ, ';');
      if (l_file_36 >= 0) break;
   }
   if (l_file_36 < 1) Comments(9, "SetGMTTime()", "Ôàéë íàñòðîåê ðàçíèö GMT íå çàãðóæåí, îøèáêà: " + PrintError(GetLastError()));
   else {
      Comments(9, "SetGMTTime()", "Çàãðóæåí ôàéë íàñòðîåê ðàçíèö GMT (" + l_name_20 + ")");
      ls_12 = FileReadString(l_file_36);
      ls_12 = FileReadString(l_file_36);
      for (ls_12 = FileReadString(l_file_36); !FileIsEnding(l_file_36); ls_12 = FileReadString(l_file_36)) {
         ls_12 = FileReadString(l_file_36);
         if (AccountCompany() == ls_12) {
            l_str2int_56 = StrToInteger(FileReadString(l_file_36));
            l_str2int_60 = StrToInteger(FileReadString(l_file_36));
            li_4 = TRUE;
            break;
         }
         ls_12 = FileReadString(l_file_36);
      }
      FileClose(l_file_36);
   }
   int l_shift_44 = iBarShift("GBPUSD", PERIOD_H1, D'24.10.2008 11:00', TRUE);
   if (l_shift_44 >= 240) {
      for (l_count_40 = 2; l_count_40 < 14; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.10.24 " + ls_28 + ":00");
         l_shift_44 = iBarShift("GBPUSD", PERIOD_H1, l_str2time_80);
         if (iHigh("GBPUSD", PERIOD_H1, l_shift_44) > 1.562 && iLow("GBPUSD", PERIOD_H1, l_shift_44) < 1.562) {
            l_str2time_64 = l_str2time_80;
            li_48 = l_count_40 - 8;
            break;
         }
      }
      if (l_str2time_64 == 0) {
      }
      for (l_count_40 = 0; l_count_40 < 12; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.10.27 " + ls_28 + ":00");
         l_shift_44 = iBarShift("GBPUSD", PERIOD_H1, l_str2time_80);
         if (iHigh("GBPUSD", PERIOD_H1, l_shift_44) > 1.55 && iLow("GBPUSD", PERIOD_H1, l_shift_44) < 1.55) {
            l_str2time_68 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_68 == 0) {
      }
      for (l_count_40 = 6; l_count_40 < 18; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.11.03 " + ls_28 + ":00");
         l_shift_44 = iBarShift("GBPUSD", PERIOD_H1, l_str2time_80);
         if (iHigh("GBPUSD", PERIOD_H1, l_shift_44) > 1.607 && iLow("GBPUSD", PERIOD_H1, l_shift_44) < 1.607) {
            l_str2time_72 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_72 == 0) {
      }
      for (l_count_40 = 8; l_count_40 < 20; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.11.05 " + ls_28 + ":00");
         l_shift_44 = iBarShift("GBPUSD", PERIOD_H1, l_str2time_80);
         if (iHigh("GBPUSD", PERIOD_H1, l_shift_44) > 1.61 && iLow("GBPUSD", PERIOD_H1, l_shift_44) < 1.61) {
            l_str2time_76 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_76 == 0) {
      }
      if (TimeHour(l_str2time_68) - TimeHour(l_str2time_64) == -2) {
         li_52 = 0;
         li_8 = TRUE;
      } else {
         if (TimeHour(l_str2time_68) - TimeHour(l_str2time_64) == -1) {
            if (TimeHour(l_str2time_72) - TimeHour(l_str2time_68) == 5) {
               li_52 = 1;
               li_8 = TRUE;
            } else {
               if (TimeHour(l_str2time_72) - TimeHour(l_str2time_68) == 6) {
                  if (TimeHour(l_str2time_76) - TimeHour(l_str2time_72) == 2) {
                     li_52 = 2;
                     li_8 = TRUE;
                  } else {
                     if (TimeHour(l_str2time_76) - TimeHour(l_str2time_72) == 1) {
                        li_52 = 3;
                        li_8 = TRUE;
                     }
                  }
               }
            }
         }
      }
   }
   if (UseAutoTimeSettings) {
      ls_84 = "";
      if (li_4) {
         TimeZone = l_str2int_56;
         SWChangeMode = l_str2int_60;
         if (TimeZone >= 0) ls_84 = "+";
         Comments(9, "SetGMTTime()", "Óñòàíîâëåíû çàãðóæåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (CM" + SWChangeMode + ")");
      } else {
         if (li_8) {
            TimeZone = li_48;
            SWChangeMode = li_52;
            if (TimeZone >= 0) ls_84 = "+";
            Comments(9, "SetGMTTime()", "Óñòàíîâëåíû ðàñ÷åòíûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (CM" + SWChangeMode + ")");
         } else {
            if (TimeZone >= 0) ls_84 = "+";
            Comments(9, "SetGMTTime()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (CM" + SWChangeMode + ")");
         }
      }
   } else {
      if (TimeZone >= 0) ls_84 = "+";
      Comments(9, "SetGMTTime()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (CM" + SWChangeMode + ")");
   }
   return (li_ret_0);
}

int LoadSettings() {
   int l_file_12;
   string ls_16;
   string l_name_24;
   bool li_ret_0 = FALSE;
   if (!gi_144) return (10);
   int li_4 = 21;
   while (li_4 > 0) {
      li_4--;
      if (li_4 == 0) ls_16 = "";
      else {
         if (li_4 > 9) ls_16 = li_4;
         else ls_16 = "0" + li_4;
      }
      l_name_24 = "settings" + ls_16 + ".csv";
      l_file_12 = FileOpen(l_name_24, FILE_CSV|FILE_READ, ';');
      if (l_file_12 >= 0) break;
   }
   if (l_file_12 < 1) {
      gi_144 = FALSE;
      return (10);
   }
   Comments(9, "LoadSettings()", "Çàãðóæåí ôàéë íàñòðîåê ðåæèìîâ (" + l_name_24 + ")");
   int li_8 = -1;
   while (!FileIsLineEnding(l_file_12)) {
      li_8++;
      gsa_1632[0][li_8] = FileReadString(l_file_12);
   }
   li_ret_0 = li_8;
   li_4 = 1;
   li_8 = -1;
   while (!FileIsEnding(l_file_12)) {
      li_8++;
      gsa_1632[li_4][li_8] = FileReadString(l_file_12);
      if (li_8 == li_ret_0) {
         li_8 = -1;
         li_4++;
      }
   }
   FileClose(l_file_12);
   return (li_ret_0);
}

int SetSettings(int ai_0) {
   bool li_ret_4 = FALSE;
   int li_8 = -1;
   if (ai_0 == 0) return (0);
   if (ai_0 > gi_1236) {
      Comments(9, "SetMode()", "Îøèáêà óñòàíîâêè íàñòðîåê: íåñóùåñòâóþèé ðåæèì");
      return (0);
   }
   li_8++;
   gs_1600 = gsa_1632[li_8][ai_0];
   li_8++;
   g_str2int_148 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   li_8++;
   li_8++;
   g_str2int_168 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_172 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_176 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_192 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_196 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_200 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_204 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_208 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_212 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   gi_216 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_220 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_232 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_236 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   gi_240 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_244 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_248 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_252 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_256 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_268 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_272 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_276 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_280 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_284 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_288 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_300 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_308 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_312 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_324 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_332 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_336 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_344 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_348 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_352 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_364 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_368 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_372 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_376 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_380 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_384 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_388 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   gi_392 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   gi_396 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   gi_400 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_404 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_408 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_412 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_416 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_420 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_424 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_428 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_440 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_444 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_452 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_456 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_460 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_472 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_476 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_484 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_488 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_492 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_504 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_512 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_516 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_520 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_528 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_532 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_544 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_548 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_552 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_556 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_560 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_564 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_568 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_572 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_576 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_580 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_584 = StrToInteger(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_str2int_596 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_timeframe_600 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_period_604 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_applied_price_608 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_timeframe_612 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_period_616 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_applied_price_620 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_period_624 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_628 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   g_ma_method_636 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_applied_price_640 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gi_644 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_648 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2dbl_652 = StrToDouble(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2dbl_660 = StrToDouble(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2dbl_668 = StrToDouble(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2dbl_676 = StrToDouble(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_684 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_688 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   g_str2int_700 = StrToInteger(gsa_1632[li_8][ai_0]);
   li_8++;
   gd_708 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   gd_716 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   li_8++;
   gd_724 = StrToDouble(gsa_1632[li_8][ai_0]) * gi_1056;
   Comments(9, "SetMode()", "Óñòàíîâëåíû íàñòðîéêè: " + gs_1600);
   return (li_ret_4);
}

int MakeTimeString() {
   bool li_24;
   bool li_ret_4 = FALSE;
   if (!gi_928 || !ShowTimes) return (li_ret_4);
   gs_1568 = "Òîðãîâîå âðåìÿ CET (MSK-2):" 
      + "\n" 
      + "00 " + "01 " + "02 " + "03 " + "04 " + "05 " + "06 " + "07 " + "08 " + "09 " + "10 " + "11 " + "12 " + "13 " + "14 " + "15 " + "16 " + "17 " + "18 " + "19 " + "20 " + "21 " + "22 " + "23 " + "24 " 
   + "\n";
   int li_28 = TimeCurrent() - 86400 * DayOfWeek() - 3600 * Hour() - 60 * Minute() - Seconds() + 86400 + 1800;
   for (int li_8 = 1; li_8 < 6; li_8++) {
      gs_1568 = gs_1568 + " |";
      for (int l_count_20 = 0; l_count_20 < 24; l_count_20++) {
         for (int li_0 = 0; li_0 < 10; li_0 += 2) {
            li_24 = FALSE;
            if (isTimetoTrade(li_28)) {
               li_24 = TRUE;
               break;
            }
         }
         if (li_24) {
            if (isNoNews(li_28, 0)) gs_1568 = gs_1568 + ":::|";
            else gs_1568 = gs_1568 + "···|";
         } else gs_1568 = gs_1568 + "   |";
         li_28 += 3600;
      }
      gs_1568 = gs_1568 
      + "\n";
   }
   return (li_ret_4);
}

int MakeInitString() {
   if (!gi_928) return (0);
   gs_1560 = "";
   string ls_0 = " GMT";
   if (TimeZone >= 0) ls_0 = ls_0 + "+" + TimeZone;
   else ls_0 = ls_0 + "" + TimeZone;
   if (gi_1240 > 0) ls_0 = ls_0 + " Correction+" + gi_1240;
   if (gi_1240 < 0) ls_0 = ls_0 + " Correction" + gi_1240;
   if (gi_1240 == 0) ls_0 = ls_0 + " Correction " + gi_1240;
   gs_1560 = gs_1560 + AccountCompany() + " (" + AccountNumber() + "): " + AccountName() + " (magic " + g_magic_1116 + ")" + ls_0 
   + "\n";
   if (gi_832 && !gi_828) {
      gs_1560 = gs_1560 + "Ðåæèì ïåðåäà÷è äàííûõ" 
      + "\n";
   }
   if (!gi_832 && gi_828) {
      gs_1560 = gs_1560 + "Ðåæèì ïðèåìà äàííûõ" 
      + "\n";
   }
   return (0);
}

int Comments(int ai_0, string as_4, string as_12) {
   bool li_ret_20 = FALSE;
   string ls_32 = "";
   if (ai_0 == 9) {
      if (gi_940) as_12 = as_4 + ": " + as_12;
      if (gi_960) {
         ls_32 = ls_32 + TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ";
         if (gi_964) ls_32 = ls_32 + "euronis";
         if (gi_968) ls_32 = ls_32 + "(" + g_magic_1116 + ")";
         if (gi_964 || gi_968) ls_32 = ls_32 + ": ";
         Print(ls_32 + as_12);
      }
      ls_32 = "";
      if (gi_928) {
         ls_32 = ls_32 + gs_1560;
         if (ShowTimes) ls_32 = ls_32 + gs_1568;
         if (ShowInformation) {
            g_count_1212++;
            if (g_count_1212 > InformationStringNumber) {
               g_count_1212 = InformationStringNumber;
               if (InformationStringNumber > 1) for (int l_index_24 = 0; l_index_24 < InformationStringNumber - 1; l_index_24++) gsa_1628[l_index_24] = gsa_1628[l_index_24 + 1];
            }
            gsa_1628[g_count_1212 - 1] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
            for (l_index_24 = 0; l_index_24 < InformationStringNumber; l_index_24++) {
               ls_32 = ls_32 + gsa_1628[l_index_24];
               if (l_index_24 < InformationStringNumber - 1) {
                  ls_32 = ls_32 
                  + "\n";
               }
            }
         }
         gs_1592 = ls_32;
         if (gi_944) {
            ls_32 = ls_32 
               + "\n" 
               + gsa_1624[0] 
               + "\n" 
               + gsa_1624[1] 
               + "\n" 
               + gsa_1624[2] 
               + "\n" 
               + gsa_1624[3] 
               + "\n" 
               + gsa_1624[4] 
               + "\n" 
               + gsa_1624[5] 
               + "\n" 
            + gsa_1624[6];
         }
         Comment(ls_32);
      }
      if (SaveInformation) {
         for (l_index_24 = 0; l_index_24 < 20; l_index_24++) {
            if (gsa_1640[l_index_24] == "") {
               gsa_1640[l_index_24] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
               break;
            }
         }
      }
   }
   if (ai_0 == 0 || ai_0 == 1 || ai_0 == 2 || ai_0 == 3 || ai_0 == 4 || ai_0 == 5 || ai_0 == 6) {
      gsa_1624[ai_0] = as_12;
      if (gi_928) {
         ls_32 = gs_1592;
         if (gi_944) {
            ls_32 = ls_32 
               + "\n" 
               + gsa_1624[0] 
               + "\n" 
               + gsa_1624[1] 
               + "\n" 
               + gsa_1624[2] 
               + "\n" 
               + gsa_1624[3] 
               + "\n" 
               + gsa_1624[4] 
               + "\n" 
               + gsa_1624[5] 
               + "\n" 
            + gsa_1624[6];
         }
         Comment(ls_32);
      }
   }
   return (li_ret_20);
}

string PrintError(int ai_0) {
   if (ai_0 > 4299 || ai_0 < 0) ai_0 = 4299;
   string ls_ret_4 = ai_0 + " " + gsa_1636[ai_0];
   return (ls_ret_4);
}

void InitErrorArray() {
   gsa_1636[0] = "Íåò îøèáêè";
   gsa_1636[1] = "Íåò îøèáêè, íî ðåçóëüòàò íåèçâåñòåí";
   gsa_1636[2] = "Îáùàÿ îøèáêà";
   gsa_1636[3] = "Íåïðàâèëüíûå ïàðàìåòðû";
   gsa_1636[4] = "Òîðãîâûé ñåðâåð çàíÿò";
   gsa_1636[5] = "Ñòàðàÿ âåðñèÿ êëèåíòñêîãî òåðìèíàëà";
   gsa_1636[6] = "Íåò ñâÿçè ñ òîðãîâûì ñåðâåðîì";
   gsa_1636[7] = "Íåäîñòàòî÷íî ïðàâ";
   gsa_1636[8] = "Ñëèøêîì ÷àñòûå çàïðîñû";
   gsa_1636[9] = "Íåäîïóñòèìàÿ îïåðàöèÿ íàðóøàþùàÿ ôóíêöèîíèðîâàíèå ñåðâåðà";
   gsa_1636[64] = "Ñ÷åò çàáëîêèðîâàí";
   gsa_1636[65] = "Íåïðàâèëüíûé íîìåð ñ÷åòà";
   gsa_1636[128] = "Èñòåê ñðîê îæèäàíèÿ ñîâåðøåíèÿ ñäåëêè";
   gsa_1636[129] = "Íåïðàâèëüíàÿ öåíà";
   gsa_1636[130] = "Íåïðàâèëüíûå ñòîïû";
   gsa_1636[131] = "Íåïðàâèëüíûé îáúåì";
   gsa_1636[132] = "Ðûíîê çàêðûò";
   gsa_1636[133] = "Òîðãîâëÿ çàïðåùåíà";
   gsa_1636[134] = "Íåäîñòàòî÷íî äåíåã äëÿ ñîâåðøåíèÿ îïåðàöèè";
   gsa_1636[135] = "Öåíà èçìåíèëàñü";
   gsa_1636[136] = "Íåò öåí";
   gsa_1636[137] = "Áðîêåð çàíÿò";
   gsa_1636[138] = "Íîâûå öåíû";
   gsa_1636[139] = "Îðäåð çàáëîêèðîâàí è óæå îáðàáàòûâàåòñÿ";
   gsa_1636[140] = "Ðàçðåøåíà òîëüêî ïîêóïêà";
   gsa_1636[141] = "Ñëèøêîì ìíîãî çàïðîñîâ";
   gsa_1636[145] = "Ìîäèôèêàöèÿ çàïðåùåíà, òàê êàê îðäåð ñëèøêîì áëèçîê ê ðûíêó";
   gsa_1636[146] = "Ïîäñèñòåìà òîðãîâëè çàíÿòà";
   gsa_1636[147] = "Èñïîëüçîâàíèå äàòû èñòå÷åíèÿ îðäåðà çàïðåùåíî áðîêåðîì";
   gsa_1636[148] = "Êîëè÷åñòâî îòêðûòûõ è îòëîæåííûõ îðäåðîâ äîñòèãëî ïðåäåëà, óñòàíîâëåííîãî áðîêåðîì";
   gsa_1636[4000] = "Íåò îøèáêè";
   gsa_1636[4001] = "Íåïðàâèëüíûé óêàçàòåëü ôóíêöèè";
   gsa_1636[4002] = "Èíäåêñ ìàññèâà - âíå äèàïàçîíà";
   gsa_1636[4003] = "Íåò ïàìÿòè äëÿ ñòåêà ôóíêöèé";
   gsa_1636[4004] = "Ïåðåïîëíåíèå ñòåêà ïîñëå ðåêóðñèâíîãî âûçîâà";
   gsa_1636[4005] = "Íà ñòåêå íåò ïàìÿòè äëÿ ïåðåäà÷è ïàðàìåòðîâ";
   gsa_1636[4006] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ïàðàìåòðà";
   gsa_1636[4007] = "Íåò ïàìÿòè äëÿ âðåìåííîé ñòðîêè";
   gsa_1636[4008] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà";
   gsa_1636[4009] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà â ìàññèâå";
   gsa_1636[4010] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ìàññèâà";
   gsa_1636[4011] = "Ñëèøêîì äëèííàÿ ñòðîêà";
   gsa_1636[4012] = "Îñòàòîê îò äåëåíèÿ íà íîëü";
   gsa_1636[4013] = "Äåëåíèå íà íîëü";
   gsa_1636[4014] = "Íåèçâåñòíàÿ êîìàíäà";
   gsa_1636[4015] = "Íåïðàâèëüíûé ïåðåõîä";
   gsa_1636[4016] = "Íåèíèöèàëèçèðîâàííûé ìàññèâ";
   gsa_1636[4017] = "Âûçîâû DLL íå ðàçðåøåíû";
   gsa_1636[4018] = "Íåâîçìîæíî çàãðóçèòü áèáëèîòåêó";
   gsa_1636[4019] = "Íåâîçìîæíî âûçâàòü ôóíêöèþ";
   gsa_1636[4020] = "Âûçîâû âíåøíèõ áèáëèîòå÷íûõ ôóíêöèé íå ðàçðåøåíû";
   gsa_1636[4021] = "Íåäîñòàòî÷íî ïàìÿòè äëÿ ñòðîêè, âîçâðàùàåìîé èç ôóíêöèè";
   gsa_1636[4022] = "Ñèñòåìà çàíÿòà";
   gsa_1636[4050] = "Íåïðàâèëüíîå êîëè÷åñòâî ïàðàìåòðîâ ôóíêöèè";
   gsa_1636[4051] = "Íåäîïóñòèìîå çíà÷åíèå ïàðàìåòðà ôóíêöèè";
   gsa_1636[4052] = "Âíóòðåííÿÿ îøèáêà ñòðîêîâîé ôóíêöèè";
   gsa_1636[4053] = "Îøèáêà ìàññèâà";
   gsa_1636[4054] = "Íåïðàâèëüíîå èñïîëüçîâàíèå ìàññèâà-òàéìñåðèè";
   gsa_1636[4055] = "Îøèáêà ïîëüçîâàòåëüñêîãî èíäèêàòîðà";
   gsa_1636[4056] = "Ìàññèâû íåñîâìåñòèìû";
   gsa_1636[4057] = "Îøèáêà îáðàáîòêè ãëîáàëüíûåõ ïåðåìåííûõ";
   gsa_1636[4058] = "Ãëîáàëüíàÿ ïåðåìåííàÿ íå îáíàðóæåíà";
   gsa_1636[4059] = "Ôóíêöèÿ íå ðàçðåøåíà â òåñòîâîì ðåæèìå";
   gsa_1636[4060] = "Ôóíêöèÿ íå ðàçðåøåíà";
   gsa_1636[4061] = "Îøèáêà îòïðàâêè ïî÷òû";
   gsa_1636[4062] = "Îæèäàåòñÿ ïàðàìåòð òèïà string";
   gsa_1636[4063] = "Îæèäàåòñÿ ïàðàìåòð òèïà integer";
   gsa_1636[4064] = "Îæèäàåòñÿ ïàðàìåòð òèïà double";
   gsa_1636[4065] = "Â êà÷åñòâå ïàðàìåòðà îæèäàåòñÿ ìàññèâ";
   gsa_1636[4066] = "Çàïðîøåííûå èñòîðè÷åñêèå äàííûå â ñîñòîÿíèè îáíîâëåíèÿ";
   gsa_1636[4067] = "Îøèáêà ïðè âûïîëíåíèè òîðãîâîé îïåðàöèè";
   gsa_1636[4099] = "Êîíåö ôàéëà";
   gsa_1636[4100] = "Îøèáêà ïðè ðàáîòå ñ ôàéëîì";
   gsa_1636[4101] = "Íåïðàâèëüíîå èìÿ ôàéëà";
   gsa_1636[4102] = "Ñëèøêîì ìíîãî îòêðûòûõ ôàéëîâ";
   gsa_1636[4103] = "Íåâîçìîæíî îòêðûòü ôàéë";
   gsa_1636[4104] = "Íåñîâìåñòèìûé ðåæèì äîñòóïà ê ôàéëó";
   gsa_1636[4105] = "Íè îäèí îðäåð íå âûáðàí";
   gsa_1636[4106] = "Íåèçâåñòíûé ñèìâîë";
   gsa_1636[4107] = "Íåïðàâèëüíûé ïàðàìåòð öåíû äëÿ òîðãîâîé ôóíêöèè";
   gsa_1636[4108] = "Íåâåðíûé íîìåð òèêåòà";
   gsa_1636[4109] = "Òîðãîâëÿ íå ðàçðåøåíà. Íåîáõîäèìî âêëþ÷èòü îïöèþ Ðàçðåøèòü ñîâåòíèêó òîðãîâàòü â ñâîéñòâàõ ýêñïåðòà";
   gsa_1636[4110] = "Äëèííûå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1636[4111] = "Êîðîòêèå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1636[4200] = "Îáúåêò óæå ñóùåñòâóåò";
   gsa_1636[4201] = "Çàïðîøåíî íåèçâåñòíîå ñâîéñòâî îáúåêòà";
   gsa_1636[4202] = "Îáúåêò íå ñóùåñòâóåò";
   gsa_1636[4203] = "Íåèçâåñòíûé òèï îáúåêòà";
   gsa_1636[4204] = "Íåò èìåíè îáúåêòà";
   gsa_1636[4205] = "Îøèáêà êîîðäèíàò îáúåêòà";
   gsa_1636[4206] = "Íå íàéäåíî óêàçàííîå ïîäîêíî";
   gsa_1636[4207] = "Îøèáêà ïðè ðàáîòå ñ îáúåêòîì";
   gsa_1636[4299] = "Êîä îøèáêè âíå äèàïàçîíà";
}

int FillTimeBuffer() {
   int lia_0[500][10] = {0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0};
   ArrayCopy(gia_1252, lia_0, 0, 0, WHOLE_ARRAY);
   return (0);
}

bool SaveFileOrder(int ai_unused_0, int ai_4, int ai_8, double ad_12, double ad_20, double ad_28, double ad_36) {
   bool li_ret_48 = FALSE;
   string l_name_52 = gs_1608 + ".csv";
   int l_file_44 = FileOpen(l_name_52, FILE_CSV|FILE_WRITE, ';');
   if (l_file_44 < 1) {
      Comments(9, "SaveFileOrder()", "Ôàéë " + l_name_52 + " íå ñîçäàí, îøèáêà :" + PrintError(GetLastError()));
      return (li_ret_48);
   }
   FileWrite(l_file_44, ai_4, ad_12, ai_8, ad_20, DoubleToStr(ad_28, Digits), DoubleToStr(ad_36, Digits));
   FileClose(l_file_44);
   li_ret_48 = TRUE;
   if (ai_4 == 0) Comments(9, "SaveFileOrder()", "BUY     " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   if (ai_4 == 1) Comments(9, "SaveFileOrder()", "SELL    " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   if (ai_4 == 98) Comments(9, "SaveFileOrder()", "CLOSE   " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   if (ai_4 == 99) Comments(9, "SaveFileOrder()", "NONE    " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   g_count_1124++;
   if (g_count_1124 > gi_1144) g_count_1124 = 0;
   int l_datetime_60 = TimeLocal();
   if (gi_836) {
      li_ret_48 = FALSE;
      while (TimeLocal() - l_datetime_60 < gi_840) {
         if (!isFile()) {
            li_ret_48 = TRUE;
            break;
         }
         Sleep(25);
      }
      if (!li_ret_48) {
         if (gi_852) {
            if (FileErase(l_name_52)) Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è î÷èùåí");
            else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü");
         } else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà");
      }
   }
   l_datetime_60 = TimeLocal();
   if (gi_844) {
      li_ret_48 = FALSE;
      while (TimeLocal() - l_datetime_60 < gi_848) {
         if (ai_4 == 1 && isOrderSell()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 0 && isOrderBuy()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 98 && !isOrderSell() && !isOrderBuy()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 99) {
            li_ret_48 = TRUE;
            break;
         }
         Sleep(25);
      }
      if (!li_ret_48) {
         if (gi_852) {
            if (FileErase(l_name_52)) Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è î÷èùåí");
            else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü");
         } else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà");
      }
   }
   return (li_ret_48);
}

bool isFile() {
   bool li_ret_12 = FALSE;
   string l_name_4 = gs_1608 + ".csv";
   int l_file_0 = FileOpen(l_name_4, FILE_CSV|FILE_WRITE|FILE_READ);
   if (l_file_0 > 0 && FileSize(l_file_0) > 0) {
      FileClose(l_file_0);
      li_ret_12 = TRUE;
   }
   return (li_ret_12);
}

bool FileErase(string a_name_0) {
   bool li_ret_12 = FALSE;
   int l_file_8 = FileOpen(a_name_0, FILE_CSV|FILE_WRITE);
   if (l_file_8 > 0) {
      FileClose(l_file_8);
      li_ret_12 = TRUE;
   }
   return (li_ret_12);
}

bool ReadFileOrder() {
   int l_file_0;
   string ls_8;
   string l_name_16;
   bool li_ret_24 = FALSE;
   if (gi_1412) {
      for (int l_count_4 = 0; l_count_4 < gi_1144 + 1; l_count_4++) {
         l_name_16 = gs_1608 + ((gi_924 + Period())) + "_" + l_count_4 + ".csv";
         l_file_0 = FileOpen(l_name_16, FILE_CSV|FILE_READ);
         if (!(l_file_0 < 0)) {
            g_count_1120 = l_count_4;
            gi_1412 = FALSE;
            FileClose(l_file_0);
            break;
         }
      }
   }
   if (gi_1412) return (li_ret_24);
   l_name_16 = gs_1608 + ((gi_924 + Period())) + "_" + g_count_1120 + ".csv";
   l_file_0 = FileOpen(l_name_16, FILE_CSV|FILE_READ);
   if (l_file_0 > 0) {
      ls_8 = FileReadString(l_file_0);
      gda_1372[0][0] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1372[0][1] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1372[0][2] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1372[0][3] = StrToDouble(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1372[0][4] = StrToDouble(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1372[0][5] = StrToDouble(ls_8);
      FileClose(l_file_0);
      FileDelete(l_name_16);
      g_count_1120++;
      if (g_count_1120 > gi_1144) g_count_1120 = 0;
      Comments(9, "ReadFileOrder()", "Ïîñëåäíèé çàãðóæåííûé ôàéë " + l_name_16);
      li_ret_24 = TRUE;
   }
   return (TRUE);
}

int CheckReceiveBuffer() {
   bool li_ret_0 = FALSE;
   if (gda_1372[0][1] != 99.0) {
      if (gda_1372[0][1] == 98.0) {
         if (gda_1376[0][3] != 0.0 && gda_1372[0][2] == gda_1376[0][2]) {
            gda_1376[0][1] = 98;
            gda_1376[0][5] = gda_1372[0][3];
            li_ret_0 = TRUE;
         }
      }
      if (gda_1372[0][1] == 0.0 || gda_1372[0][1] == 1.0 && gda_1376[0][1] == 99.0) {
         gda_1376[0][0] = gda_1372[0][0];
         gda_1376[0][1] = gda_1372[0][1];
         gda_1376[0][2] = gda_1372[0][2];
         gda_1376[0][4] = gda_1372[0][3];
         gda_1376[0][6] = gda_1372[0][4];
         gda_1376[0][7] = gda_1372[0][5];
         li_ret_0 = TRUE;
      }
   }
   ClearBuffer("ReceiveBuffer", 0);
   return (li_ret_0);
}

int CheckCommandBuffer() {
   bool li_ret_0 = FALSE;
   if (gda_1376[0][1] != 99.0) {
      if (gda_1376[0][0] + gi_1000 * (60 * Period()) <= Time[0]) {
         if (gda_1376[0][1] == 0.0 && gda_1376[0][4] >= Ask)
            if (SendBuyOrder(gda_1376[0][6], gda_1376[0][7])) li_ret_0 = TRUE;
         if (gda_1376[0][1] == 1.0 && gda_1376[0][4] <= Bid)
            if (SendSellOrder(gda_1376[0][6], gda_1376[0][7])) li_ret_0 = TRUE;
      }
      if (gda_1376[0][0] + gi_1000 * (60 * Period()) <= Time[0]) {
      }
   }
   return (li_ret_0);
}

int FillSettingsArray() {
   string lsa_0[130][11] = {"", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "", "32", "32", "32", "32", "32", "32", "32", "32", "32", "32", "", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "2", "1", "2", "2", "3", "2", "2", "2", "2", "2", "", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "5", "7", "6", "6", "4", "6", "7", "6", "5", "6", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", 
"0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "21", "21", "21", "21", "21", "15", "19", "21", "21", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "", "3", "3", "3", "3", "3", "4", "4", "3", "3", "3", "", "140", "140", "140", "140", "140", "140",
 "140", "140", "140", "140", "", "2", "2", "2", "2", "3", "3", "4", "2", "2", "2", "", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "", "0", "0", "1", "0", "1", "3", "1", "0", "0", "0", "", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "", "-1", "-1", "0", "-1", "-1", "1", "-1", "-1", "0", "-1", "", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "", "-4", "-4", "-2", "-2", "-3", "-1", "-2", "-4", "-2", "-2", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "", "6", "6", "6", "7", "6", "4", "8", "6", "7", "7", "", "0", "2", "2", "6", "2", "4", "2", "2", "2", "2", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "20", "19", "11", "15", "11", "13", "27", "20", "11", "15", "", "0", "2", "2", "6", "0", "3", "0", "2", "3", "2", "", "8", "2", "2", "2", "2", "3", "2", "2", "3", "2", "", "2", "2", "2", "2", "2", "3", "3", "2", "2", "2", "", "0", "3", "3", "3", "1", "3", "2", "0", "2", "3", "", "4", "4", "4", "4", "4", "6", "1", "4", "4", "4", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "30", "30", "30", "30", "30", "30", "30", "30", "30", "30", "", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "", "40", "40", "40", "40", "40", "40", "40", "40", "40", "40", "", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "", "36", "36", "36", "36", "36", "36", "36", "36", "36", "36", "", "64", "64", "64", "64", "64", "64", "64", "64", "64", "64", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12"};
   ArrayCopy(gsa_1632, lsa_0, 0, 0, WHOLE_ARRAY);
   return (0);
}
int CheckLicense() {

}

int CheckLastOptTime() {
   double l_global_var_12;
   bool li_ret_0 = FALSE;
   double l_global_var_4 = GlobalVariableGet("LastTimeLocal");
   if (IsOptimization() || IsTesting()) {
      if (GlobalVariableCheck("LastOptTime")) {
         l_global_var_12 = GlobalVariableGet("LastOptTime");
         GlobalVariableSet("LastOptTime", l_global_var_4);
         if (l_global_var_12 > l_global_var_4) l_global_var_4 += 86400.0;
         if (l_global_var_4 - l_global_var_12 > gd_988) li_ret_0 = TRUE;
      } else {
         GlobalVariableSet("LastOptTime", l_global_var_4);
         li_ret_0 = TRUE;
      }
      if (!GlobalVariableCheck("OptCounter")) GlobalVariableSet("OptCounter", 0.0);
   }
   return (li_ret_0);
}

int CheckBlockByStopsDate() {
   bool li_ret_0 = FALSE;
   if (!IsTesting() && !IsOptimization() && !gi_1428) {
      if (GlobalVariableGet(g_var_name_1660) == 1.0 * gi_1200 && g_hour_1192 < 16) {
         gi_1428 = TRUE;
         Comments(9, "CheckBlockByStopsDate()", "Òîðãîâëÿ çàáëîêèðîâàíà äî ñëåäóùåé òîðãîâîé ñåññèè");
      }
   }
   return (li_ret_0);
}

int SaveCommentsFile(string as_0) {
   string l_name_16;
   int l_file_24;
   bool li_ret_8 = FALSE;
   int l_index_12 = 0;
   if (!SaveInformation) return (li_ret_8);
   if (gsa_1640[0] != "" || as_0 == "deinit") {
      l_name_16 = "Comments" + AccountNumber() + "_" + gi_1200 + g_month_1204 + g_year_1208 + ".log";
      l_file_24 = FileOpen(l_name_16, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_24 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + l_name_16 + ", îøèáêà: ", GetLastError());
         return (li_ret_8);
      }
      FileSeek(l_file_24, 0, SEEK_END);
      if (as_0 == "deinit") FileWrite(l_file_24, TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ----------------------------deinit------------------------------");
      else {
         for (l_index_12 = 0; l_index_12 < 20; l_index_12++) {
            if (gsa_1640[l_index_12] == "") break;
            FileWrite(l_file_24, gsa_1640[l_index_12]);
            gsa_1640[l_index_12] = "";
         }
      }
      FileClose(l_file_24);
      li_ret_8 = TRUE;
   }
   return (li_ret_8);
}

int CheckPointDifference() {
   if (Point == 0.00001 || Point == 0.001) gi_1056 = 10;
   else gi_1056 = 1;
   StopLoss *= gi_1056;
   TakeProfit *= gi_1056;
   gi_272 *= gi_1056;
   gi_280 *= gi_1056;
   gd_300 *= gi_1056;
   gd_324 *= gi_1056;
   gd_336 *= gi_1056;
   gi_388 *= gi_1056;
   gi_392 *= gi_1056;
   gi_396 *= gi_1056;
   gi_400 *= gi_1056;
   gd_444 *= gi_1056;
   gd_476 *= gi_1056;
   gd_504 *= gi_1056;
   gd_520 *= gi_1056;
   gd_628 *= gi_1056;
   gi_236 *= gi_1056;
   gi_240 *= gi_1056;
   gd_708 *= gi_1056;
   gd_716 *= gi_1056;
   gd_724 *= gi_1056;
   gi_212 *= gi_1056;
   gi_216 *= gi_1056;
   gi_552 *= gi_1056;
   gi_560 *= gi_1056;
   gi_568 *= gi_1056;
   gi_576 *= gi_1056;
   gi_584 *= gi_1056;
   g_slippage_224 *= gi_1056;
   g_slippage_228 *= gi_1056;
   return (0);
}