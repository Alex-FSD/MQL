/*
   Generated by EX4-TO-MQ4 decompiler V4.0.220.2c []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2008-2009, Sotnikov Denis (fxexpert@freemail.ru)"
#property link      "fxexpert@freemail.ru"

#include <WinUser32.mqh>

extern string OrderOptions = "--------   Orders options  --------";
extern double Lots = 0.0;
extern int LotsPercent = 15;
int gi_96 = 35;
double gd_100 = 0.0;
extern int BalanceControlMode = 1;
extern bool ResetMaxBalance = FALSE;
double gd_116 = 0.0;
extern string TradeOptions = "--------   Trade  options  --------";
extern int SettingsNumber = 2;
extern bool CheckDrawDown = FALSE;
int gi_140 = 0;
int gi_144 = 0;
bool gi_148 = FALSE;
int g_str2int_152 = 1;
int gi_156 = 0;
int gi_160 = 0;
extern bool InvisibleStopLoss = TRUE;
bool gi_168 = TRUE;
bool g_str2int_172 = TRUE;
int g_str2int_176 = 0;
int g_str2int_180 = 20;
string gs_unused_184 = "--------";
int gi_192 = 0;
bool g_str2int_196 = FALSE;
bool g_str2int_200 = FALSE;
int g_str2int_204 = 300;
bool g_str2int_208 = TRUE;
int g_str2int_212 = 5;
int gi_216 = 0;
int gi_220 = 0;
bool g_str2int_224 = FALSE;
int g_slippage_228 = 3;
int g_slippage_232 = 3;
bool g_str2int_236 = FALSE;
bool g_str2int_240 = FALSE;
int g_str2int_244 = 99;
bool gi_248 = FALSE;
int gi_252 = 0;
int gi_256 = 0;
bool g_str2int_260 = FALSE;
bool g_str2int_264 = TRUE;
string gs_unused_268 = "--------";
bool g_str2int_276 = FALSE;
int gi_280 = 0;
bool g_str2int_284 = FALSE;
int gi_288 = 0;
bool g_str2int_292 = FALSE;
bool g_str2int_296 = TRUE;
string gs_unused_300 = "--------";
double gd_308 = 0.0;
int g_str2int_316 = 0;
int g_str2int_320 = 0;
string gs_unused_324 = "--------";
double gd_332 = 0.0;
int g_str2int_340 = 0;
double gd_344 = 0.0;
int g_str2int_352 = 0;
int g_str2int_356 = 0;
int g_str2int_360 = 0;
string gs_unused_364 = "--------";
bool g_str2int_372 = TRUE;
int g_str2int_376 = 0;
int g_str2int_380 = 0;
int g_str2int_384 = 0;
int g_str2int_388 = 0;
int g_str2int_392 = 0;
int gi_396 = 0;
int gi_400 = 0;
int gi_404 = 0;
int gi_408 = 0;
int g_str2int_412 = 0;
bool g_str2int_416 = FALSE;
bool g_str2int_420 = FALSE;
bool g_str2int_424 = FALSE;
bool g_str2int_428 = FALSE;
bool g_str2int_432 = FALSE;
bool g_str2int_436 = FALSE;
string gs_unused_440 = "--------";
int g_str2int_448 = 0;
double gd_452 = 0.0;
int g_str2int_460 = 0;
int g_str2int_464 = 0;
int g_str2int_468 = 0;
string gs_unused_472 = "--------";
int g_str2int_480 = 0;
double gd_484 = 0.0;
int g_str2int_492 = 0;
int g_str2int_496 = 0;
int g_str2int_500 = 0;
string gs_unused_504 = "--------";
double gd_512 = 0.0;
int g_str2int_520 = 0;
int g_str2int_524 = 0;
double gd_528 = 0.0;
int g_str2int_536 = 0;
int g_str2int_540 = 0;
string gs_unused_544 = "--------";
bool g_str2int_552 = FALSE;
int g_str2int_556 = 60;
int gi_560 = 0;
int g_str2int_564 = 100;
int gi_568 = 0;
int g_str2int_572 = 150;
int gi_576 = 0;
int g_str2int_580 = 200;
int gi_584 = 0;
int g_str2int_588 = 250;
int gi_592 = 0;
string gs_unused_596 = "--------";
bool g_str2int_604 = FALSE;
int g_timeframe_608 = 0;
int g_period_612 = 0;
int g_applied_price_616 = PRICE_CLOSE;
int g_timeframe_620 = 0;
int g_period_624 = 0;
int g_applied_price_628 = PRICE_CLOSE;
int g_period_632 = 0;
double gd_636 = 0.0;
int g_ma_method_644 = MODE_SMA;
int g_applied_price_648 = PRICE_CLOSE;
int gi_652 = 0;
int g_str2int_656 = 0;
double g_str2dbl_660 = 0.0;
double g_str2dbl_668 = 0.0;
double g_str2dbl_676 = 0.0;
double g_str2dbl_684 = 0.0;
int g_str2int_692 = 0;
int g_str2int_696 = 0;
string gs_unused_700 = "--------";
bool g_str2int_708 = FALSE;
bool gi_712 = FALSE;
double gd_716 = 0.0;
double gd_724 = 0.0;
double gd_732 = 0.0;
extern string TimeOptions = "--------   Time   options  --------";
extern bool UseAutoTimeSettings = TRUE;
extern int TimeZone = 0;
extern int SWChangeMode = 0;
bool gi_760 = FALSE;
int gi_764 = -1;
int gi_768 = 0;
int gi_772 = 0;
extern bool BlockWeekBegin = TRUE;
extern bool BlockWeekEnd = TRUE;
bool gi_784 = FALSE;
int gi_788 = 0;
int gi_792 = 0;
bool gi_796 = FALSE;
int gi_800 = 0;
int gi_804 = 12;
int gi_808 = 12;
int gi_812 = 24;
bool gi_816 = TRUE;
bool gi_820 = FALSE;
bool gi_824 = TRUE;
string gs_unused_828 = "--------Transmite options--------";
bool gi_836 = FALSE;
bool gi_840 = FALSE;
bool gi_844 = FALSE;
int gi_848 = 10;
bool gi_852 = TRUE;
int gi_856 = 10;
bool gi_860 = FALSE;
string gs_unused_864 = "--------   News   options  --------";
bool gi_872 = FALSE;
int gi_876 = 5;
int gi_880 = 30;
int gi_884 = 60;
bool gi_888 = TRUE;
bool gi_892 = TRUE;
bool gi_896 = TRUE;
bool gi_900 = TRUE;
bool gi_904 = TRUE;
bool gi_908 = TRUE;
bool gi_912 = TRUE;
bool gi_916 = TRUE;
bool gi_920 = TRUE;
extern string OtherOptions = "--------   Other  options  --------";
int gi_932 = 0;
bool gi_936 = TRUE;
extern bool ShowTimes = TRUE;
extern bool ShowInformation = TRUE;
bool gi_948 = FALSE;
bool gi_952 = FALSE;
bool gi_956 = FALSE;
extern int InformationStringNumber = 20;
bool gi_964 = TRUE;
bool gi_968 = TRUE;
bool gi_972 = FALSE;
bool gi_976 = FALSE;
extern bool UseMailReport = FALSE;
extern int MailReportHourGMT = 6;
bool gi_988 = FALSE;
bool gi_992 = TRUE;
bool gi_996 = FALSE;
double gd_1000 = 5.0;
bool gi_1008 = TRUE;
extern string Language = "rus";
int gi_1020 = 2;
bool gi_1024 = TRUE;
int gi_1028;
int gi_1032;
bool gi_1036;
bool gi_1040;
int gi_1044;
int gi_1048;
bool gi_1052;
int gi_unused_1056;
int g_bars_1060;
int gi_unused_1064;
int gi_unused_1068;
int g_hour_1072;
int g_bars_1076;
int gi_unused_1080;
int gi_1084;
int g_ticket_1088;
int g_ticket_1092;
int gi_unused_1096;
int gi_1100;
bool g_ticket_1104;
int g_bars_1108;
int g_magic_1112;
int g_count_1116;
int g_count_1120;
int gi_1124;
int g_count_1128;
int g_minute_1132;
int gi_1136;
int gi_1140;
int gi_1144;
int gi_1148;
int gi_1152;
int gi_1156;
int gi_1160;
int gi_unused_1164 = 99;
int gi_unused_1168 = 99;
int gi_1172 = 10;
int gi_1176;
int g_day_of_week_1180;
int gi_unused_1184;
int gi_unused_1188;
int gi_1192;
datetime g_time_1196;
int gi_1200;
int gi_1204;
int gi_1208;
int gi_1212;
int gi_1216;
int g_hour_1220;
int g_day_of_week_1224;
int gi_1228;
int g_month_1232;
int g_year_1236;
int g_count_1240;
int gi_1244;
int gi_1248;
int g_count_1252;
int gi_1256;
int gi_1260;
int gi_1264;
int gi_1268;
int g_bars_1272;
int gia_1276[5][10];
int gia_1280[500][10];
double gd_1284;
double gd_1292;
double gd_1300;
double gd_1308;
double gd_1316;
double gd_1324;
double gd_1332;
double gd_1340;
double gd_1348;
double gd_1356;
double gd_1364;
double gd_1372;
double g_price_1380;
double gd_unused_1388;
double g_ord_profit_1396;
double g_global_var_1404;
double g_price_1412;
double gd_unused_1420;
double gda_1428[1][6];
double gda_1432[1][8];
double gda_1436[30];
bool gi_1440;
bool gi_1444;
int gi_unused_1448;
int gi_unused_1452;
bool gi_1456;
bool gi_1460;
bool gi_1464;
bool gi_1468;
bool gi_1472;
bool gi_1476;
int gi_unused_1480;
bool gi_1484;
bool gi_1488;
int gi_unused_1492;
bool gi_1496;
bool gi_1500;
bool gi_1504;
bool gi_1508;
int gi_unused_1512;
bool gi_1516;
int gi_unused_1520;
bool gi_1524;
int gi_unused_1528;
int gi_unused_1532;
bool gi_1536;
bool gi_1540;
bool gi_1544;
bool gi_1548;
bool gi_1552;
bool gi_1556;
bool gi_1560;
int gi_unused_1564;
bool gi_1568;
bool gi_1572;
bool gi_1576;
bool gi_1580;
bool gi_1584;
int gi_1588;
int gi_1592;
int g_datetime_1596;
int gi_1600;
int gi_1604;
int gi_1608;
int gi_1612;
int gi_1616;
int gi_1620;
string gs_1624;
string gs_1632;
string gs_dummy_1640;
string gs_unused_1648;
string gs_1656;
string gs_1664;
string gs_1672;
string gs_1680;
string gsa_1688[7];
string gsa_1692[50];
string gsa_1696[130][21];
string gsa_1700[4300];
string gsa_1704[20];
string gs_1708;
string gs_1716;
string gs_1724;
string gs_1732;
string g_var_name_1740;
string g_var_name_1748;
string g_var_name_1756;
string g_var_name_1764;
string g_var_name_1772;
string gs_1780;
string gs_1788;

int init() {
   Comment("");
   gi_1028 = 0;
   gi_1032 = 0;
   gi_1036 = FALSE;
   gi_1040 = FALSE;
   gi_1048 = 0;
   gi_1052 = FALSE;
   gi_unused_1056 = 0;
   g_bars_1060 = 0;
   gi_unused_1064 = -1;
   gi_unused_1068 = -1;
   g_hour_1072 = 25;
   g_bars_1076 = 0;
   gi_1204 = 0;
   gi_1208 = 0;
   gi_1156 = -1;
   gi_1160 = -1;
   gi_1176 = g_str2int_244;
   g_ticket_1088 = -1;
   g_ticket_1092 = 0;
   g_ticket_1104 = FALSE;
   gi_unused_1096 = 0;
   gi_1100 = 0;
   gi_unused_1188 = -1;
   gi_unused_1164 = 99;
   gi_unused_1168 = 99;
   gi_1172 = 10;
   gi_1588 = 0;
   gi_1592 = 0;
   g_datetime_1596 = 0;
   gi_unused_1184 = 25;
   g_bars_1108 = 0;
   gi_1260 = 99;
   g_count_1240 = 0;
   gi_1244 = 999;
   g_day_of_week_1180 = -1;
   gi_1248 = 0;
   g_count_1252 = 0;
   gi_1192 = -1;
   g_time_1196 = -1;
   gi_1268 = 0;
   g_bars_1272 = 0;
   gi_1136 = 0;
   gi_1140 = 0;
   gi_1144 = 0;
   gi_1148 = 0;
   g_minute_1132 = 0;
   gd_1292 = 0.0;
   gd_1364 = 0.0;
   gd_1372 = 0.0;
   g_price_1380 = 0.0;
   gd_unused_1388 = 0.0;
   g_ord_profit_1396 = 0.0;
   g_global_var_1404 = 0.0;
   g_price_1412 = 0.0;
   gd_unused_1420 = 0.0;
   gd_1284 = 0.0;
   gi_1456 = FALSE;
   gi_1472 = FALSE;
   gi_1476 = FALSE;
   gi_unused_1480 = 0;
   gi_1460 = FALSE;
   gi_1468 = TRUE;
   gi_unused_1512 = 0;
   gi_1516 = TRUE;
   gi_unused_1520 = 1;
   gi_unused_1528 = 0;
   gi_unused_1532 = 0;
   gi_1440 = FALSE;
   gi_1444 = FALSE;
   gi_1464 = FALSE;
   gi_unused_1452 = 0;
   gi_unused_1448 = 0;
   gi_1484 = FALSE;
   gi_1488 = FALSE;
   gi_unused_1492 = 0;
   gi_1556 = FALSE;
   gi_1524 = TRUE;
   gi_1504 = FALSE;
   gi_1536 = FALSE;
   gi_unused_1564 = 0;
   gi_1568 = FALSE;
   gi_1572 = FALSE;
   gi_1576 = FALSE;
   gi_1580 = FALSE;
   gi_1584 = FALSE;
   gs_1624 = "";
   gs_1632 = "";
   gs_unused_1648 = "";
   gs_1656 = "";
   gs_1664 = "";
   g_var_name_1740 = "";
   g_var_name_1748 = "";
   gs_1780 = "";
   gs_1788 = "";
   gi_1256 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
   gi_1600 = Time[0];
   if (gi_1024) HideTestIndicators(TRUE);
   CheckPointDifference();
   if (IsOptimization() || IsTesting()) {
      gi_964 = FALSE;
      if (!IsVisualMode()) {
         gi_936 = FALSE;
         gi_968 = FALSE;
      }
      if (gi_796) {
         if (gi_800 > 23) gi_800 = 23;
         gi_804 = gi_800 + 1;
         gi_808 = 24;
         gi_812 = 24;
      }
      gd_1316 = GlobalVariableGet("TestGBPUSD");
      gd_1324 = GlobalVariableGet("TestUSDCHF");
      gd_1332 = GlobalVariableGet("TestNZDUSD");
      gd_1340 = GlobalVariableGet("TestEURNZD");
      gd_1356 = GlobalVariableGet("TestAUDUSD");
      gd_1348 = GlobalVariableGet("TestEURUSD");
   } else gi_796 = FALSE;
   CheckMarketInfo();
   SetGlobalVariableNames();
   gi_1568 = CheckLicense();
   if (gi_764 >= 0) {
      gi_760 = TRUE;
      if (gi_764 > 19) gi_764 = 19;
      if (gi_764 == 0) {
         gi_768 = 0;
         gi_772 = 0;
      }
      if (gi_764 == 1) {
         gi_768 = 1;
         gi_772 = 0;
      }
      if (gi_764 == 2) {
         gi_768 = 1;
         gi_772 = 1;
      }
      if (gi_764 == 3) {
         gi_768 = 2;
         gi_772 = 0;
      }
      if (gi_764 == 4) {
         gi_768 = 2;
         gi_772 = 1;
      }
      if (gi_764 == 5) {
         gi_768 = 3;
         gi_772 = 0;
      }
      if (gi_764 == 6) {
         gi_768 = 3;
         gi_772 = 1;
      }
      if (gi_764 == 7) {
         gi_768 = 3;
         gi_772 = 3;
      }
      if (gi_764 == 8) {
         gi_768 = 4;
         gi_772 = 0;
      }
      if (gi_764 == 9) {
         gi_768 = 4;
         gi_772 = 1;
      }
      if (gi_764 == 10) {
         gi_768 = 4;
         gi_772 = 3;
      }
      if (gi_764 == 11) {
         gi_768 = 10;
         gi_772 = 10;
      }
      if (gi_764 == 12) {
         gi_768 = 8;
         gi_772 = 10;
      }
      if (gi_764 == 13) {
         gi_768 = 7;
         gi_772 = 10;
      }
      if (gi_764 == 14) {
         gi_768 = 6;
         gi_772 = 10;
      }
      if (gi_764 == 15) {
         gi_768 = 5;
         gi_772 = 10;
      }
      if (gi_764 == 16) {
         gi_768 = 8;
         gi_772 = 8;
      }
      if (gi_764 == 17) {
         gi_768 = 7;
         gi_772 = 8;
      }
      if (gi_764 == 18) {
         gi_768 = 6;
         gi_772 = 8;
      }
      if (gi_764 == 19) {
         gi_768 = 5;
         gi_772 = 8;
      }
   }
   gi_1572 = CheckLastOptTime();
   ClearBuffer("ReceiveBuffer", 0);
   ClearBuffer("CommandBuffer", 0);
   ClearBuffer("VariablesBuffer", 0);
   ClearBuffer("InformationBuffer", 0);
   ClearBuffer("LogFileBuffer", 0);
   ClearBuffer("ErrorArray", 0);
   ClearBuffer("ReportBuffer", 0);
   InitErrorArray();
   FillTimeBuffer();
   FillSettingsArray();
   if (gi_1584) Comments(9, "CheckMarketInfo()", "Íåèçâåñòíàÿ âàëþòíàÿ ïàðà " + Symbol(), "Unknown symbol " + Symbol());
   if (gs_1780 != "" || gs_1788 != "") Comments(9, "CheckMarketInfo()", "Îáíàðóæåíû äîáàâî÷íûå ñèìâîëû ê íàçâàíèþ âàëþòíîé ïàðû " + Symbol(), "Found additive to the Symbol name " + Symbol());
   SetTimeSettings(gi_768);
   gi_1264 = LoadSettings();
   SetSettings(SettingsNumber);
   SetGMTTime();
   StartRulls();
   if (!g_str2int_372) {
      g_str2int_380 = g_str2int_376;
      g_str2int_388 = g_str2int_376;
      g_str2int_392 = g_str2int_376;
   }
   if (g_str2int_240) {
      if (LotsPercent > 30 && Lots == 0.0) {
         g_str2int_240 = FALSE;
         Comments(9, "Init()", "Íåâîçìîæíî óñòàíîâèòü ContinueAfterClose: LotsPercent>30", "Unable to set ContinueAfterClose: LotsPercent>30");
      }
   }
   if (Lots != 0.0) BalanceControlMode = 0;
   MakeInitString();
   MakeTimeString();
   if (gi_1568) Comments(9, "Init()", "Èíèöèàëèçàöèÿ çàâåðøåíà (Ëèöåíçèÿ-ÍÅÒ)", "Initialization completed (License-NO)");
   else Comments(9, "Init()", "Èíèöèàëèçàöèÿ çàâåðøåíà (Ëèöåíçèÿ-ÎÊ)", "Initialization completed (License-OK)");
   if (gi_840) SaveFileOrder(0, 99, 0, 0, 0, 0, 0);
   Comments(1, "", "CurrentOrderProfitPoint = " + DoubleToStr(gd_1364, 0), "");
   return (0);
}

int start() {
   int li_0;
   gi_1200 = GetTickCount();
   MainProgram();
   if (gi_988) {
      li_0 = GetTickCount() - gi_1200;
      if (gi_1244 > li_0) gi_1244 = li_0;
      if (gi_1248 < li_0) gi_1248 = li_0;
      g_count_1252++;
      gd_1284 += 1.0 * li_0;
      if (gi_936) Comments(2, "", "SysSpeed:  min=" + gi_1244 + "  average=" + DoubleToStr(gd_1284 / (1.0 * g_count_1252), 0) + "  max=" + gi_1248 + "   current=" + li_0, "");
      else Comment("SysSpeed:  min=" + gi_1244 + "  average=" + DoubleToStr(gd_1284 / (1.0 * g_count_1252), 0) + "  max=" + gi_1248 + "   current=" + li_0);
   }
   SaveCommentsFile(" ");
   return (0);
}

int MainProgram() {
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   if (!StartRulls()) return (0);
   if (gi_836) {
      if (ReadFileOrder()) CheckReceiveBuffer();
      CheckCommandBuffer();
      return (0);
   }
   if (isOrderSell() && !TimeCurrentBar(g_str2int_420)) {
      isRSItoOpen(99);
      li_4 = TRUE;
      if (isCloseSellOrder()) {
         if (isTimeFiltertoClose(1)) {
            if (CloseSellOrder()) {
               gi_1536 = FALSE;
               li_4 = FALSE;
               if (!g_str2int_240) return (li_ret_0);
            }
         }
      }
   }
   if (isOrderBuy() && !TimeCurrentBar(g_str2int_420)) {
      isRSItoOpen(99);
      li_4 = TRUE;
      if (isCloseBuyOrder()) {
         if (isTimeFiltertoClose(0)) {
            if (CloseBuyOrder()) {
               gi_1536 = FALSE;
               li_4 = FALSE;
               if (!g_str2int_240) return (li_ret_0);
            }
         }
      }
   }
   gi_1536 = FALSE;
   if (li_4 && g_str2int_296) return (li_ret_0);
   if (isOpenBuyOrder() || isErrorOpenOrder(0)) {
      if (isTimeFiltertoOpen(0)) SendBuyOrder(gi_156, gi_160);
      return (li_ret_0);
   }
   if (isOpenSellOrder() || isErrorOpenOrder(1)) {
      if (isTimeFiltertoOpen(1)) SendSellOrder(gi_156, gi_160);
      return (li_ret_0);
   }
   return (li_ret_0);
}

int isErrorOpenOrder(int ai_0) {
   double ld_8;
   bool li_ret_4 = FALSE;
   if (g_str2int_208) {
      if (gi_1440 && ai_0 == 1) {
         ld_8 = MathRound((g_price_1412 - Ask) / Point);
         if (Bars - g_bars_1076 > g_str2int_212) {
            gi_1440 = FALSE;
            g_count_1128 = 0;
            Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Sell, èñòåê ëèìèò áàðîâ îæèäàíèÿ", "Unable to reopen Sell order, bars are over");
         } else {
            if (ld_8 >= gi_288 - gi_216) {
               gi_1440 = FALSE;
               g_count_1128 = 0;
               Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Sell, ïðîôèò îòðàáîòàí (" + DoubleToStr(g_price_1412, Digits) + "/" + DoubleToStr(Bid, Digits) +
                  ")", "Unable to reopen Sell order, profit worked by (" + DoubleToStr(g_price_1412, Digits) + "/" + DoubleToStr(Bid, Digits) + ")");
            } else {
               if (Bid >= g_price_1412 + gi_216 * Point && !gi_1540) {
                  li_ret_4 = TRUE;
                  g_count_1128++;
                  Comments(9, "isErrorOpenOrder()", "Ïîâòîð îòêðûòèÿ îðäåðà Sell (" + DoubleToStr(Bid, Digits) + "), ïîïûòêà " + ((g_count_1128 + 1)), "Try to reopen Sell (" + DoubleToStr(Bid, Digits) +
                     "), trial " + ((g_count_1128 + 1)));
               }
            }
         }
      }
      if (gi_1444 && ai_0 == 0) {
         ld_8 = MathRound((Bid - g_price_1412) / Point);
         if (Bars - g_bars_1076 > g_str2int_212) {
            gi_1444 = FALSE;
            g_count_1128 = 0;
            Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Buy, èñòåê ëèìèò áàðîâ îæèäàíèÿ", "Unable to reopen Buy order, bars are over");
         } else {
            if (ld_8 >= gi_288 - gi_216) {
               gi_1444 = FALSE;
               g_count_1128 = 0;
               Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Buy, ïðîôèò îòðàáîòàí (" + DoubleToStr(g_price_1412, Digits) + "/" + DoubleToStr(Ask, Digits) +
                  ")", "Unable to reopen Buy order, profit worked by (" + DoubleToStr(g_price_1412, Digits) + "/" + DoubleToStr(Ask, Digits) + ")");
            } else {
               if (Ask <= g_price_1412 - gi_216 * Point && !gi_1540) {
                  li_ret_4 = TRUE;
                  g_count_1128++;
                  Comments(9, "isErrorOpenOrder()", "Ïîâòîð îòêðûòèÿ îðäåðà Buy (" + DoubleToStr(Ask, Digits) + "), ïîïûòêà " + ((g_count_1128 + 1)), "Try to reopen Buy (" + DoubleToStr(Ask, Digits) +
                     "), trial " + ((g_count_1128 + 1)));
               }
            }
         }
      }
   }
   return (li_ret_4);
}

bool isTimeFiltertoClose(int ai_0) {
   double l_price_8;
   bool li_ret_4 = TRUE;
   if (!IsOptimization() && !IsTesting() && !IsVisualMode() && g_str2int_200) {
      if (ai_0 == 1) {
         l_price_8 = Ask;
         Sleep(g_str2int_204);
         if (Ask > l_price_8) li_ret_4 = FALSE;
      }
      if (ai_0 == 0) {
         l_price_8 = Bid;
         Sleep(g_str2int_204);
         if (Bid < l_price_8) li_ret_4 = FALSE;
      }
   }
   if (!li_ret_4) Comments(9, "isTimeFiltertoClose()", "Îøèáêà çàêðûòèÿ îðäåðà: èçìåíèëàñü öåíà", "Error to close order, price change");
   return (li_ret_4);
}

bool isTimeFiltertoOpen(int ai_0) {
   double l_bid_8;
   bool li_ret_4 = TRUE;
   if (!IsOptimization() && !IsTesting() && !IsVisualMode() && g_str2int_196) {
      if (ai_0 == 1) {
         l_bid_8 = Bid;
         Sleep(g_str2int_204);
         if (Bid < l_bid_8) li_ret_4 = FALSE;
      }
      if (ai_0 == 0) {
         l_bid_8 = Bid;
         Sleep(g_str2int_204);
         if (Ask > l_bid_8) li_ret_4 = FALSE;
      }
   }
   if (!li_ret_4) Comments(9, "isTimeFiltertoOpen()", "Îøèáêà îòêðûòèÿ îðäåðà: èçìåíèëàñü öåíà", "Error to open order, price change");
   return (li_ret_4);
}

bool isCloseSellOrder() {
   bool li_ret_0 = FALSE;
   if ((g_str2int_276 && isChanneltoClose(1, g_str2int_388, g_str2int_432, gi_404) && isProfitValuetoClose(gi_280 - gi_1028 + gi_1048)) || (!g_str2int_276 && isChanneltoClose(1, g_str2int_388, g_str2int_432, gi_404)) ||
      (isChanneltoClose(1, g_str2int_392, g_str2int_436, gi_408) && g_str2int_392 != 0) || (g_str2int_284 && isProfitValuetoClose(TimeProfit())) || isErrorCloseOrder(1) ||
      isInvisibleStopLosstoClose(1)) li_ret_0 = TRUE;
   return (li_ret_0);
}

bool isCloseBuyOrder() {
   bool li_ret_0 = FALSE;
   if ((g_str2int_276 && isChanneltoClose(0, g_str2int_388, g_str2int_432, gi_404) && isProfitValuetoClose(gi_280 - gi_1028 + gi_1048)) || (!g_str2int_276 && isChanneltoClose(0, g_str2int_388, g_str2int_432, gi_404)) ||
      (isChanneltoClose(0, g_str2int_392, g_str2int_436, gi_408) && g_str2int_392 != 0) || (g_str2int_284 && isProfitValuetoClose(TimeProfit())) || isErrorCloseOrder(0) ||
      isInvisibleStopLosstoClose(0)) li_ret_0 = TRUE;
   return (li_ret_0);
}

int isBarsHeighttoOpen(int ai_0, int ai_4, double ad_8) {
   double l_high_20;
   double l_low_28;
   bool li_ret_16 = FALSE;
   if (ad_8 != 0.0) {
      l_high_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 0)];
      l_low_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 0)];
      if (ai_0 == 1 && Close[0] >= l_high_20 && (l_high_20 - l_low_28) / Point >= ad_8) li_ret_16 = TRUE;
      if (ai_0 == 0 && Close[0] <= l_low_28 && (l_high_20 - l_low_28) / Point >= ad_8) li_ret_16 = TRUE;
   }
   return (li_ret_16);
}

int isMADistancetoOpen(int ai_0, int a_ma_method_4, int a_period_8, int a_applied_price_12, double a_pips_16, int ai_24) {
   double ld_32;
   bool li_ret_28 = TRUE;
   if (a_period_8 != 0) {
      ld_32 = iMA(NULL, 0, a_period_8, 0, a_ma_method_4, a_applied_price_12, 0);
      if (ai_24 == 1) ld_32 = MathRound(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 1) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 0) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 0) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 1) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (MathAbs(Bid - ld_32) <= a_pips_16 * Point) li_ret_28 = FALSE;
   }
   return (li_ret_28);
}

int isOpenSellOrder() {
   bool li_ret_0 = FALSE;
   if (!TimeCurrentBar(g_str2int_416) && !TimeCurrentBar(g_str2int_424) && !gi_1540 && !gi_1484 && g_ticket_1092 == 0 && !gi_1440 && !gi_1496 && !gi_1548 && !gi_1544 &&
      !gi_1552 && !gi_1556 && !gi_1568) {
      if (!gi_1560) {
         if ((g_str2int_152 == 0 || g_str2int_152 == 1 && isMADistancetoOpen(1, g_str2int_460, g_str2int_448, g_str2int_464, gd_452, g_str2int_468) && isChanneltoOpen(1, g_str2int_380, g_str2int_428, gi_396)) ||
            (g_str2int_152 == 0 || g_str2int_152 == 2 && isMADistancetoOpen(1, g_str2int_536, g_str2int_524, g_str2int_540, gd_528, g_str2int_468) && isChanneltoOpen(1, g_str2int_384, g_str2int_428, gi_400)) ||
            (g_str2int_152 == 0 || g_str2int_152 == 3 && isBarsHeighttoOpen(1, g_str2int_520, gd_512)) || (g_str2int_152 == 4 && isRSItoOpen(1))) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

int isOpenBuyOrder() {
   bool li_ret_0 = FALSE;
   if (!TimeCurrentBar(g_str2int_416) && !TimeCurrentBar(g_str2int_424) && !gi_1540 && !gi_1484 && g_ticket_1092 == 0 && !gi_1444 && !gi_1496 && !gi_1548 && !gi_1544 &&
      !gi_1552 && !gi_1556 && !gi_1568) {
      if (!gi_1560) {
         if ((g_str2int_152 == 0 || g_str2int_152 == 1 && isMADistancetoOpen(0, g_str2int_460, g_str2int_448, g_str2int_464, gd_452, g_str2int_468) && isChanneltoOpen(0, g_str2int_380, g_str2int_428, gi_396)) ||
            (g_str2int_152 == 0 || g_str2int_152 == 2 && isMADistancetoOpen(0, g_str2int_536, g_str2int_524, g_str2int_540, gd_528, g_str2int_468) && isChanneltoOpen(0, g_str2int_384, g_str2int_428, gi_400)) ||
            (g_str2int_152 == 0 || g_str2int_152 == 3 && isBarsHeighttoOpen(0, g_str2int_520, gd_512)) || (g_str2int_152 == 4 && isRSItoOpen(0))) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

int isSpreadtoTrade() {
   bool li_ret_0 = FALSE;
   int li_4 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
   if (gi_1256 != li_4 && gi_956) {
      Comments(9, "isSpreadtoTrade()", "Èçìåíèëîñü çíà÷åíèå ñïðåäà ñ " + gi_1256 + " íà " + li_4, "Spread value change from " + gi_1256 + " to " + li_4);
      gi_1256 = li_4;
   }
   if ((!g_str2int_236 && li_4 <= gi_256) || (g_str2int_236 && li_4 <= gi_256)) li_ret_0 = TRUE;
   return (li_ret_0);
}

int MaxChannelLimit(double ad_0, int ai_8, int ai_12) {
   double ld_20;
   double ld_28;
   double ld_36;
   int li_ret_16 = 0;
   int li_48 = 0;
   int li_52 = 0;
   int li_56 = 0;
   if (ad_0 != 0.0) {
      ld_36 = MathAbs(ad_0);
      ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_8, ai_12)] / Point;
      ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_8, ai_12)] / Point;
      if (ad_0 > 0.0) {
         if (ld_20 - ld_28 - ld_36 > 0.0) {
            if (IsTesting() || IsOptimization() || !gi_952 || !gi_936) li_ret_16 = 1;
            for (int li_44 = 1; li_44 <= ai_8; li_44++) {
               if (li_ret_16 != 0) break;
               li_56 = li_44;
               if (High[li_44] > High[li_48]) li_48 = li_44;
               if (Low[li_44] < Low[li_52]) li_52 = li_44;
               if ((High[li_48] - Low[li_52]) / Point - ld_36 > 0.0) li_ret_16 = (ai_8 - li_56) * Period();
            }
         }
      }
      if (ad_0 < 0.0)
         if (ld_20 - ld_28 - ld_36 < 0.0) li_ret_16 = 1;
   }
   return (li_ret_16);
}

bool MaxVolumeLimit(double ad_0, int ai_8, int ai_12) {
   bool l_bool_16 = FALSE;
   bool li_20 = FALSE;
   if (ad_0 != 0.0) {
      if (ad_0 < 0.0) li_20 = TRUE;
      ad_0 = MathAbs(ad_0);
      if (g_bars_1108 != Bars) {
         gd_1292 = 0.0;
         for (int li_24 = ai_8 + ai_12; li_24 > ai_12; li_24--) gd_1292 += Volume[li_24];
         g_bars_1108 = Bars;
         gd_1292 /= ai_8;
      }
      if (ad_0 < gd_1292) l_bool_16 = TRUE;
   }
   if (li_20) l_bool_16 = !l_bool_16;
   return (l_bool_16);
}

bool TimeCurrentBar(int ai_0) {
   bool li_ret_4 = FALSE;
   if (ai_0 && Time[0] == gi_1600) li_ret_4 = TRUE;
   return (li_ret_4);
}

int isOrderSell() {
   double l_price_16;
   double l_pips_24;
   bool li_ret_0 = FALSE;
   int l_pos_4 = 0;
   int l_ord_total_12 = OrdersTotal();
   for (l_pos_4 = 0; l_pos_4 < l_ord_total_12; l_pos_4++) {
      OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_SELL) {
         if (!gi_840 && OrderMagicNumber() != g_magic_1112) continue;
         g_ord_profit_1396 = OrderProfit();
         gd_1364 = MathRound((OrderOpenPrice() - Ask) / Point);
         g_hour_1072 = TimeHour(OrderOpenTime() + 7200 - 3600 * (TimeZone + gi_1268));
         g_datetime_1596 = OrderOpenTime();
         g_ticket_1092 = OrderTicket();
         gi_1100 = TimeCurrent() - g_datetime_1596;
         if (g_str2int_172) {
            l_price_16 = 1.0 * gi_156;
            l_pips_24 = TrailingTP();
            if (InvisibleStopLoss) l_price_16 = 0.0;
            if ((l_price_16 != 0.0 && OrderStopLoss() == 0.0) || l_pips_24 != 0.0 && !gi_840) {
               if (l_price_16 != 0.0) {
                  if (l_price_16 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_16 = MarketInfo(Symbol(), MODE_STOPLEVEL);
                  l_price_16 = NormalizeDouble(OrderOpenPrice() + l_price_16 * Point, Digits);
               }
               if (l_pips_24 != 0.0) l_pips_24 = NormalizeDouble(OrderOpenPrice() - l_pips_24 * Point, Digits);
               if (IsTradeAllowed()) {
                  if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_16, l_pips_24, 0, Red)) {
                     Comments(9, "isOrderSell()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + PrintError(GetLastError()) + " : Bid=" + DoubleToStr(Bid, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) +
                        "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")", "Unable to set SL or TP: " + PrintError(GetLastError()) + " : Bid=" + DoubleToStr(Bid, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) + "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")");
                  }
               } else
                  if (!gi_996) Comments(9, "isOrderSell()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
            }
         }
         li_ret_0 = TRUE;
         break;
      }
   }
   gi_1472 = li_ret_0;
   return (li_ret_0);
}

int isOrderBuy() {
   double l_price_16;
   double l_pips_24;
   bool li_ret_0 = FALSE;
   int l_pos_4 = 0;
   int l_ord_total_12 = OrdersTotal();
   for (l_pos_4 = 0; l_pos_4 < l_ord_total_12; l_pos_4++) {
      OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_BUY) {
         if (!gi_840 && OrderMagicNumber() != g_magic_1112) continue;
         g_ord_profit_1396 = OrderProfit();
         gd_1364 = MathRound((Bid - OrderOpenPrice()) / Point);
         g_hour_1072 = TimeHour(OrderOpenTime() + 7200 - 3600 * (TimeZone + gi_1268));
         g_datetime_1596 = OrderOpenTime();
         g_ticket_1092 = OrderTicket();
         gi_1100 = TimeCurrent() - g_datetime_1596;
         if (g_str2int_172) {
            l_price_16 = 1.0 * gi_156;
            l_pips_24 = TrailingTP();
            if (InvisibleStopLoss) l_price_16 = 0.0;
            if ((l_price_16 != 0.0 && OrderStopLoss() == 0.0) || l_pips_24 != 0.0 && !gi_840) {
               if (l_price_16 != 0.0) {
                  if (l_price_16 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_16 = MarketInfo(Symbol(), MODE_STOPLEVEL);
                  l_price_16 = NormalizeDouble(OrderOpenPrice() - l_price_16 * Point, Digits);
               }
               if (l_pips_24 != 0.0) l_pips_24 = NormalizeDouble(OrderOpenPrice() + l_pips_24 * Point, Digits);
               if (IsTradeAllowed()) {
                  if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_16, l_pips_24, 0, Red)) {
                     Comments(9, "isOrderBuy()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + PrintError(GetLastError()) + " : Ask=" + DoubleToStr(Ask, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) +
                        "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")", "Unable to set SL or TP: " + PrintError(GetLastError()) + " : Ask=" + DoubleToStr(Ask, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) + "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")");
                  }
               } else
                  if (!gi_996) Comments(9, "isOrderBuy()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
            }
         }
         li_ret_0 = TRUE;
         break;
      }
   }
   gi_1476 = li_ret_0;
   return (li_ret_0);
}

bool CloseBuyOrder() {
   bool l_bool_16;
   int li_24;
   int l_ticket_28;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = TRUE;
   int l_pos_12 = 0;
   double l_bid_32 = Bid;
   int l_ord_total_20 = OrdersTotal();
   for (l_pos_12 = 0; l_pos_12 < l_ord_total_20; l_pos_12++) {
      l_bool_16 = OrderSelect(l_pos_12, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_BUY) {
         if (isFreezLevel() == 0) {
            if (Bid >= OrderTakeProfit() && OrderTakeProfit() > 0.0) continue;
            if (!gi_840) {
               if (OrderMagicNumber() == g_magic_1112) {
                  li_4 = TRUE;
                  li_24 = GetTickCount();
                  l_ticket_28 = OrderTicket();
                  if (IsTradeAllowed()) {
                     if (OrderClose(OrderTicket(), OrderLots(), Bid, g_slippage_232, Blue)) li_ret_0 = TRUE;
                  } else li_8 = FALSE;
               }
            } else {
               li_4 = TRUE;
               li_24 = GetTickCount();
               if (SaveFileOrder(Time[0], 98, OrderTicket(), OrderLots(), Bid, 0, 0)) li_ret_0 = TRUE;
            }
         }
      }
   }
   if (li_4) {
      gi_1208 = GetTickCount() - li_24;
      gi_1216 = GetTickCount() - gi_1200;
      if (li_ret_0) {
         gi_1040 = gi_1052;
         gi_1600 = Time[0];
         gi_unused_1168 = 0;
         if (!gi_1508) g_price_1380 = l_bid_32;
         gi_1508 = FALSE;
         gi_1124 = g_str2int_244 - gi_1176;
         gi_unused_1452 = 0;
         gi_unused_1448 = 0;
         gi_1476 = FALSE;
         if (!gi_1536) {
            g_ticket_1088 = l_ticket_28;
            g_ticket_1092 = 0;
         } else g_ticket_1104 = l_ticket_28;
         gi_1464 = FALSE;
      } else {
         if (!gi_1536) {
            if (li_8) {
               Comments(9, "CloseBuyOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Buy" + " (" + DoubleToStr(l_bid_32, Digits) + "): " + PrintError(GetLastError()), "Error to close Buy order" +
                  " (" + DoubleToStr(l_bid_32, Digits) + "): " + PrintError(GetLastError()));
            } else {
               if (!gi_996) {
                  Comments(9, "CloseBuyOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Buy" + " (" + DoubleToStr(l_bid_32, Digits) + "): òîðãîâûé ïîòîê çàíÿò", "Error to close Buy order" + " (" +
                     DoubleToStr(l_bid_32, Digits) + "): trade context busy");
               }
            }
            if (!gi_1508) g_price_1380 = l_bid_32;
            gi_1508 = TRUE;
            gi_unused_1452 = 1;
            gi_unused_1448 = 0;
            gd_unused_1420 = Bid;
         }
      }
   }
   return (li_ret_0);
}

bool CloseSellOrder() {
   bool l_bool_16;
   int li_24;
   int l_ticket_28;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = TRUE;
   int l_pos_12 = 0;
   double l_ask_32 = Ask;
   int l_ord_total_20 = OrdersTotal();
   for (l_pos_12 = 0; l_pos_12 < l_ord_total_20; l_pos_12++) {
      l_bool_16 = OrderSelect(l_pos_12, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_SELL) {
         if (isFreezLevel() == 0) {
            if (Ask > OrderTakeProfit()) {
               if (!gi_840) {
                  if (OrderMagicNumber() == g_magic_1112) {
                     li_4 = TRUE;
                     li_24 = GetTickCount();
                     l_ticket_28 = OrderTicket();
                     if (IsTradeAllowed()) {
                        if (OrderClose(OrderTicket(), OrderLots(), Ask, g_slippage_232, Red)) li_ret_0 = TRUE;
                     } else li_8 = FALSE;
                  }
               } else {
                  li_4 = TRUE;
                  li_24 = GetTickCount();
                  if (SaveFileOrder(Time[0], 98, OrderTicket(), OrderLots(), Ask, 0, 0)) li_ret_0 = TRUE;
               }
            }
         }
      }
   }
   if (li_4) {
      gi_1208 = GetTickCount() - li_24;
      gi_1216 = GetTickCount() - gi_1200;
      if (li_ret_0) {
         gi_1040 = gi_1052;
         gi_1600 = Time[0];
         gi_unused_1168 = 1;
         if (!gi_1508) g_price_1380 = l_ask_32;
         gi_1508 = FALSE;
         gi_1124 = g_str2int_244 - gi_1176;
         gi_unused_1452 = 0;
         gi_unused_1448 = 0;
         gi_1472 = FALSE;
         if (!gi_1536) {
            g_ticket_1088 = l_ticket_28;
            g_ticket_1092 = 0;
         } else g_ticket_1104 = l_ticket_28;
         gi_1464 = FALSE;
      } else {
         if (!gi_1536) {
            if (li_8) {
               Comments(9, "CloseSellOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Sell" + " (" + DoubleToStr(l_ask_32, Digits) + "): " + PrintError(GetLastError()), "Error to close Sell order" +
                  " (" + DoubleToStr(l_ask_32, Digits) + "): " + PrintError(GetLastError()));
            } else {
               if (!gi_996) {
                  Comments(9, "CloseSellOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Sell" + " (" + DoubleToStr(l_ask_32, Digits) + "): òîðãîâûé ïîòîê çàíÿò", "Error to close Sell order" + " (" +
                     DoubleToStr(l_ask_32, Digits) + "): trade context busy");
               }
            }
            if (!gi_1508) g_price_1380 = l_ask_32;
            gi_1508 = TRUE;
            gi_unused_1452 = 0;
            gi_unused_1448 = 1;
            gd_unused_1420 = Ask;
         }
      }
   }
   return (li_ret_0);
}

int isErrorCloseOrder(int ai_0) {
   bool li_ret_4 = FALSE;
   if (g_str2int_244 != 0) {
      if (!gi_1508) gi_1176 = g_str2int_244;
      else {
         if (gi_1176 > 0) {
            if (!gi_248 || (gi_248 && (ai_0 == 1 && Ask <= g_price_1380) || (ai_0 == 0 && Bid >= g_price_1380))) {
               gi_1176--;
               li_ret_4 = TRUE;
               Comments(9, "isErrorCloseOrder()", "Ïîâòîð çàêðûòèÿ îðäåðà (ïîïûòêà " + ((g_str2int_244 - gi_1176 + 1)) + " èç " + ((g_str2int_244 + 1)) + ")", "Try to close order again (trial " +
                  ((g_str2int_244 - gi_1176 + 1)) + " from " + ((g_str2int_244 + 1)) + ")");
            }
         } else {
            gi_1508 = FALSE;
            gi_1124 = g_str2int_244 - gi_1176;
            Comments(9, "isErrorCloseOrder()", "Îøèáêà ïîâòîðà çàêðûòèÿ îðäåðà (ïîïûòîê " + g_str2int_244 + ")", "Error to close order again (trials " + g_str2int_244 + ")");
         }
      }
   }
   return (li_ret_4);
}

bool isFreezLevel() {
   double l_price_4;
   double ld_12;
   bool li_ret_0 = FALSE;
   if (g_str2int_264) {
      if (OrderStopLoss() != 0.0 || OrderTakeProfit() != 0.0) {
         if (OrderType() == OP_BUY) l_price_4 = Bid;
         if (OrderType() == OP_SELL) l_price_4 = Ask;
         ld_12 = MarketInfo(Symbol(), MODE_FREEZELEVEL) * Point;
         if (OrderStopLoss() != 0.0 && ld_12 > MathAbs(l_price_4 - OrderStopLoss())) li_ret_0 = TRUE;
         if (OrderTakeProfit() != 0.0 && ld_12 > MathAbs(l_price_4 - OrderTakeProfit())) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

bool SendBuyOrder(int ai_0, int ai_4) {
   int l_error_64;
   int l_ticket_8 = 0;
   bool li_ret_16 = FALSE;
   bool li_20 = TRUE;
   double l_price_32 = Ask;
   double l_price_40 = ai_0 / 10.0;
   double l_price_48 = ai_4 / 10.0;
   string ls_56 = "";
   gi_1508 = FALSE;
   double l_lots_24 = LotsForTrade(LotsPercent);
   if (l_lots_24 < 0.0) {
      Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : Íåäîñòàòî÷íî äåíåã (" + DoubleToStr(l_price_32, Digits) + ")", "Error open Buy order : Not enough money (" +
         DoubleToStr(l_price_32, Digits) + ")");
      return (FALSE);
   }
   if (l_price_40 != 0.0 && !InvisibleStopLoss) {
      if (l_price_40 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_40 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_40 = NormalizeDouble(Ask - l_price_40 * Point, Digits);
   }
   if (l_price_48 != 0.0) {
      if (l_price_48 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_48 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_48 = NormalizeDouble(Ask + l_price_48 * Point, Digits);
   }
   if (g_str2int_172 && !gi_840) {
      l_price_40 = 0;
      l_price_48 = 0;
   }
   int li_12 = GetTickCount();
   if (!gi_840) {
      if (gi_216 == 0 || (gi_216 > 0 && gi_1444)) {
         if (IsTradeAllowed()) l_ticket_8 = OrderSend(Symbol(), OP_BUY, l_lots_24, Ask, g_slippage_228, l_price_40, l_price_48, "euronis", g_magic_1112, 0, Blue);
         else li_20 = FALSE;
      }
      if (l_ticket_8 > 0)
         if (OrderSelect(l_ticket_8, SELECT_BY_TICKET, MODE_TRADES)) li_ret_16 = TRUE;
   } else
      if (SaveFileOrder(Time[0], 0, l_ticket_8, l_lots_24, Ask, l_price_40, l_price_48)) li_ret_16 = TRUE;
   gi_1204 = GetTickCount() - li_12;
   gi_1212 = GetTickCount() - gi_1200;
   if (li_ret_16) {
      if (gi_1444) l_price_32 = g_price_1412;
      gi_1028 = MathRound((OrderOpenPrice() - l_price_32) / Point);
      gi_1032 = -1 * gi_1028;
      gi_1036 = gi_1052;
      if (g_str2int_224) {
         if (gi_1028 > gi_288) gi_1028 = gi_288;
         ls_56 = ls_56 + ", SlippageCorrection=" + (-1 * gi_1028);
      } else gi_1028 = 0;
      if (g_str2int_236) ls_56 = ls_56 + ", SpreadDifference=" + gi_1052;
      Comments(9, "SendBuyOrder()", "Îòêðûò Buy îðäåð : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_32, Digits) + "), Slippage=" + gi_1032 + ls_56, "Buy order opened : " +
         DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_32, Digits) + "), Slippage=" + gi_1032 + ls_56);
      gi_1444 = FALSE;
      gi_1440 = FALSE;
      gi_1600 = Time[0];
      g_bars_1060 = Bars;
      gi_unused_1068 = l_ticket_8;
      gd_unused_1388 = 0;
      gi_1260 = 0;
      gi_1476 = TRUE;
   } else {
      if (gi_216 > 0 && !gi_1444) l_error_64 = 0;
      else l_error_64 = GetLastError();
      if (g_str2int_208) {
         if (!gi_1444) {
            gi_1444 = TRUE;
            gi_1440 = FALSE;
            g_bars_1076 = Bars;
            g_price_1412 = l_price_32;
         }
         if (li_20) {
            Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy, îæèäàíèå ïîâòîðà : " + PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")", "Error open Buy order, waiting for repeat : " +
               PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")");
         } else
            if (!gi_996) Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy, îæèäàíèå ïîâòîðà : òîðãîâûé ïîòîê çàíÿò", "Error open Buy order, waiting for repeat : trade context busy");
      } else {
         if (li_20) {
            Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : " + PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")", "Error open Buy order : " +
               PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")");
         } else
            if (!gi_996) Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : òîðãîâûé ïîòîê çàíÿò", "Error open Buy order : trade context busy");
      }
   }
   return (li_ret_16);
}

bool SendSellOrder(int ai_0, int ai_4) {
   int l_error_64;
   bool li_ret_8 = FALSE;
   bool li_12 = TRUE;
   int l_ticket_16 = 0;
   double l_price_32 = Bid;
   double l_price_40 = ai_0 / 10.0;
   double l_price_48 = ai_4 / 10.0;
   string ls_56 = "";
   gi_1508 = FALSE;
   double l_lots_24 = LotsForTrade(LotsPercent);
   if (l_lots_24 < 0.0) {
      Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : Íåäîñòàòî÷íî äåíåã (" + DoubleToStr(l_price_32, Digits) + ")", "Error open Sell order : Not enough money (" +
         DoubleToStr(l_price_32, Digits) + ")");
      return (FALSE);
   }
   if (l_price_40 != 0.0 && !InvisibleStopLoss) {
      if (l_price_40 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_40 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_40 = NormalizeDouble(Bid + l_price_40 * Point, Digits);
   }
   if (l_price_48 != 0.0) {
      if (l_price_48 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_48 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_48 = NormalizeDouble(Bid - l_price_48 * Point, Digits);
   }
   if (g_str2int_172 && !gi_840) {
      l_price_40 = 0;
      l_price_48 = 0;
   }
   int li_20 = GetTickCount();
   if (!gi_840) {
      if (gi_216 == 0 || (gi_216 > 0 && gi_1440)) {
         if (IsTradeAllowed()) l_ticket_16 = OrderSend(Symbol(), OP_SELL, l_lots_24, Bid, g_slippage_228, l_price_40, l_price_48, "euronis", g_magic_1112, 0, Red);
         else li_12 = FALSE;
      }
      if (l_ticket_16 > 0)
         if (OrderSelect(l_ticket_16, SELECT_BY_TICKET, MODE_TRADES)) li_ret_8 = TRUE;
   } else
      if (SaveFileOrder(Time[0], 1, l_ticket_16, l_lots_24, Bid, l_price_40, l_price_48)) li_ret_8 = TRUE;
   gi_1204 = GetTickCount() - li_20;
   gi_1212 = GetTickCount() - gi_1200;
   if (li_ret_8) {
      if (gi_1440) l_price_32 = g_price_1412;
      gi_1028 = MathRound((l_price_32 - OrderOpenPrice()) / Point);
      gi_1032 = -1 * gi_1028;
      gi_1036 = gi_1052;
      if (g_str2int_224) {
         if (gi_1028 > gi_288) gi_1028 = gi_288;
         ls_56 = ls_56 + ", SlippageCorrection=" + (-1 * gi_1028);
      } else gi_1028 = 0;
      if (g_str2int_236) ls_56 = ls_56 + ", SpreadDifference=" + gi_1052;
      Comments(9, "SendSellOrder()", "Îòêðûò Sell îðäåð : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_32, Digits) + "), Slippage=" + gi_1032 +
         ls_56, "Sell order opened : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_32, Digits) + "), Slippage=" + gi_1032 + ls_56);
      gi_1440 = FALSE;
      gi_1444 = FALSE;
      gi_1600 = Time[0];
      g_bars_1060 = Bars;
      gi_unused_1068 = l_ticket_16;
      gd_unused_1388 = 0;
      gi_1260 = 1;
      gi_1472 = TRUE;
   } else {
      if (gi_216 > 0 && !gi_1440) l_error_64 = 0;
      else l_error_64 = GetLastError();
      if (g_str2int_208) {
         if (!gi_1440) {
            gi_1440 = TRUE;
            gi_1444 = FALSE;
            g_bars_1076 = Bars;
            g_price_1412 = l_price_32;
         }
         if (li_12) {
            Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell, îæèäàíèå ïîâòîðà : " + PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")", "Error open Sell order, waiting for repeat : " +
               PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")");
         } else
            if (!gi_996) Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell, îæèäàíèå ïîâòîðà : òîðãîâûé ïîòîê çàíÿò", "Error open Sell order, waiting for repeat : trade context busy");
      } else {
         if (li_12) {
            Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : " + PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")", "Error open Sell order : " +
               PrintError(l_error_64) + " (" + DoubleToStr(l_price_32, Digits) + ")");
         } else
            if (!gi_996) Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : òîðãîâûé ïîòîê çàíÿò", "Error open Sell order : trade context busy");
      }
   }
   return (li_ret_8);
}

int isOrderClose() {
   double ld_12;
   double ld_20;
   string ls_28;
   string l_name_44;
   color l_color_52;
   int li_unused_56;
   string l_name_60;
   int l_file_68;
   string ls_72;
   int l_ticket_0 = 0;
   double ld_4 = 0;
   string l_dbl2str_36 = "";
   if (g_ticket_1088 != 0) {
      if (OrderSelect(g_ticket_1088, SELECT_BY_TICKET) == TRUE) {
         ld_20 = OrderClosePrice();
         if (OrderCloseTime() > 0) {
            l_ticket_0 = OrderTicket();
            if (OrderType() == OP_SELL) {
               ld_12 = (OrderOpenPrice() - OrderClosePrice()) / Point;
               ld_4 = g_price_1380 - ld_20;
               ls_28 = " (Slippage o/c=" + gi_1032 + "/" + DoubleToStr(ld_4 / Point, 0) + ", SpreadD o/c=" + gi_1036 + "/" + gi_1040 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1380, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) +
                  ls_28, "Sell order closed : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1380, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) + ls_28);
            }
            if (OrderType() == OP_BUY) {
               ld_12 = (OrderClosePrice() - OrderOpenPrice()) / Point;
               ld_4 = ld_20 - g_price_1380;
               ls_28 = " (Slippage o/c=" + gi_1032 + "/" + DoubleToStr(ld_4 / Point, 0) + ", SpreadD o/c=" + gi_1036 + "/" + gi_1040 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1380, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) +
                  ls_28, "Buy order closed : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1380, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) + ls_28);
            }
            g_ticket_1088 = 0;
            g_ticket_1092 = 0;
         }
      }
   }
   if (g_ticket_1092 != 0) {
      if (OrderSelect(g_ticket_1092, SELECT_BY_TICKET) == TRUE) {
         if (OrderCloseTime() > 0) {
            l_ticket_0 = OrderTicket();
            ld_20 = OrderClosePrice();
            if (OrderType() == OP_SELL) {
               ld_12 = (OrderOpenPrice() - OrderClosePrice()) / Point;
               ls_28 = " (Slippage o/c=" + gi_1032 + "/..." + ", SpreadD o/c=" + gi_1036 + "/" + gi_1040 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               if (OrderClosePrice() <= OrderTakeProfit() && OrderTakeProfit() != 0.0) {
                  l_dbl2str_36 = "TP";
                  Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî TakeProfit (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Sell order closed by TakeProfit (" + DoubleToStr(ld_20, Digits) +
                     ")" + ls_28);
                  gda_1436[24] += 1.0;
                  if (gi_820) {
                     gi_1484 = TRUE;
                     GlobalVariableSet(g_var_name_1756, gi_1228);
                     Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî TakeProfit", "Trade stoped: Order closed by TakeProfit");
                  }
               } else {
                  if (OrderClosePrice() >= OrderStopLoss() && OrderStopLoss() != 0.0) {
                     l_dbl2str_36 = "SL";
                     Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî StopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Sell order closed by StopLoss (" + DoubleToStr(ld_20, Digits) +
                        ")" + ls_28);
                     gda_1436[23] += 1.0;
                     if (gi_816) {
                        gi_1484 = TRUE;
                        GlobalVariableSet(g_var_name_1756, gi_1228);
                        Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî StopLoss", "Trade stoped: Order closed by StopLoss");
                     }
                  } else {
                     if (g_ticket_1104 != 0) {
                        l_dbl2str_36 = "iSL";
                        Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî iStopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Sell order closed by iStopLoss (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_28);
                        gda_1436[23] += 1.0;
                        if (gi_816) {
                           gi_1484 = TRUE;
                           GlobalVariableSet(g_var_name_1756, gi_1228);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî iStopLoss", "Trade stoped: Order closed by iStopLoss");
                        }
                     } else {
                        l_dbl2str_36 = "H";
                        Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò âðó÷íóþ (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Sell order closed by hand (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_28);
                        gda_1436[25] += 1.0;
                        if (gi_824) {
                           gi_1484 = TRUE;
                           GlobalVariableSet(g_var_name_1756, gi_1228);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ", "Trade stoped: Order closed by hand");
                        }
                     }
                  }
               }
            }
            if (OrderType() == OP_BUY) {
               ld_12 = (OrderClosePrice() - OrderOpenPrice()) / Point;
               ls_28 = " (Slippage o/c=" + gi_1032 + "/..." + ", SpreadD o/c=" + gi_1036 + "/" + gi_1040 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ")";
               if (OrderClosePrice() >= OrderTakeProfit() && OrderTakeProfit() != 0.0) {
                  l_dbl2str_36 = "TP";
                  Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî TakeProfit (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Buy order closed by TakeProfit (" + DoubleToStr(ld_20, Digits) +
                     ")" + ls_28);
                  gda_1436[24] += 1.0;
                  if (gi_820) {
                     gi_1484 = TRUE;
                     GlobalVariableSet(g_var_name_1756, gi_1228);
                     Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî TakeProfit", "Trade stoped: Order closed by TakeProfit");
                  }
               } else {
                  if (OrderClosePrice() <= OrderStopLoss() && OrderStopLoss() != 0.0) {
                     l_dbl2str_36 = "SL";
                     Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî StopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Buy order closed by StopLoss (" + DoubleToStr(ld_20, Digits) +
                        ")" + ls_28);
                     gda_1436[23] += 1.0;
                     if (gi_816) {
                        gi_1484 = TRUE;
                        GlobalVariableSet(g_var_name_1756, gi_1228);
                        Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî StopLoss", "Trade stoped: Order closed by StopLoss");
                     }
                  } else {
                     if (g_ticket_1104 != 0) {
                        l_dbl2str_36 = "iSL";
                        Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî iStopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Buy order closed by iStopLoss (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_28);
                        gda_1436[23] += 1.0;
                        if (gi_816) {
                           gi_1484 = TRUE;
                           GlobalVariableSet(g_var_name_1756, gi_1228);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî iStopLoss", "Trade stoped: Order closed by iStopLoss");
                        }
                     } else {
                        l_dbl2str_36 = "H";
                        Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò âðó÷íóþ (" + DoubleToStr(ld_20, Digits) + ")" + ls_28, "Buy order closed by hand (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_28);
                        gda_1436[25] += 1.0;
                        if (gi_824) {
                           gi_1484 = TRUE;
                           GlobalVariableSet(g_var_name_1756, gi_1228);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ", "Trade stoped: Order closed by hand");
                        }
                     }
                  }
               }
            }
            if (OrderCloseTime() >= Time[0] && g_str2int_424) gi_1600 = Time[0];
            if (!IsOptimization()) {
               if (OrderType() == OP_BUY) {
                  li_unused_56 = 1;
                  l_color_52 = Blue;
                  l_name_44 = OrderTicket() + " buy  " + DoubleToStr(OrderLots(), 2) + " " + OrderSymbol() + " at " + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               }
               if (OrderType() == OP_SELL) {
                  li_unused_56 = 2;
                  l_color_52 = Red;
                  l_name_44 = OrderTicket() + " sell  " + DoubleToStr(OrderLots(), 2) + " " + OrderSymbol() + " at " + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               }
               ObjectCreate(l_name_44, OBJ_ARROW, 0, OrderCloseTime(), OrderClosePrice());
               ObjectSet(l_name_44, OBJPROP_ARROWCODE, 3);
               ObjectSet(l_name_44, OBJPROP_COLOR, Black);
               l_name_44 = OrderTicket() + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS)) + "->" + DoubleToStr(OrderClosePrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               ObjectCreate(l_name_44, OBJ_TREND, 0, OrderOpenTime(), OrderOpenPrice(), OrderCloseTime(), OrderClosePrice());
               ObjectSet(l_name_44, OBJPROP_STYLE, STYLE_DOT);
               ObjectSet(l_name_44, OBJPROP_WIDTH, 1);
               ObjectSet(l_name_44, OBJPROP_RAY, FALSE);
               ObjectSet(l_name_44, OBJPROP_COLOR, l_color_52);
            }
            g_ticket_1104 = FALSE;
            g_ticket_1092 = 0;
         }
      }
   }
   if (l_ticket_0 > 0 && !IsOptimization()) {
      l_name_60 = gs_1724 + ".csv";
      if (gi_1524 && IsTesting()) {
         gi_1524 = FALSE;
         FileDelete(l_name_60);
      }
      l_file_68 = FileOpen(l_name_60, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_68 < 1) Comments(9, "isOrderClose()", "Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + l_name_60 + " :" + PrintError(GetLastError()), "Can not write to file " + l_name_60 + " :" + PrintError(GetLastError()));
      else {
         if (FileSize(l_file_68) <= 0) {
            FileWrite(l_file_68, "Ticket", "Type", "Size", "Item", "", "", "", "Open", "", "", "TakeProfit", "StopLoss", "", "", "", "Close", "", "", "ProfitP", "Profit$", "Profit%", "LifeTime", "Expert");
            FileWrite(l_file_68, "", "", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "SpreadD", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "SpreadD", "", "", "", "", "");
         }
         FileSeek(l_file_68, 0, SEEK_END);
         ls_72 = "";
         if (l_dbl2str_36 == "") l_dbl2str_36 = DoubleToStr(ld_4 / Point, 0);
         if (OrderType() == OP_SELL) ls_72 = "sell";
         if (OrderType() == OP_BUY) ls_72 = "buy";
         FileWrite(l_file_68, OrderTicket(), ls_72, " " + DoubleToStr(OrderLots(), 2), gs_1672, TimeToStr(OrderOpenTime(), TIME_DATE|TIME_SECONDS) + " (" + NameDayOfWeek(OrderOpenTime()) +
            ")", gi_1204 + " (" + gi_1212 + ")", " " + DoubleToStr(OrderOpenPrice(), Digits), g_count_1128, gi_1032, gi_1036, " " + DoubleToStr(OrderTakeProfit(), Digits), " " + DoubleToStr(OrderStopLoss(), Digits), TimeToStr(OrderCloseTime(), TIME_DATE|TIME_SECONDS) + " (" + NameDayOfWeek(OrderCloseTime()) + ")", gi_1208 + " (" + gi_1216 + ")", " " + DoubleToStr(OrderClosePrice(), Digits), gi_1124, l_dbl2str_36, gi_1040, DoubleToStr(ld_12, 0), " " + DoubleToStr(OrderProfit(), 2), " " + DoubleToStr(100.0 * OrderProfit() / (AccountBalance() - OrderProfit()), 1), OrderCloseTime() - OrderOpenTime(), WindowExpertName());
         FileClose(l_file_68);
      }
      g_count_1128 = 0;
      gi_1204 = 0;
      gi_1212 = 0;
      gi_1208 = 0;
      gi_1216 = 0;
   }
   if (l_ticket_0 > 0) gi_1576 = TRUE;
   return (l_ticket_0);
}

string NameDayOfWeek(int ai_0) {
   if (TimeDayOfWeek(ai_0) == 0) return ("âñ");
   if (TimeDayOfWeek(ai_0) == 1) return ("ïí");
   if (TimeDayOfWeek(ai_0) == 2) return ("âò");
   if (TimeDayOfWeek(ai_0) == 3) return ("ñð");
   if (TimeDayOfWeek(ai_0) == 4) return ("÷ò");
   if (TimeDayOfWeek(ai_0) == 5) return ("ïò");
   if (TimeDayOfWeek(ai_0) == 6) return ("ñá");
   return ("");
}

bool isNewBar() {
   bool li_ret_0 = FALSE;
   if (Time[0] != g_time_1196) {
      g_time_1196 = Time[0];
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool isNewHour() {
   bool li_ret_0 = FALSE;
   if (Hour() != gi_1192) {
      gi_1192 = Hour();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool isNewDayOfWeek() {
   bool li_ret_0 = FALSE;
   if (DayOfWeek() != g_day_of_week_1180) {
      g_day_of_week_1180 = DayOfWeek();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

int GMTSWDifference() {
   bool li_ret_0 = FALSE;
   if (SWChangeMode == 1 || SWChangeMode == 3) {
      if (TimeCurrent() > gi_1604 && TimeCurrent() < gi_1616) li_ret_0 = TRUE;
      if (TimeCurrent() > gi_1620 && TimeCurrent() < gi_1608) li_ret_0 = TRUE;
   }
   if (SWChangeMode == 2)
      if (TimeCurrent() > gi_1604 || TimeCurrent() < gi_1608) li_ret_0 = TRUE;
   return (li_ret_0);
}

bool StartRulls() {
   int li_4;
   int li_unused_0 = 1;
   if (isNewDayOfWeek()) {
      li_4 = gi_1268;
      gi_1268 = GMTSWDifference();
      if (li_4 != gi_1268) {
         MakeInitString();
         if (gi_1268 >= 0) Comments(9, "GMTSWDifference()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction+" + gi_1268, "New value of time correcton: Correction+" + gi_1268);
         if (gi_1268 < 0) Comments(9, "GMTSWDifference()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction" + gi_1268, "New value of time correcton: Correction" + gi_1268);
      }
   }
   gi_1588 = TimeCurrent() + 7200 - 3600 * (TimeZone + gi_1268);
   g_hour_1220 = TimeHour(gi_1588);
   g_day_of_week_1224 = TimeDayOfWeek(gi_1588);
   gi_1228 = TimeDay(gi_1588);
   g_month_1232 = TimeMonth(gi_1588);
   g_year_1236 = TimeYear(gi_1588);
   if (g_minute_1132 != TimeMinute(gi_1588)) {
      g_minute_1132 = TimeMinute(gi_1588);
      if (Language == "eng") gs_1732 = "Trade time CET " + TimeToStr(gi_1588, TIME_MINUTES);
      else gs_1732 = "Òîðãîâîå âðåìÿ CET (MSK-2) " + TimeToStr(gi_1588, TIME_MINUTES);
      gs_1732 = gs_1732 
      + "\n";
      Comments(7, "", "", "");
   }
   CheckSpreadDifference();
   isOrderClose();
   isNoNews(gi_1588, gi_876);
   if (IsOptimization() && !gi_796) {
      if (gi_800 > 12) return (FALSE);
      if (gi_804 > 12) return (FALSE);
      if (gi_808 < 12) return (FALSE);
      if (gi_812 < 12) return (FALSE);
      if (gi_800 > gi_804 || gi_808 > gi_812) return (FALSE);
   }
   if (IsTesting() || IsOptimization()) {
      gi_836 = FALSE;
      gi_840 = FALSE;
   }
   if (gi_836 && gi_840) {
      Comment("TradeTransferIn è TradeTransferOut íå ìîãóò ðàáîòàòü îäíîâðåìåííî!!!");
      li_unused_0 = 0;
   }
   MarginControl();
   int li_8 = gi_1556;
   gi_1556 = FALSE;
   if (!isVolatilitytoTrade()) gi_1556 = TRUE;
   if (g_str2int_708) Comments(3, "", "BlockByVolatility = " + gi_1556, "");
   li_8 = gi_1548;
   gi_1548 = FALSE;
   int li_12 = MaxChannelLimit(gd_332, g_str2int_340, g_str2int_356);
   if (li_12 != 0) gi_1548 = TRUE;
   if (!li_8 && gi_1548) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð êàíàëà (" + DoubleToStr(gd_332, 0) + "/" + g_str2int_340 + ")", "Trade stoped: High channel size (" +
         DoubleToStr(gd_332, 0) + "/" + g_str2int_340 + ")");
   }
   if (li_8 && !gi_1548) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_332, 0) + "/" + g_str2int_340 + ")", "Trade allowed (" + DoubleToStr(gd_332, 0) + "/" + g_str2int_340 +
         ")");
   }
   li_8 = gi_1544;
   gi_1544 = FALSE;
   int li_16 = MaxChannelLimit(gd_344, g_str2int_352, g_str2int_360);
   if (li_16 != 0) gi_1544 = TRUE;
   if (!li_8 && gi_1544) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð êàíàëà (" + DoubleToStr(gd_344, 0) + "/" + g_str2int_352 + ")", "Trade stoped: High channel size (" +
         DoubleToStr(gd_344, 0) + "/" + g_str2int_352 + ")");
   }
   if (li_8 && !gi_1544) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_344, 0) + "/" + g_str2int_352 + ")", "Trade allowed (" + DoubleToStr(gd_344, 0) + "/" + g_str2int_352 +
         ")");
   }
   li_8 = gi_1552;
   gi_1552 = FALSE;
   if (MaxVolumeLimit(gd_308, g_str2int_316, g_str2int_320)) gi_1552 = TRUE;
   if (!li_8 && gi_1552) {
      Comments(9, "MaxVolumeLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð áàðîâ (" + DoubleToStr(gd_308, 0) + "/" + g_str2int_316 + ")", "Trade stoped: High bars size (" +
         DoubleToStr(gd_308, 0) + "/" + g_str2int_316 + ")");
   }
   if (li_8 && !gi_1552) {
      Comments(9, "MaxVolumeLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_308, 0) + "/" + g_str2int_316 + ")", "Trade allowed (" + DoubleToStr(gd_308, 0) + "/" + g_str2int_316 +
         ")");
   }
   if (gi_1260 == 1) Comments(4, "", "Next Direction = buy", "");
   if (gi_1260 == 0) Comments(4, "", "Next Direction = sell", "");
   if (gi_1260 == 99) Comments(4, "", "Next Direction = buy or sell", "");
   li_8 = gi_1540;
   gi_1540 = FALSE;
   if (!isSpreadtoTrade()) gi_1540 = TRUE;
   if (!li_8 && gi_1540) {
      Comments(9, "isSpreadtoTrade()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð ñïðåäà (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")", "Trade stoped: High spread value (Spread=" +
         DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")");
   }
   if (li_8 && !gi_1540) {
      Comments(9, "isSpreadtoTrade()", "Òîðãîâëÿ ðàçðåøåíà (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")", "Trade allowed (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) +
         ")");
   }
   DrawDownAction(g_hour_1220);
   if (isNewBar()) {
   }
   if (isNewHour()) {
      SendMailReport();
      li_8 = gi_1560;
      gi_1560 = FALSE;
      if (!isTimetoTrade(gi_1588)) gi_1560 = TRUE;
      if (!li_8 && gi_1560) {
         Comments(9, "isTimetoTrade()", "Òîðãîâëÿ çàáëîêèðîâàíà: Òîðãîâîå âðåìÿ âûøëî", "Trade stoped: Trade time is over");
         gi_1484 = FALSE;
      }
      if (li_8 && !gi_1560) {
         gi_1260 = 99;
         Comments(9, "isTimetoTrade()", "Òîðãîâëÿ ðàçðåøåíà: Òîðãîâîå âðåìÿ íà÷àëîñü", "Trade allowed: Trade time is started");
      }
   }
   CheckBlockByStopsDate();
   if (!gi_1488 && gi_1484) Comments(9, "CheckBlockByStopsDate()", "Òîðãîâëÿ çàáëîêèðîâàíà äî ñëåäóþùåé òîðãîâîé ñåññèè", "Trade is disabled until the next trading session");
   gi_1488 = gi_1484;
   return (TRUE);
}

int CheckSpreadDifference() {
   bool li_ret_0 = FALSE;
   if (g_str2int_236) {
      gi_1052 = MathRound(gi_252 - MarketInfo(Symbol(), MODE_SPREAD));
      if (gi_1476) gi_1048 = gi_1036;
      if (gi_1472) gi_1048 = gi_1052;
      Comments(0, "", "SpreadDifference = " + gi_1052 + "   SpreadCorrection = " + gi_1048, "");
   } else gi_1048 = 0;
   return (li_ret_0);
}

int SendMailReport() {
   double l_global_var_8;
   double l_global_var_16;
   double ld_24;
   string ls_80;
   bool li_ret_0 = FALSE;
   bool li_4 = TRUE;
   string ls_32 = "";
   int l_error_40 = 0;
   int li_44 = TimeCurrent() - 3600 * (TimeZone + gi_1268);
   double ld_48 = 1.0 * TimeHour(li_44);
   double ld_56 = 1.0 * TimeDay(li_44);
   string ls_64 = " ";
   string ls_72 = "";
   if (UseMailReport) {
      if (!gi_1456) {
         gi_1456 = TRUE;
         if (!GlobalVariableCheck(g_var_name_1764) || !GlobalVariableCheck(g_var_name_1772) || IsTesting() || IsOptimization()) {
            if (GlobalVariableSet(g_var_name_1764, AccountBalance()) == 0 || GlobalVariableSet(g_var_name_1772, TimeDay(li_44 - 86400)) == 0) {
               Comments(9, "SendMailReport()", "Íåâîçìîæíî óñòàíîâèòü ãëîá. ïåðåìåííûå äëÿ îòïðàâêè îò÷åòà íà e-mail", "Can not set global variables to send e-mail");
               UseMailReport = FALSE;
            }
         }
      }
      l_global_var_16 = GlobalVariableGet(g_var_name_1764);
      l_global_var_8 = GlobalVariableGet(g_var_name_1772);
      if ((l_global_var_8 != ld_56 && ld_56 != 6.0 && ld_56 != 0.0 && ld_48 >= 1.0 * MailReportHourGMT) || (AccountMargin() == 0.0 && gi_1460)) {
         if (AccountMargin() == 0.0 && gi_1460) {
            gi_1460 = FALSE;
            li_4 = FALSE;
         }
         ls_80 = gs_1680 + " " + AccountNumber();
         ls_32 = ls_32 + ls_80 + ls_64;
         ls_32 = ls_32 + TimeToStr(li_44, TIME_DATE|TIME_MINUTES) + " GMT" + ls_64;
         ls_32 = ls_32 + "Balance: " + DoubleToStr(AccountBalance(), 2) + AccountCurrency() + ls_64;
         ld_24 = AccountBalance() - l_global_var_16;
         ls_72 = "";
         if (AccountMargin() != 0.0) {
            gi_1460 = TRUE;
            if (AccountEquity() > AccountBalance()) ls_72 = "+";
            ls_32 = ls_32 + "Trades: " + ls_72 + DoubleToStr(AccountEquity() - AccountBalance(), 2) + AccountCurrency() + ls_64;
         }
         ls_72 = "";
         if (ld_24 > 0.0) ls_72 = "+";
         if (li_4) ls_32 = ls_32 + "DayProfit: " + ls_72 + DoubleToStr(ld_24, 2) + AccountCurrency();
         if (!IsTesting() && !IsOptimization()) {
            GetLastError();
            SendMail("report", ls_32);
            l_error_40 = GetLastError();
         }
         if (l_error_40 != 0/* NO_ERROR */) {
            Comments(9, "SendMailReport()", "Íå óäàëîñü îòïðàâèòü îò÷åò íà e-mail: " + PrintError(l_error_40), "Can not send e-mail: " + PrintError(l_error_40));
            UseMailReport = FALSE;
         } else {
            Comments(9, "SendMailReport()", "Îòïðàâëåí îò÷åò íà e-mail", "E-mail report sent");
            if (li_4) {
               GlobalVariableSet(g_var_name_1772, ld_56);
               GlobalVariableSet(g_var_name_1764, AccountBalance());
            }
            li_ret_0 = TRUE;
         }
      }
   }
   return (li_ret_0);
}

int isProfitValuetoClose(int ai_0) {
   int li_8;
   bool li_ret_4 = FALSE;
   Comments(1, "", "CurrentOrderProfitPoint = " + DoubleToStr(gd_1364, 0), "");
   if (g_str2int_176 == 0 || ai_0 == gi_280) {
      if (gd_1364 >= ai_0) {
         if (gi_1100 < gi_192 && gi_192 > 0) gi_unused_1096 = g_ticket_1092;
         else li_ret_4 = TRUE;
      } else {
         if (g_str2int_260) {
            li_8 = Bars - g_bars_1060;
            if (gd_1364 > 0.0 && gd_1364 - ai_0 * (1 - li_8 / g_str2int_376) >= 0.0) li_ret_4 = TRUE;
         }
      }
   } else {
      if (gd_1364 >= ai_0 && !gi_1464) {
         gd_1372 = 0.0;
         gi_1464 = TRUE;
      }
      if (gi_1464) {
         if (gd_1364 <= MathFloor((100 - g_str2int_180) * gi_288 / 100)) {
            li_ret_4 = TRUE;
            gi_1464 = FALSE;
         } else {
            if (gd_1372 < gd_1364) gd_1372 = gd_1364;
            if (gd_1364 <= MathFloor((100 - g_str2int_176) * gd_1372 / 100.0)) {
               li_ret_4 = TRUE;
               gi_1464 = FALSE;
            }
         }
      }
   }
   return (li_ret_4);
}

int isInvisibleStopLosstoClose(int ai_0) {
   bool li_ret_4 = FALSE;
   if (InvisibleStopLoss) {
      if (gi_156 != 0) {
         if ((gd_1364 <= (-1 * gi_156) + gi_1048 && ai_0 == 1) || (gd_1364 <= (-1 * gi_156) && ai_0 == 0)) {
            li_ret_4 = TRUE;
            gi_1536 = TRUE;
         }
      }
   }
   return (li_ret_4);
}

int isChanneltoOpen(int ai_0, int ai_4, int ai_8, int ai_12) {
   bool li_ret_16 = FALSE;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_16);
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)] + Point * ai_12;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)] - Point * ai_12;
   if (gi_1044 == 10) {
      if (g_str2int_412 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathRound(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
      if (g_str2int_412 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathCeil(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
      if (g_str2int_412 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathFloor(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
   }
   if (ai_0 == 0)
      if (Bid < ld_28 || (ai_8 && Bid <= ld_28)) li_ret_16 = TRUE;
   if (ai_0 == 1)
      if (Bid > ld_20 || (ai_8 && Bid >= ld_20)) li_ret_16 = TRUE;
   return (li_ret_16);
}

int isChanneltoClose(int ai_0, int ai_4, int ai_8, int ai_12) {
   bool li_ret_16 = FALSE;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_16);
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)] + Point * ai_12;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)] - Point * ai_12;
   if (gi_1044 == 10) {
      if (g_str2int_412 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathRound(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
      if (g_str2int_412 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathCeil(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
      if (g_str2int_412 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathFloor(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
   }
   if (ai_0 == 0)
      if (Bid > ld_20 || (ai_8 && Bid >= ld_20)) li_ret_16 = TRUE;
   if (ai_0 == 1)
      if (Bid < ld_28 || (ai_8 && Bid <= ld_28)) li_ret_16 = TRUE;
   return (li_ret_16);
}

bool isTimetoTrade(int ai_0) {
   int li_12;
   int li_16;
   bool li_ret_4 = FALSE;
   int l_hour_20 = TimeHour(ai_0);
   int l_day_of_week_24 = TimeDayOfWeek(ai_0);
   int l_day_28 = TimeDay(ai_0);
   int l_month_32 = TimeMonth(ai_0);
   int l_year_36 = TimeYear(ai_0);
   if (l_day_of_week_24 > 0 && l_day_of_week_24 < 6) {
      for (int li_8 = 0; li_8 < 10; li_8 += 2) {
         li_12 = gia_1276[l_day_of_week_24 - 1][li_8];
         li_16 = gia_1276[l_day_of_week_24 - 1][li_8 + 1];
         if (CheckTimes(l_hour_20, li_12, li_16)) {
            li_ret_4 = TRUE;
            break;
         }
      }
      if (l_day_of_week_24 == 1 && l_hour_20 < 12 && BlockWeekBegin) li_ret_4 = FALSE;
      if (l_day_of_week_24 == 5 && l_hour_20 >= 12 && BlockWeekEnd) li_ret_4 = FALSE;
      if ((l_day_of_week_24 != MathAbs(gi_788) && gi_788 > 0) || (l_day_of_week_24 == MathAbs(gi_788) && gi_788 < 0)) li_ret_4 = FALSE;
      if (l_month_32 != gi_792 && gi_792 != 0) li_ret_4 = FALSE;
      if (gi_784) {
         if (l_month_32 == 1 || l_month_32 == 3 || l_month_32 == 5 || l_month_32 == 7 || l_month_32 == 9 || l_month_32 == 11 && l_day_28 == 30 || l_day_28 == 31) li_ret_4 = FALSE;
         if (l_month_32 == 4 || l_month_32 == 6 || l_month_32 == 8 || l_month_32 == 10 || l_month_32 == 12 && l_day_28 == 29 || l_day_28 == 30) li_ret_4 = FALSE;
         if (l_month_32 == 2 && l_day_28 == 27 || l_day_28 == 28 || l_day_28 == 29) li_ret_4 = FALSE;
      }
   }
   if (ai_0 > StrToTime("2008.06.10 5:00") && ai_0 < StrToTime("2008.06.10 10:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.10.15 19:00") && ai_0 < StrToTime("2008.10.16 23:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2009.1.19 22:45") && ai_0 < StrToTime("2009.1.19 23:15")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.10.29 5:00") && ai_0 < StrToTime("2008.10.29 10:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.12.18 4:45") && ai_0 < StrToTime("2008.12.18 10:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2008.12.24 12:00") && ai_0 < StrToTime("2009.01.05 12:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2009.01.06 18:00") && ai_0 < StrToTime("2009.01.06 23:00")) li_ret_4 = FALSE;
   if (ai_0 > StrToTime("2009.01.28 18:00") && ai_0 < StrToTime("2009.01.28 23:00")) li_ret_4 = FALSE;
   return (li_ret_4);
}

bool CheckTimes(int ai_0, int ai_4, int ai_8) {
   bool li_ret_12 = FALSE;
   if (ai_4 > 23 || ai_4 < 0) ai_4 = 0;
   if (ai_8 > 23 || ai_8 < 0) ai_8 = 0;
   if (ai_4 < ai_8 && (ai_0 >= ai_4 && ai_0 < ai_8)) li_ret_12 = TRUE;
   if (ai_4 > ai_8 && ai_0 >= ai_4 || ai_0 < ai_8) li_ret_12 = TRUE;
   return (li_ret_12);
}

int ClearBuffer(string as_0, int ai_unused_8) {
   bool li_ret_12 = FALSE;
   if (as_0 == "ReceiveBuffer") {
      gda_1428[0][0] = 0;
      gda_1428[0][1] = 99;
      gda_1428[0][2] = 0;
      gda_1428[0][3] = 0;
      gda_1428[0][4] = 0;
      gda_1428[0][5] = 0;
   }
   if (as_0 == "CommandBuffer") {
      gda_1432[0][0] = 0;
      gda_1432[0][1] = 99;
      gda_1432[0][2] = 0;
      gda_1432[0][3] = 0;
      gda_1432[0][4] = 0;
      gda_1432[0][5] = 0;
      gda_1432[0][6] = 0;
      gda_1432[0][7] = 0;
   }
   if (as_0 == "VariablesBuffer") for (int l_index_16 = 0; l_index_16 < 7; l_index_16++) gsa_1688[l_index_16] = "";
   if (as_0 == "InformationBuffer") for (l_index_16 = 0; l_index_16 < 50; l_index_16++) gsa_1692[l_index_16] = "";
   if (as_0 == "LogFileBuffer") for (l_index_16 = 0; l_index_16 < 20; l_index_16++) gsa_1704[l_index_16] = "";
   if (as_0 == "ReportBuffer") for (l_index_16 = 0; l_index_16 < 30; l_index_16++) gda_1436[l_index_16] = 0.0;
   if (as_0 == "ErrorArray") for (l_index_16 = 0; l_index_16 < 4300; l_index_16++) gsa_1700[l_index_16] = "Íåïîíÿòíàÿ îøèáêà";
   return (li_ret_12);
}

bool isNoNews(int ai_0, int ai_4) {
   int l_file_12;
   int li_20;
   string ls_32;
   string ls_40;
   string ls_48;
   string ls_56;
   string ls_64;
   string ls_72;
   int li_80;
   int li_84;
   bool li_ret_8 = TRUE;
   bool li_16 = FALSE;
   string ls_24 = "";
   if (gi_872 && (ai_0 - gi_1592) / 60 - ai_4 >= 0 || ai_4 == 0) {
      if (ai_4 != 0) gi_1592 = ai_0;
      l_file_12 = FileOpen("news" + TimeMonth(ai_0 - 3600 * (TimeZone + gi_1268)) + TimeYear(ai_0 - 3600 * (TimeZone + gi_1268)) + ".csv", FILE_CSV|FILE_READ, ';');
      if (l_file_12 < 1) {
         if (!gi_1500) {
            gi_1500 = TRUE;
            if (ai_4 != 0) Comments(9, "isNoNews()", "Ôàéë íå îáíàðóæåí, îøèáêà : " + GetLastError(), "Error, no news file : " + GetLastError());
         }
      } else {
         gi_1500 = FALSE;
         while (!FileIsEnding(l_file_12)) {
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 1) ls_40 = "0" + ls_32;
            else ls_40 = ls_32;
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 1) ls_48 = "0" + ls_32;
            else ls_48 = ls_32;
            ls_56 = FileReadString(l_file_12);
            ls_32 = FileReadString(l_file_12);
            if (StrToInteger(ls_32) == 1) li_16 = TRUE;
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 4) ls_64 = "0" + ls_32;
            else ls_64 = ls_32;
            li_20 = StrToTime(ls_56 + "." + ls_48 + "." + ls_40 + " " + ls_64) + 3600 * (TimeZone + gi_1268);
            ls_72 = FileReadString(l_file_12);
            ls_24 = FileReadString(l_file_12);
            li_80 = li_20 - 60 * gi_880;
            li_84 = li_20 + 60 * gi_884;
            if (ai_0 >= li_80 && ai_0 < li_84 && li_16 || (!li_16 && !gi_888) && (gi_892 && ls_72 == "ÑØÀ") || (gi_896 && ls_72 == "Ôðàí." || ls_72 == "Ãåðì." || ls_72 == "Èòàë." ||
               ls_72 == "ÅÑ") || (gi_900 && ls_72 == "Øâåéö.") || (gi_908 && ls_72 == "Âåëèêîá.") || (gi_904 && ls_72 == "ßïîí.") || (gi_912 && ls_72 == "Àâñòðàë.") || (gi_916 && ls_72 == "Í.Çåëàíä.") ||
               (gi_920 && ls_72 == "Êàíàäà")) {
               li_ret_8 = FALSE;
               if (!(!gi_1496)) break;
               gi_1496 = TRUE;
               if (ai_4 == 0) break;
               Comments(9, "isNoNews()", "Áëîêèðîâêà ïî íîâîñòÿì âêëþ÷åíà ñ " + TimeToStr(li_80, TIME_MINUTES) + " äî " + TimeToStr(li_84, TIME_MINUTES) + " GMT+2 (" + ls_72 + ")", "Trading blocked by news from " +
                  TimeToStr(li_80, TIME_MINUTES) + " till " + TimeToStr(li_84, TIME_MINUTES) + " GMT+2 (" + ls_72 + ")");
               break;
            }
         }
         FileClose(l_file_12);
      }
      if (li_ret_8 && gi_1496) {
         gi_1496 = FALSE;
         if (ai_4 != 0) Comments(9, "isNoNews()", "Áëîêèðîâêà ïî íîâîñòÿì âûêëþ÷åíà", "Trading allowed");
      }
   }
   return (li_ret_8);
}

int SetTimeSettings(int ai_0) {
   bool li_ret_4 = FALSE;
   for (int l_count_8 = 0; l_count_8 < 10; l_count_8++) {
      gia_1276[0][l_count_8] = 0;
      gia_1276[1][l_count_8] = 0;
      gia_1276[2][l_count_8] = 0;
      gia_1276[3][l_count_8] = 0;
      gia_1276[4][l_count_8] = 0;
   }
   if (gi_760 && ai_0 >= 0) {
      if (ai_0 > 99) ai_0 = 99;
      li_ret_4 = TRUE;
      if (li_ret_4) {
         for (l_count_8 = 0; l_count_8 < 10; l_count_8++) {
            gia_1276[0][l_count_8] = gia_1280[5 * ai_0 + 0][l_count_8];
            gia_1276[1][l_count_8] = gia_1280[5 * ai_0 + 1][l_count_8];
            gia_1276[2][l_count_8] = gia_1280[5 * ai_0 + 2][l_count_8];
            gia_1276[3][l_count_8] = gia_1280[5 * ai_0 + 3][l_count_8];
            gia_1276[4][l_count_8] = gia_1280[5 * ai_0 + 4][l_count_8];
         }
      }
   } else {
      gia_1276[0][0] = gi_800;
      gia_1276[0][1] = gi_804;
      gia_1276[0][2] = gi_808;
      gia_1276[0][3] = gi_812;
      gia_1276[1][0] = gi_800;
      gia_1276[1][1] = gi_804;
      gia_1276[1][2] = gi_808;
      gia_1276[1][3] = gi_812;
      gia_1276[2][0] = gi_800;
      gia_1276[2][1] = gi_804;
      gia_1276[2][2] = gi_808;
      gia_1276[2][3] = gi_812;
      gia_1276[3][0] = gi_800;
      gia_1276[3][1] = gi_804;
      gia_1276[3][2] = gi_808;
      gia_1276[3][3] = gi_812;
      gia_1276[4][0] = gi_800;
      gia_1276[4][1] = gi_804;
      gia_1276[4][2] = gi_808;
      gia_1276[4][3] = gi_812;
   }
   return (li_ret_4);
}

double LotsForTrade(int ai_0) {
   double ld_ret_4;
   int li_unused_20;
   double ld_24;
   double ld_32;
   double l_free_magrin_12 = AccountFreeMargin();
   if (gd_1300 == 0.01) li_unused_20 = 2;
   else li_unused_20 = 1;
   if (Lots != 0.0) ld_ret_4 = Lots;
   else {
      ld_ret_4 = gd_1300 * MathFloor((l_free_magrin_12 - gd_116) * ai_0 / 100000.0 / gd_1300);
      if (ld_ret_4 > gd_100) ld_ret_4 = gd_100;
      if (BalanceControlMode == 1 || (BalanceControlMode == 4 && !gi_1580)) {
         ld_ret_4 = gd_1300 * MathFloor((g_global_var_1404 - gd_116) * ai_0 / 100000.0 / gd_1300);
         if (ld_ret_4 / ((l_free_magrin_12 - gd_116) / 100000.0) - 1.0 * gi_1084 > 0.0) ld_ret_4 = gd_1300 * MathFloor((l_free_magrin_12 - gd_116) * gi_1084 / 100000.0 / gd_1300);
         if (ld_ret_4 > gd_100) ld_ret_4 = gd_100;
      }
      if (BalanceControlMode == 2 || BalanceControlMode == 3 || (BalanceControlMode == 4 && gi_1580)) {
         ld_24 = 0.0;
         ld_32 = 0.0;
         ld_24 = GetPointPrice() * gd_1308;
         if (ld_24 == 0.0 && gi_288 != 0.0 && g_str2int_284) {
            Comments(9, "LotsForTrade()", "Ðåæèì BalanceControlMode âûêëþ÷åí: Íåäîñòàòî÷íî äàííûõ äëÿ ðàñ÷åòà", "BalanceControlMode is disabled: no data");
            BalanceControlMode = 0;
         } else {
            ld_32 = gd_1300 * MathFloor((g_global_var_1404 - l_free_magrin_12) / gi_288 / ld_24 * gd_1308 / gd_1300);
            if (ld_32 > ld_ret_4) {
               if (ld_32 / ((l_free_magrin_12 - gd_116) / 100000.0) - 1.0 * gi_1084 > 0.0) ld_32 = gd_1300 * MathFloor((l_free_magrin_12 - gd_116) * gi_1084 / 100000.0 / gd_1300);
               ld_ret_4 = ld_32;
            }
         }
      }
   }
   if (ld_ret_4 > NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2)) ld_ret_4 = NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2);
   if (ld_ret_4 < gd_1308) ld_ret_4 = gd_1308;
   if (0.00001 * (gi_1084 * l_free_magrin_12) - ld_ret_4 < 0.0) ld_ret_4 = -1.0;
   return (ld_ret_4);
}

double MarginControl() {
   double ld_8;
   double l_global_var_16;
   int l_mb_code_24;
   double ld_28;
   double ld_36;
   double ld_44;
   double ld_ret_0 = 0.0;
   if (gi_1516) {
      gi_1516 = FALSE;
      if (!IsOptimization() && !IsTesting() && GlobalVariableCheck(g_var_name_1740)) {
         if (GlobalVariableGet(g_var_name_1740) > AccountBalance() && ResetMaxBalance) {
            if (Language == "eng") l_mb_code_24 = MessageBox("Reset variable MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency(), "Question", MB_YESNO|MB_ICONQUESTION);
            else l_mb_code_24 = MessageBox("Ñáðîñèòü ïåðåìåííóþ MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency(), "Question", MB_YESNO|MB_ICONQUESTION);
            if (l_mb_code_24 == IDYES) {
               GlobalVariableSet(g_var_name_1740, AccountBalance());
               Comments(9, "MarginControl()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency(), "New MaxBalance value = " +
                  DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency());
            } else {
               Comments(9, "MarginControl()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency(), "MaxBalance value = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) +
                  AccountCurrency());
            }
         } else {
            Comments(9, "MarginControl()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency(), "MaxBalance value = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) +
               AccountCurrency());
         }
      } else {
         GlobalVariableSet(g_var_name_1740, AccountBalance());
         Comments(9, "MarginControl()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency(), "New MaxBalance value = " +
            DoubleToStr(GlobalVariableGet(g_var_name_1740), 2) + AccountCurrency());
      }
      GlobalVariableSet(g_var_name_1748, GlobalVariableGet(g_var_name_1740));
      if (AccountCurrency() != "USD" && AccountCurrency() != "EUR" && BalanceControlMode > 0) {
         Comments(9, "MarginControl()", "Íåâîçìîæíî óñòàíîâèòü ðåæèì BalanceControlMode=" + BalanceControlMode + ", íåèçâåñòíàÿ âàëþòà äåïîçèòà " + AccountCurrency(), "Can not set BalanceControlMode=" +
            BalanceControlMode + ", unknown deposit currency " + AccountCurrency());
         BalanceControlMode = 0;
      }
   }
   if (!GlobalVariableCheck(g_var_name_1740) || !GlobalVariableCheck(g_var_name_1748)) {
      GlobalVariableSet(g_var_name_1740, AccountBalance());
      GlobalVariableSet(g_var_name_1748, AccountBalance());
      if (!GlobalVariableCheck(g_var_name_1740) || !GlobalVariableCheck(g_var_name_1748)) {
         Comments(9, "MarginControl()", "Îøèáêà ñîçäàíèÿ ãëîáàëüíûõ ïåðåìåííûõ MaxBalance: " + PrintError(GetLastError()), "Error set gobal variables MaxBalance: " + PrintError(GetLastError()));
         g_global_var_1404 = AccountBalance();
         l_global_var_16 = AccountBalance();
      }
   } else {
      g_global_var_1404 = GlobalVariableGet(g_var_name_1740);
      l_global_var_16 = GlobalVariableGet(g_var_name_1748);
   }
   if (AccountBalance() > g_global_var_1404) {
      gi_1504 = FALSE;
      g_global_var_1404 = AccountBalance();
      GlobalVariableSet(g_var_name_1740, g_global_var_1404);
   }
   if (BalanceControlMode == 3 || BalanceControlMode == 4 && gi_1576) {
      gi_1576 = FALSE;
      ld_36 = gd_1300 * MathFloor((l_global_var_16 - gd_116) * LotsPercent / 100000.0 / gd_1300);
      if (ld_36 > gd_100) ld_36 = gd_100;
      if (ld_36 < gd_1308) ld_36 = gd_1308;
      ld_44 = GetPointPrice();
      ld_28 = ld_44 * ld_36;
      ld_8 = l_global_var_16 + 3.0 * ld_28 * gi_1044;
      if (g_global_var_1404 < ld_8) {
         Comments(9, "MarginControl()", "Óâåëè÷åíî çíà÷åíèå MaxBalance íà ðàçìåð ïîòåðÿííîé ïðèáûëè äî " + DoubleToStr(ld_8, 2) + AccountCurrency(), "MaxBalance increased to " +
            DoubleToStr(ld_8, 2) + AccountCurrency());
         g_global_var_1404 = ld_8;
         GlobalVariableSet(g_var_name_1740, g_global_var_1404);
      }
      GlobalVariableSet(g_var_name_1748, g_global_var_1404);
   }
   if (AccountBalance() < g_global_var_1404) {
      if (gi_140 > 0.0) {
         if (100.0 * (g_global_var_1404 - AccountBalance()) / (g_global_var_1404 - gd_116) > gi_140) gi_1504 = TRUE;
      } else {
         if (gi_140 == 0.0) {
            if (100.0 * (g_global_var_1404 - AccountBalance()) / (g_global_var_1404 - gd_116) > MathRound(LotsPercent / 4)) gi_1504 = TRUE;
         } else gi_1504 = TRUE;
      }
   }
   return (ld_ret_0);
}

int TimeProfit() {
   int li_4 = TimeCurrent() - g_datetime_1596;
   if (g_str2int_552) {
      if (li_4 >= 60 * g_str2int_588) return (gi_592 - gi_1028 + gi_1048);
      if (li_4 >= 60 * g_str2int_580) return (gi_584 - gi_1028 + gi_1048);
      if (li_4 >= 60 * g_str2int_572) return (gi_576 - gi_1028 + gi_1048);
      if (li_4 >= 60 * g_str2int_564) return (gi_568 - gi_1028 + gi_1048);
      if (li_4 >= 60 * g_str2int_556) return (gi_560 - gi_1028 + gi_1048);
   }
   return (gi_288 - gi_1028 + gi_1048);
}

int isRSItoOpen(int ai_0) {
   bool li_ret_4 = FALSE;
   if (g_period_612 == 0 || g_period_624 == 0 || g_period_632 == 0) return (li_ret_4);
   double l_irsi_8 = iRSI(NULL, g_timeframe_608, g_period_612, g_applied_price_616, 0);
   double l_irsi_16 = iRSI(NULL, g_timeframe_620, g_period_624, g_applied_price_628, 0);
   double ld_24 = iMA(NULL, 0, g_period_632, 0, g_ma_method_644, g_applied_price_648, gi_652);
   double ld_32 = iMA(NULL, 0, g_period_632, 0, g_ma_method_644, g_applied_price_648, gi_652);
   double l_price_40 = Ask;
   double l_price_48 = Bid;
   if (g_str2int_656 == 1) l_price_40 = Bid;
   if (g_str2int_656 == 2) l_price_48 = Ask;
   if (g_str2int_468 == 1) {
      ld_24 = MathRound(ld_24 / Point) * Point;
      ld_32 = MathRound(ld_32 / Point) * Point;
   }
   if (g_str2int_468 == 2) {
      ld_24 = MathCeil(ld_24 / Point) * Point;
      ld_32 = MathFloor(ld_32 / Point) * Point;
   }
   if (g_str2int_468 == 3) {
      ld_24 = MathFloor(ld_24 / Point) * Point;
      ld_32 = MathCeil(ld_32 / Point) * Point;
   }
   if (l_irsi_8 < g_str2dbl_660 || l_irsi_16 < g_str2int_692 && ld_24 >= l_price_40 + gd_636 * Point)
      if (gi_1260 == 1 || gi_1260 == 99 && ai_0 == 0) li_ret_4 = TRUE;
   if (l_irsi_8 > g_str2dbl_668 || l_irsi_16 > g_str2int_696 && ld_32 <= l_price_48 - gd_636 * Point)
      if (gi_1260 == 0 || gi_1260 == 99 && ai_0 == 1) li_ret_4 = TRUE;
   if (l_irsi_8 < g_str2dbl_684 && l_irsi_8 > g_str2dbl_676 && g_str2int_604) gi_1260 = 99;
   return (li_ret_4);
}

bool isVolatilitytoTrade() {
   bool li_ret_0 = TRUE;
   if (g_str2int_708) {
      if (iOpen(Symbol(), PERIOD_M5, 0) >= Ask + gd_716 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 0) <= Bid - gd_716 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) >= Ask + gd_724 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) <= Bid - gd_724 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) >= Ask + gd_732 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) <= Bid - gd_732 * Point) li_ret_0 = FALSE;
   }
   if (!li_ret_0) {
      if (gi_712) g_bars_1272 = Bars;
   } else
      if (g_bars_1272 == Bars) li_ret_0 = FALSE;
   return (li_ret_0);
}

int ChannelProfit() {
   bool li_ret_0 = FALSE;
   int l_cmd_4 = OrderType();
   int li_8 = g_str2int_388;
   bool l_str2int_12 = g_str2int_432;
   int li_16 = gi_404;
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, li_8, 1)] + Point * li_16;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, li_8, 1)] - Point * li_16;
   if (gi_1044 == 10) {
      if (g_str2int_412 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathRound(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
      if (g_str2int_412 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathCeil(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
      if (g_str2int_412 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1044) * Point * gi_1044;
         ld_28 = MathFloor(ld_28 / Point / gi_1044) * Point * gi_1044;
      }
   }
   if (!l_str2int_12) {
      ld_20 += Point;
      ld_28 -= Point;
   }
   if (l_cmd_4 == OP_BUY) li_ret_0 = MathRound((ld_20 - OrderOpenPrice()) / Point);
   if (l_cmd_4 == OP_SELL) li_ret_0 = MathRound((OrderOpenPrice() - ld_28 - MarketInfo(Symbol(), MODE_SPREAD) * Point) / Point);
   return (li_ret_0);
}

double TrailingTP() {
   int li_8;
   int li_12;
   int li_unused_16;
   int li_20;
   int li_24;
   int li_28;
   double ld_32;
   double ld_40;
   double ld_48;
   double ld_ret_0 = 0.0;
   if (gi_160 != 0 && g_str2int_284 || g_str2int_388 != 0) {
      li_8 = MathRound(MarketInfo(Symbol(), MODE_STOPLEVEL));
      li_12 = MathRound(MarketInfo(Symbol(), MODE_FREEZELEVEL));
      li_unused_16 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
      li_20 = li_8 + li_12;
      if (!gi_168) {
         if (OrderTakeProfit() == 0.0) ld_ret_0 = 1.0 * gi_160;
      } else {
         if (g_str2int_388 != 0) li_28 = ChannelProfit();
         else li_28 = 999;
         if (g_str2int_284) {
            li_24 = TimeProfit();
            Comments(6, "", " NeedProfit=" + li_24 + " ChannelProfitValue=" + li_28, "");
            if (li_24 > li_28 && li_28 != 999) li_24 = li_28;
         } else li_24 = li_28;
         if (OrderType() == OP_BUY) {
            ld_40 = OrderOpenPrice() + li_24 * Point;
            ld_32 = Ask + li_8 * Point;
            if (OrderTakeProfit() == 0.0) {
               ld_48 = ld_40 + li_12 * Point;
               if (ld_48 < ld_32) ld_48 = ld_32;
               if (ld_48 < ld_40) ld_48 = ld_40;
               ld_ret_0 = (ld_48 - OrderOpenPrice()) / Point;
            } else
               if (MathRound(10000.0 * OrderTakeProfit()) - MathRound(10000.0 * ld_40) != 0.0 && MathRound(10000.0 * ld_40) > MathRound(10000.0 * ld_32)) ld_ret_0 = 1.0 * li_24;
         }
         if (OrderType() == OP_SELL) {
            ld_40 = OrderOpenPrice() - li_24 * Point;
            ld_32 = Bid - li_8 * Point;
            if (OrderTakeProfit() == 0.0) {
               ld_48 = ld_40 - li_12 * Point;
               if (ld_48 > ld_32) ld_48 = ld_32;
               if (ld_48 > ld_40) ld_48 = ld_40;
               ld_ret_0 = (OrderOpenPrice() - ld_48) / Point;
            } else
               if (MathRound(10000.0 * OrderTakeProfit()) - MathRound(10000.0 * ld_40) != 0.0 && MathRound(10000.0 * ld_40) < MathRound(10000.0 * ld_32)) ld_ret_0 = 1.0 * li_24;
         }
      }
   }
   return (ld_ret_0);
}

int deinit() {
   int l_file_8;
   double ld_12;
   double ld_20;
   string ls_0 = gs_1716;
   SaveCommentsFile("deinit");
   if (gi_988) Print("SysSpeed:  min=" + gi_1244 + "  average=" + DoubleToStr(gd_1284 / (1.0 * g_count_1252), 0) + "  max=" + gi_1248);
   if (!gi_992) return (0);
   if (IsOptimization() || IsTesting()) {
      GlobalVariableSet(g_var_name_1756, 0.0);
      ld_12 = MathRound(GetTickCount() / 100);
      ld_20 = GlobalVariableGet("OptCounter");
      if (gi_1572) ld_20 = 1.0;
      else ld_20 += 1.0;
      GlobalVariableSet("OptCounter", ld_20);
      GlobalVariableSet("LastOptTime", ld_12);
      if (gi_1572 && gi_1008) l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE, ';');
      else l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_8 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + ls_0 + ".csv, îøèáêà: ", GetLastError());
         return (0);
      }
      FileSeek(l_file_8, 0, SEEK_END);
      FillReportBuffer();
      if (gi_1572) {
         if (IsTesting() && !IsOptimization()) FileWrite(l_file_8, "Testing " + WindowExpertName() + " " + gs_1672 + " M" + Period());
         if (IsOptimization()) FileWrite(l_file_8, "Optimization " + WindowExpertName() + " " + gs_1672 + " M" + Period());
         FileWrite(l_file_8, "¹", "ValProfitTotal", "ValNetProfit", "ValNetLoss", "ValProfitFactor", "ValAverProfit", "ValAverLoss", "PntProfitTotal", "PntNetProfit", "PntNetLoss", "PntProfitFactor", "PntAverProfit", "PntAverLoss", "TrdTotal", "TrdNetProfit", "TrdNetLoss", "TrdProfitPercent", "TrdLossPercent", "TrdProfitFactor", "TrdSLNumber", "TrdTPNumber", "TrdHNumber");
      }
      FileWrite(l_file_8, DoubleToStr(ld_20, 0), " " + DoubleToStr(gda_1436[1], 2), " " + DoubleToStr(gda_1436[2], 2), " " + DoubleToStr(gda_1436[3], 2), " " + DoubleToStr(gda_1436[4], 2), " " +
         DoubleToStr(gda_1436[26], 2), " " + DoubleToStr(gda_1436[27], 2), " " + DoubleToStr(gda_1436[9], 0), " " + DoubleToStr(gda_1436[10], 0), " " + DoubleToStr(gda_1436[11], 0), " " + DoubleToStr(gda_1436[12], 2), " " + DoubleToStr(gda_1436[28], 1), " " + DoubleToStr(gda_1436[29], 1), " " + DoubleToStr(gda_1436[17], 0), " " + DoubleToStr(gda_1436[18], 0), " " + DoubleToStr(gda_1436[19], 0), " " + DoubleToStr(gda_1436[20], 1) + "%", " " + DoubleToStr(gda_1436[21], 1) + "%", " " + DoubleToStr(gda_1436[22], 2), " " + DoubleToStr(gda_1436[23], 0), " " + DoubleToStr(gda_1436[24], 0), " " + DoubleToStr(gda_1436[25], 0));
      FileClose(l_file_8);
   }
   return (0);
}

int FillReportBuffer() {
   int l_pos_0 = 0;
   double ld_12 = 0.0;
   int l_hist_total_8 = OrdersHistoryTotal();
   for (l_pos_0 = 0; l_pos_0 < l_hist_total_8; l_pos_0++) {
      OrderSelect(l_pos_0, SELECT_BY_POS, MODE_HISTORY);
      if (OrderSymbol() != Symbol() || OrderMagicNumber() != g_magic_1112) continue;
      gda_1436[17] += 1.0;
      gda_1436[1] += OrderProfit();
      if (ld_12 < gda_1436[1]) ld_12 = gda_1436[1];
      if (ld_12 > gda_1436[1])
         if (gda_1436[5] < ld_12 - MathAbs(gda_1436[1])) gda_1436[5] = ld_12 - MathAbs(gda_1436[1]);
      if (OrderProfit() >= 0.0) {
         gda_1436[9] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1436[10] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1436[15] < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1436[15] = MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1436[7] < OrderProfit()) gda_1436[7] = OrderProfit();
         gda_1436[2] += OrderProfit();
         gda_1436[18] += 1.0;
      } else {
         gda_1436[9] = gda_1436[9] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1436[11] = gda_1436[11] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (MathAbs(gda_1436[16]) < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1436[16] = -1.0 * MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1436[8] > OrderProfit()) gda_1436[8] = OrderProfit();
         gda_1436[3] += OrderProfit();
         gda_1436[19] += 1.0;
      }
   }
   if (gda_1436[17] != 0.0) gda_1436[20] = 100.0 * (gda_1436[18] / gda_1436[17]);
   if (gda_1436[17] != 0.0) gda_1436[21] = 100.0 * (gda_1436[19] / gda_1436[17]);
   if (gda_1436[3] != 0.0) gda_1436[4] = MathAbs(gda_1436[2] / gda_1436[3]);
   if (gda_1436[11] != 0.0) gda_1436[12] = MathAbs(gda_1436[10] / gda_1436[11]);
   if (gda_1436[19] != 0.0) gda_1436[22] = gda_1436[18] / gda_1436[19];
   if (gda_1436[18] > 0.0) gda_1436[26] = gda_1436[2] / gda_1436[18];
   if (gda_1436[19] > 0.0) gda_1436[27] = MathAbs(gda_1436[3] / gda_1436[19]);
   if (gda_1436[18] > 0.0) gda_1436[28] = gda_1436[10] / gda_1436[18];
   if (gda_1436[19] > 0.0) gda_1436[29] = MathAbs(gda_1436[11] / gda_1436[19]);
   return (0);
}

int SetGMTTime() {
   string ls_12;
   string l_name_20;
   string ls_28;
   int l_file_36;
   int l_str2time_80;
   string ls_84;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = FALSE;
   int li_48 = 99;
   int li_52 = 99;
   int l_str2int_56 = 99;
   int l_str2int_60 = 99;
   bool l_str2time_64 = FALSE;
   bool l_str2time_68 = FALSE;
   bool l_str2time_72 = FALSE;
   bool l_str2time_76 = FALSE;
   int l_count_40 = 21;
   while (l_count_40 > 0) {
      l_count_40--;
      if (l_count_40 == 0) ls_12 = "";
      else {
         if (l_count_40 > 9) ls_12 = l_count_40;
         else ls_12 = "0" + l_count_40;
      }
      l_name_20 = "gmtstd" + ls_12 + ".csv";
      l_file_36 = FileOpen(l_name_20, FILE_CSV|FILE_READ, ';');
      if (l_file_36 >= 0) break;
   }
   if (l_file_36 < 1) Comments(9, "SetGMTTime()", "Ôàéë íàñòðîåê ðàçíèö GMT íå çàãðóæåí, îøèáêà: " + PrintError(GetLastError()), "Can not load GMTSTD file, error: " + PrintError(GetLastError()));
   else {
      Comments(9, "SetGMTTime()", "Çàãðóæåí ôàéë íàñòðîåê ðàçíèö GMT (" + l_name_20 + ")", "GMTSTD file loaded (" + l_name_20 + ")");
      ls_12 = FileReadString(l_file_36);
      ls_12 = FileReadString(l_file_36);
      for (ls_12 = FileReadString(l_file_36); !FileIsEnding(l_file_36); ls_12 = FileReadString(l_file_36)) {
         ls_12 = FileReadString(l_file_36);
         if (AccountCompany() == ls_12) {
            l_str2int_56 = StrToInteger(FileReadString(l_file_36));
            l_str2int_60 = StrToInteger(FileReadString(l_file_36));
            li_4 = TRUE;
            break;
         }
         ls_12 = FileReadString(l_file_36);
      }
      FileClose(l_file_36);
   }
   int l_shift_44 = iBarShift(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, D'24.10.2008 03:00', TRUE);
   if (l_shift_44 >= 240) {
      for (l_count_40 = 2; l_count_40 < 14; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.10.24 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) > 1.562 && iLow(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) < 1.562) {
            l_str2time_64 = l_str2time_80;
            li_48 = l_count_40 - 8;
            break;
         }
      }
      if (l_str2time_64 == 0) {
      }
      for (l_count_40 = 0; l_count_40 < 12; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.10.27 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) > 1.55 && iLow(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) < 1.55) {
            l_str2time_68 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_68 == 0) {
      }
      for (l_count_40 = 6; l_count_40 < 18; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.11.03 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) > 1.607 && iLow(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) < 1.607) {
            l_str2time_72 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_72 == 0) {
      }
      for (l_count_40 = 8; l_count_40 < 20; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.11.05 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) > 1.61 && iLow(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, l_shift_44) < 1.61) {
            l_str2time_76 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_76 == 0) {
      }
      if (TimeHour(l_str2time_68) - TimeHour(l_str2time_64) == -2) {
         li_52 = 0;
         li_8 = TRUE;
      } else {
         if (TimeHour(l_str2time_68) - TimeHour(l_str2time_64) == -1) {
            if (TimeHour(l_str2time_72) - TimeHour(l_str2time_68) == 5) {
               li_52 = 1;
               li_8 = TRUE;
            } else {
               if (TimeHour(l_str2time_72) - TimeHour(l_str2time_68) == 6) {
                  if (TimeHour(l_str2time_76) - TimeHour(l_str2time_72) == 2) {
                     li_52 = 2;
                     li_8 = TRUE;
                  } else {
                     if (TimeHour(l_str2time_76) - TimeHour(l_str2time_72) == 1) {
                        li_52 = 3;
                        li_8 = TRUE;
                     }
                  }
               }
            }
         }
      }
   }
   if (UseAutoTimeSettings) {
      ls_84 = "";
      if (li_4) {
         TimeZone = l_str2int_56;
         SWChangeMode = l_str2int_60;
         if (TimeZone >= 0) ls_84 = "+";
         Comments(9, "SetGMTTime()", "Óñòàíîâëåíû çàãðóæåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded times settings: GMT" + ls_84 +
            TimeZone + " (SWCM" + SWChangeMode + ")");
      } else {
         if (li_8) {
            TimeZone = li_48;
            SWChangeMode = li_52;
            if (TimeZone >= 0) ls_84 = "+";
            Comments(9, "SetGMTTime()", "Óñòàíîâëåíû ðàñ÷åòíûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Calculated times settings: GMT" + ls_84 +
               TimeZone + " (SWCM" + SWChangeMode + ")");
         } else {
            if (TimeZone >= 0) ls_84 = "+";
            Comments(9, "SetGMTTime()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded default times settings: GMT" +
               ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")");
         }
      }
   } else {
      if (TimeZone >= 0) ls_84 = "+";
      Comments(9, "SetGMTTime()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded default times settings: GMT" +
         ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")");
   }
   return (li_ret_0);
}

int LoadSettings() {
   int l_file_12;
   string ls_16;
   string l_name_24;
   bool li_ret_0 = FALSE;
   if (!gi_148) return (20);
   int li_4 = 21;
   while (li_4 > 0) {
      li_4--;
      if (li_4 == 0) ls_16 = "";
      else {
         if (li_4 > 9) ls_16 = li_4;
         else ls_16 = "0" + li_4;
      }
      l_name_24 = "settings" + ls_16 + ".csv";
      l_file_12 = FileOpen(l_name_24, FILE_CSV|FILE_READ, ';');
      if (l_file_12 >= 0) break;
   }
   if (l_file_12 < 1) {
      gi_148 = FALSE;
      return (20);
   }
   Comments(9, "LoadSettings()", "Çàãðóæåí ôàéë íàñòðîåê ðåæèìîâ (" + l_name_24 + ")", "Load settings file (" + l_name_24 + ")");
   int li_8 = -1;
   while (!FileIsLineEnding(l_file_12)) {
      li_8++;
      gsa_1696[0][li_8] = FileReadString(l_file_12);
   }
   li_ret_0 = li_8;
   li_4 = 1;
   li_8 = -1;
   while (!FileIsEnding(l_file_12)) {
      li_8++;
      gsa_1696[li_4][li_8] = FileReadString(l_file_12);
      if (li_8 == li_ret_0) {
         li_8 = -1;
         li_4++;
      }
   }
   FileClose(l_file_12);
   return (li_ret_0);
}

int SetSettings(int ai_0) {
   bool li_ret_4 = FALSE;
   int li_8 = -1;
   if (ai_0 == 0) return (0);
   if (ai_0 > gi_1264) {
      Comments(9, "SetMode()", "Îøèáêà óñòàíîâêè íàñòðîåê: íåñóùåñòâóþèé ðåæèì", "Error load settings: unknown settings");
      return (0);
   }
   li_8++;
   gs_1664 = gsa_1696[li_8][ai_0];
   li_8++;
   g_str2int_152 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (gi_156 == 0) gi_156 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   if (gi_160 == 0) gi_160 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_172 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_176 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_180 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_196 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_200 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_204 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_208 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_212 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_216 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   gi_220 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_224 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_236 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (gi_252 == 0) gi_252 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   if (gi_256 == 0) gi_256 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_240 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_244 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_260 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_264 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_276 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_280 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_284 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_288 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_292 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_296 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gd_308 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_316 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_320 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (gd_332 == 0.0) gd_332 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   if (gd_332 == 0.0) g_str2int_340 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (gd_344 == 0.0) gd_344 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   if (gd_344 == 0.0) g_str2int_352 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (gd_332 == 0.0) g_str2int_356 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (gd_344 == 0.0) g_str2int_360 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_372 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_376 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (g_str2int_380 == 0) g_str2int_380 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_384 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   if (g_str2int_388 == 0) g_str2int_388 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_392 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_396 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   gi_400 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   gi_404 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   gi_408 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_412 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_416 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_420 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_424 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_428 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_432 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_436 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_448 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gd_452 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_460 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_464 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_468 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_480 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gd_484 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_492 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_496 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_500 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gd_512 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_520 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_524 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gd_528 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_536 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_540 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_552 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_556 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_560 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_564 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_568 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_572 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_576 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_580 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_584 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_588 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_592 = StrToInteger(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_str2int_604 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_timeframe_608 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_period_612 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_applied_price_616 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_timeframe_620 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_period_624 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_applied_price_628 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_period_632 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gd_636 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   g_ma_method_644 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_applied_price_648 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gi_652 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_656 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2dbl_660 = StrToDouble(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2dbl_668 = StrToDouble(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2dbl_676 = StrToDouble(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2dbl_684 = StrToDouble(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_692 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_696 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   g_str2int_708 = StrToInteger(gsa_1696[li_8][ai_0]);
   li_8++;
   gd_716 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   gd_724 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   li_8++;
   gd_732 = StrToDouble(gsa_1696[li_8][ai_0]) * gi_1044;
   if (ai_0 > 10) {
      gi_248 = TRUE;
      if (gs_1672 == "EURGBP") {
         gi_156 = 120 * gi_1044;
         gi_252 = 3 * gi_1044;
         gi_256 = 5 * gi_1044;
      }
   }
   if (!g_str2int_372) {
      g_str2int_380 = g_str2int_376;
      g_str2int_388 = g_str2int_376;
      g_str2int_392 = g_str2int_376;
   }
   Comments(9, "SetMode()", "Óñòàíîâëåíû íàñòðîéêè: " + gs_1664, "Load settings: " + gs_1664);
   return (li_ret_4);
}

int MakeTimeString() {
   bool li_24;
   bool li_ret_4 = FALSE;
   if (!gi_936 || !ShowTimes) return (li_ret_4);
   gs_1632 = "00 " + "01 " + "02 " + "03 " + "04 " + "05 " + "06 " + "07 " + "08 " + "09 " + "10 " + "11 " + "12 " + "13 " + "14 " + "15 " + "16 " + "17 " + "18 " + "19 " + "20 " + "21 " + "22 " + "23 " + "24 " 
   + "\n";
   int li_28 = TimeCurrent() - 86400 * DayOfWeek() - 3600 * Hour() - 60 * Minute() - Seconds() + 86400 + 1800;
   for (int li_8 = 1; li_8 < 6; li_8++) {
      gs_1632 = gs_1632 + " |";
      for (int l_count_20 = 0; l_count_20 < 24; l_count_20++) {
         for (int li_0 = 0; li_0 < 10; li_0 += 2) {
            li_24 = FALSE;
            if (isTimetoTrade(li_28)) {
               li_24 = TRUE;
               break;
            }
         }
         if (li_24) {
            if (isNoNews(li_28, 0)) gs_1632 = gs_1632 + ":::|";
            else gs_1632 = gs_1632 + "···|";
         } else gs_1632 = gs_1632 + "   |";
         li_28 += 3600;
      }
      gs_1632 = gs_1632 
      + "\n";
   }
   return (li_ret_4);
}

int MakeInitString() {
   if (!gi_936) return (0);
   gs_1624 = "";
   string ls_0 = " GMT";
   string ls_8 = "";
   if (TimeZone >= 0) ls_0 = ls_0 + "+" + TimeZone;
   else ls_0 = ls_0 + "" + TimeZone;
   if (gi_1268 > 0) ls_0 = ls_0 + " (Corr+" + gi_1268 + ")";
   if (gi_1268 < 0) ls_0 = ls_0 + " (Corr" + gi_1268 + ")";
   if (gi_1268 == 0) ls_0 = ls_0 + " (Corr " + gi_1268 + ")";
   gs_1624 = gs_1624 + AccountCompany() + " (" + AccountNumber() + "): " + AccountName() + " (magic " + ((g_magic_1112 - gi_1152)) + "+" + gi_1152 + ")" + ls_0 + ls_8 
   + "\n";
   if (gi_840 && !gi_836) {
      gs_1624 = gs_1624 + "Ðåæèì ïåðåäà÷è äàííûõ" 
      + "\n";
   }
   if (!gi_840 && gi_836) {
      gs_1624 = gs_1624 + "Ðåæèì ïðèåìà äàííûõ" 
      + "\n";
   }
   return (0);
}

int Comments(int ai_0, string as_4, string as_12, string as_20) {
   if (Language == "eng") as_12 = as_20;
   bool li_ret_28 = FALSE;
   string ls_40 = "";
   if (ai_0 == 9) {
      if (gi_948) as_12 = as_4 + ": " + as_12;
      if (gi_968) {
         ls_40 = ls_40 + TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ";
         if (gi_972) ls_40 = ls_40 + "euronis";
         if (gi_976) ls_40 = ls_40 + "(" + g_magic_1112 + ")";
         if (gi_972 || gi_976) ls_40 = ls_40 + ": ";
         Print(ls_40 + as_12);
      }
      ls_40 = "";
      if (gi_936) {
         if (ShowTimes) ls_40 = ls_40 + gs_1632;
         if (ShowInformation) {
            g_count_1240++;
            if (g_count_1240 > InformationStringNumber) {
               g_count_1240 = InformationStringNumber;
               if (InformationStringNumber > 1) for (int l_index_32 = 0; l_index_32 < InformationStringNumber - 1; l_index_32++) gsa_1692[l_index_32] = gsa_1692[l_index_32 + 1];
            }
            gsa_1692[g_count_1240 - 1] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
            for (l_index_32 = 0; l_index_32 < InformationStringNumber; l_index_32++) {
               ls_40 = ls_40 + gsa_1692[l_index_32];
               if (l_index_32 < InformationStringNumber - 1) {
                  ls_40 = ls_40 
                  + "\n";
               }
            }
         }
         gs_1656 = ls_40;
         if (gi_952) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1688[0] 
               + "\n" 
               + gsa_1688[1] 
               + "\n" 
               + gsa_1688[2] 
               + "\n" 
               + gsa_1688[3] 
               + "\n" 
               + gsa_1688[4] 
               + "\n" 
               + gsa_1688[5] 
               + "\n" 
            + gsa_1688[6];
         }
         Comment(gs_1624 + gs_1732 + ls_40);
      }
      if (gi_964) {
         for (l_index_32 = 0; l_index_32 < 20; l_index_32++) {
            if (gsa_1704[l_index_32] == "") {
               gsa_1704[l_index_32] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
               break;
            }
         }
      }
   }
   if (ai_0 == 0 || ai_0 == 1 || ai_0 == 2 || ai_0 == 3 || ai_0 == 4 || ai_0 == 5 || ai_0 == 6) {
      gsa_1688[ai_0] = as_12;
      if (gi_936) {
         ls_40 = gs_1656;
         if (gi_952) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1688[0] 
               + "\n" 
               + gsa_1688[1] 
               + "\n" 
               + gsa_1688[2] 
               + "\n" 
               + gsa_1688[3] 
               + "\n" 
               + gsa_1688[4] 
               + "\n" 
               + gsa_1688[5] 
               + "\n" 
            + gsa_1688[6];
         }
         Comment(gs_1624 + gs_1732 + ls_40);
      }
   }
   if (ai_0 == 7) {
      if (gi_936) {
         ls_40 = gs_1656;
         if (gi_952) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1688[0] 
               + "\n" 
               + gsa_1688[1] 
               + "\n" 
               + gsa_1688[2] 
               + "\n" 
               + gsa_1688[3] 
               + "\n" 
               + gsa_1688[4] 
               + "\n" 
               + gsa_1688[5] 
               + "\n" 
            + gsa_1688[6];
         }
         Comment(gs_1624 + gs_1732 + ls_40);
      }
   }
   return (li_ret_28);
}

string PrintError(int ai_0) {
   if (ai_0 > 4299 || ai_0 < 0) ai_0 = 4299;
   string ls_ret_4 = ai_0 + " " + gsa_1700[ai_0];
   return (ls_ret_4);
}

void InitErrorArray() {
   if (Language == "eng") {
      gsa_1700[0] = "No error returned";
      gsa_1700[1] = "No error returned, but the result is unknown";
      gsa_1700[2] = "Common error";
      gsa_1700[3] = "Invalid trade parameters";
      gsa_1700[4] = "Trade server is busy";
      gsa_1700[5] = "Old version of the client terminal";
      gsa_1700[6] = "No connection with trade server";
      gsa_1700[7] = "Not enough rights";
      gsa_1700[8] = "Too frequent requests";
      gsa_1700[9] = "Malfunctional trade operation";
      gsa_1700[64] = "Account disabled";
      gsa_1700[65] = "Invalid account";
      gsa_1700[128] = "Trade timeout";
      gsa_1700[129] = "Invalid price";
      gsa_1700[130] = "Invalid stops";
      gsa_1700[131] = "Invalid trade volume";
      gsa_1700[132] = "Market is closed";
      gsa_1700[133] = "Trade is disabled";
      gsa_1700[134] = "Not enough money";
      gsa_1700[135] = "Price changed";
      gsa_1700[136] = "Off quotes";
      gsa_1700[137] = "Broker is busy";
      gsa_1700[138] = "Requote";
      gsa_1700[139] = "Order is locked";
      gsa_1700[140] = "Long positions only allowed";
      gsa_1700[141] = "Too many requests";
      gsa_1700[145] = "Modification denied because an order is too close to market";
      gsa_1700[146] = "Trade context is busy";
      gsa_1700[147] = "Expirations are denied by broker";
      gsa_1700[148] = "The amount of opened and pending orders has reached the limit set by a broker";
      gsa_1700[4000] = "No error";
      gsa_1700[4001] = "Wrong function pointer";
      gsa_1700[4002] = "Array index is out of range";
      gsa_1700[4003] = "No memory for function call stack";
      gsa_1700[4004] = "Recursive stack overflow";
      gsa_1700[4005] = "Íà ñòåêå íåò ïàìÿòè äëÿ ïåðåäà÷è ïàðàìåòðîâ";
      gsa_1700[4006] = "Not enough stack for parameter";
      gsa_1700[4007] = "No memory for parameter string";
      gsa_1700[4008] = "Not initialized string";
      gsa_1700[4009] = "Not initialized string in an array";
      gsa_1700[4010] = "No memory for an array string";
      gsa_1700[4011] = "Too long string";
      gsa_1700[4012] = "Remainder from zero divide";
      gsa_1700[4013] = "Zero divide";
      gsa_1700[4014] = "Unknown command";
      gsa_1700[4015] = "Wrong jump";
      gsa_1700[4016] = "Not initialized array";
      gsa_1700[4017] = "DLL calls are not allowed";
      gsa_1700[4018] = "Cannot load library";
      gsa_1700[4019] = "Cannot call function";
      gsa_1700[4020] = "EA function calls are not allowed";
      gsa_1700[4021] = "Not enough memory for a string returned from a function";
      gsa_1700[4022] = "System is busy";
      gsa_1700[4050] = "Invalid function parameters count";
      gsa_1700[4051] = "Invalid function parameter value";
      gsa_1700[4052] = "String function internal error";
      gsa_1700[4053] = "Some array error";
      gsa_1700[4054] = "Incorrect series array using";
      gsa_1700[4055] = "Custom indicator error";
      gsa_1700[4056] = "Arrays are incompatible";
      gsa_1700[4057] = "Global variables processing error";
      gsa_1700[4058] = "Global variable not found";
      gsa_1700[4059] = "Function is not allowed in testing mode";
      gsa_1700[4060] = "Function is not confirmed";
      gsa_1700[4061] = "Mail sending error";
      gsa_1700[4062] = "String parameter expected";
      gsa_1700[4063] = "Integer parameter expected";
      gsa_1700[4064] = "Double parameter expected";
      gsa_1700[4065] = "Array as parameter expected";
      gsa_1700[4066] = "Requested history data in updating state";
      gsa_1700[4067] = "Some error in trade operation execution";
      gsa_1700[4099] = "End of a file";
      gsa_1700[4100] = "Some file error";
      gsa_1700[4101] = "Wrong file name";
      gsa_1700[4102] = "Too many opened files";
      gsa_1700[4103] = "Cannot open file";
      gsa_1700[4104] = "Incompatible access to a file";
      gsa_1700[4105] = "No order selected";
      gsa_1700[4106] = "Unknown symbol";
      gsa_1700[4107] = "Invalid price";
      gsa_1700[4108] = "Invalid ticket";
      gsa_1700[4109] = "Trade is not allowed";
      gsa_1700[4110] = "Longs are not allowed";
      gsa_1700[4111] = "Shorts are not allowed";
      gsa_1700[4200] = "Object already exists";
      gsa_1700[4201] = "Unknown object property";
      gsa_1700[4202] = "Object does not exist";
      gsa_1700[4203] = "Unknown object type";
      gsa_1700[4204] = "No object name";
      gsa_1700[4205] = "Object coordinates error";
      gsa_1700[4206] = "No specified subwindow";
      gsa_1700[4207] = "Some error in object operation";
      gsa_1700[4299] = "Error code is out of range";
      return;
   }
   gsa_1700[0] = "Íåò îøèáêè";
   gsa_1700[1] = "Íåò îøèáêè, íî ðåçóëüòàò íåèçâåñòåí";
   gsa_1700[2] = "Îáùàÿ îøèáêà";
   gsa_1700[3] = "Íåïðàâèëüíûå ïàðàìåòðû";
   gsa_1700[4] = "Òîðãîâûé ñåðâåð çàíÿò";
   gsa_1700[5] = "Ñòàðàÿ âåðñèÿ êëèåíòñêîãî òåðìèíàëà";
   gsa_1700[6] = "Íåò ñâÿçè ñ òîðãîâûì ñåðâåðîì";
   gsa_1700[7] = "Íåäîñòàòî÷íî ïðàâ";
   gsa_1700[8] = "Ñëèøêîì ÷àñòûå çàïðîñû";
   gsa_1700[9] = "Íåäîïóñòèìàÿ îïåðàöèÿ íàðóøàþùàÿ ôóíêöèîíèðîâàíèå ñåðâåðà";
   gsa_1700[64] = "Ñ÷åò çàáëîêèðîâàí";
   gsa_1700[65] = "Íåïðàâèëüíûé íîìåð ñ÷åòà";
   gsa_1700[128] = "Èñòåê ñðîê îæèäàíèÿ ñîâåðøåíèÿ ñäåëêè";
   gsa_1700[129] = "Íåïðàâèëüíàÿ öåíà";
   gsa_1700[130] = "Íåïðàâèëüíûå ñòîïû";
   gsa_1700[131] = "Íåïðàâèëüíûé îáúåì";
   gsa_1700[132] = "Ðûíîê çàêðûò";
   gsa_1700[133] = "Òîðãîâëÿ çàïðåùåíà";
   gsa_1700[134] = "Íåäîñòàòî÷íî äåíåã äëÿ ñîâåðøåíèÿ îïåðàöèè";
   gsa_1700[135] = "Öåíà èçìåíèëàñü";
   gsa_1700[136] = "Íåò öåí";
   gsa_1700[137] = "Áðîêåð çàíÿò";
   gsa_1700[138] = "Íîâûå öåíû";
   gsa_1700[139] = "Îðäåð çàáëîêèðîâàí è óæå îáðàáàòûâàåòñÿ";
   gsa_1700[140] = "Ðàçðåøåíà òîëüêî ïîêóïêà";
   gsa_1700[141] = "Ñëèøêîì ìíîãî çàïðîñîâ";
   gsa_1700[145] = "Ìîäèôèêàöèÿ çàïðåùåíà, òàê êàê îðäåð ñëèøêîì áëèçîê ê ðûíêó";
   gsa_1700[146] = "Ïîäñèñòåìà òîðãîâëè çàíÿòà";
   gsa_1700[147] = "Èñïîëüçîâàíèå äàòû èñòå÷åíèÿ îðäåðà çàïðåùåíî áðîêåðîì";
   gsa_1700[148] = "Êîëè÷åñòâî îòêðûòûõ è îòëîæåííûõ îðäåðîâ äîñòèãëî ïðåäåëà, óñòàíîâëåííîãî áðîêåðîì";
   gsa_1700[4000] = "Íåò îøèáêè";
   gsa_1700[4001] = "Íåïðàâèëüíûé óêàçàòåëü ôóíêöèè";
   gsa_1700[4002] = "Èíäåêñ ìàññèâà - âíå äèàïàçîíà";
   gsa_1700[4003] = "Íåò ïàìÿòè äëÿ ñòåêà ôóíêöèé";
   gsa_1700[4004] = "Ïåðåïîëíåíèå ñòåêà ïîñëå ðåêóðñèâíîãî âûçîâà";
   gsa_1700[4005] = "Íà ñòåêå íåò ïàìÿòè äëÿ ïåðåäà÷è ïàðàìåòðîâ";
   gsa_1700[4006] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ïàðàìåòðà";
   gsa_1700[4007] = "Íåò ïàìÿòè äëÿ âðåìåííîé ñòðîêè";
   gsa_1700[4008] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà";
   gsa_1700[4009] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà â ìàññèâå";
   gsa_1700[4010] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ìàññèâà";
   gsa_1700[4011] = "Ñëèøêîì äëèííàÿ ñòðîêà";
   gsa_1700[4012] = "Îñòàòîê îò äåëåíèÿ íà íîëü";
   gsa_1700[4013] = "Äåëåíèå íà íîëü";
   gsa_1700[4014] = "Íåèçâåñòíàÿ êîìàíäà";
   gsa_1700[4015] = "Íåïðàâèëüíûé ïåðåõîä";
   gsa_1700[4016] = "Íåèíèöèàëèçèðîâàííûé ìàññèâ";
   gsa_1700[4017] = "Âûçîâû DLL íå ðàçðåøåíû";
   gsa_1700[4018] = "Íåâîçìîæíî çàãðóçèòü áèáëèîòåêó";
   gsa_1700[4019] = "Íåâîçìîæíî âûçâàòü ôóíêöèþ";
   gsa_1700[4020] = "Âûçîâû âíåøíèõ áèáëèîòå÷íûõ ôóíêöèé íå ðàçðåøåíû";
   gsa_1700[4021] = "Íåäîñòàòî÷íî ïàìÿòè äëÿ ñòðîêè, âîçâðàùàåìîé èç ôóíêöèè";
   gsa_1700[4022] = "Ñèñòåìà çàíÿòà";
   gsa_1700[4050] = "Íåïðàâèëüíîå êîëè÷åñòâî ïàðàìåòðîâ ôóíêöèè";
   gsa_1700[4051] = "Íåäîïóñòèìîå çíà÷åíèå ïàðàìåòðà ôóíêöèè";
   gsa_1700[4052] = "Âíóòðåííÿÿ îøèáêà ñòðîêîâîé ôóíêöèè";
   gsa_1700[4053] = "Îøèáêà ìàññèâà";
   gsa_1700[4054] = "Íåïðàâèëüíîå èñïîëüçîâàíèå ìàññèâà-òàéìñåðèè";
   gsa_1700[4055] = "Îøèáêà ïîëüçîâàòåëüñêîãî èíäèêàòîðà";
   gsa_1700[4056] = "Ìàññèâû íåñîâìåñòèìû";
   gsa_1700[4057] = "Îøèáêà îáðàáîòêè ãëîáàëüíûåõ ïåðåìåííûõ";
   gsa_1700[4058] = "Ãëîáàëüíàÿ ïåðåìåííàÿ íå îáíàðóæåíà";
   gsa_1700[4059] = "Ôóíêöèÿ íå ðàçðåøåíà â òåñòîâîì ðåæèìå";
   gsa_1700[4060] = "Ôóíêöèÿ íå ðàçðåøåíà";
   gsa_1700[4061] = "Îøèáêà îòïðàâêè ïî÷òû";
   gsa_1700[4062] = "Îæèäàåòñÿ ïàðàìåòð òèïà string";
   gsa_1700[4063] = "Îæèäàåòñÿ ïàðàìåòð òèïà integer";
   gsa_1700[4064] = "Îæèäàåòñÿ ïàðàìåòð òèïà double";
   gsa_1700[4065] = "Â êà÷åñòâå ïàðàìåòðà îæèäàåòñÿ ìàññèâ";
   gsa_1700[4066] = "Çàïðîøåííûå èñòîðè÷åñêèå äàííûå â ñîñòîÿíèè îáíîâëåíèÿ";
   gsa_1700[4067] = "Îøèáêà ïðè âûïîëíåíèè òîðãîâîé îïåðàöèè";
   gsa_1700[4099] = "Êîíåö ôàéëà";
   gsa_1700[4100] = "Îøèáêà ïðè ðàáîòå ñ ôàéëîì";
   gsa_1700[4101] = "Íåïðàâèëüíîå èìÿ ôàéëà";
   gsa_1700[4102] = "Ñëèøêîì ìíîãî îòêðûòûõ ôàéëîâ";
   gsa_1700[4103] = "Íåâîçìîæíî îòêðûòü ôàéë";
   gsa_1700[4104] = "Íåñîâìåñòèìûé ðåæèì äîñòóïà ê ôàéëó";
   gsa_1700[4105] = "Íè îäèí îðäåð íå âûáðàí";
   gsa_1700[4106] = "Íåèçâåñòíûé ñèìâîë";
   gsa_1700[4107] = "Íåïðàâèëüíûé ïàðàìåòð öåíû äëÿ òîðãîâîé ôóíêöèè";
   gsa_1700[4108] = "Íåâåðíûé íîìåð òèêåòà";
   gsa_1700[4109] = "Òîðãîâëÿ íå ðàçðåøåíà. Íåîáõîäèìî âêëþ÷èòü îïöèþ Ðàçðåøèòü ñîâåòíèêó òîðãîâàòü â ñâîéñòâàõ ýêñïåðòà";
   gsa_1700[4110] = "Äëèííûå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1700[4111] = "Êîðîòêèå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1700[4200] = "Îáúåêò óæå ñóùåñòâóåò";
   gsa_1700[4201] = "Çàïðîøåíî íåèçâåñòíîå ñâîéñòâî îáúåêòà";
   gsa_1700[4202] = "Îáúåêò íå ñóùåñòâóåò";
   gsa_1700[4203] = "Íåèçâåñòíûé òèï îáúåêòà";
   gsa_1700[4204] = "Íåò èìåíè îáúåêòà";
   gsa_1700[4205] = "Îøèáêà êîîðäèíàò îáúåêòà";
   gsa_1700[4206] = "Íå íàéäåíî óêàçàííîå ïîäîêíî";
   gsa_1700[4207] = "Îøèáêà ïðè ðàáîòå ñ îáúåêòîì";
   gsa_1700[4299] = "Êîä îøèáêè âíå äèàïàçîíà";
}

int FillTimeBuffer() {
   int lia_0[500][10] = {0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 23, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 21, 24, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 23, 24, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 21, 24, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 17, 17, 21, 24, 24, 0, 0, 0, 0, 7, 17, 17, 21, 24, 24, 0, 0, 0, 0, 7, 17, 17, 21, 24, 24, 0, 0, 0, 0, 7, 17, 17, 21, 24, 24, 0, 0, 0, 0, 7, 17, 17, 20, 0, 0, 0, 0, 0, 0, 10, 17, 17, 21, 24, 24, 0, 0, 0, 0, 10, 17, 17, 21, 24, 24, 0, 0, 0, 0, 10, 17, 17, 21, 24, 24, 0, 0, 0, 0, 10, 17, 17, 21, 24, 24, 0, 0, 0, 0, 10, 17, 17, 20, 0, 0, 0, 0, 0, 0, 7, 14, 17, 21, 24, 24, 0, 0, 0, 0, 7, 14, 17, 21, 24, 24, 0, 0, 0, 0, 7, 14, 17, 21, 24, 24, 0, 0, 0, 0, 7, 14, 17, 21, 24, 24, 0, 0, 0, 0, 7, 14, 17, 20, 0, 0, 0, 0, 0, 0, 10, 13, 17, 21, 24, 24, 0, 0, 0, 0, 10, 13, 17, 21, 24, 24, 0, 0, 0, 0, 10, 13, 17, 21, 24, 24, 0, 0, 0, 0, 10, 13, 17, 21, 24, 24, 0, 0, 0, 0, 10, 13, 17, 20, 0, 0, 0, 0, 0, 0, 10, 12, 17, 19, 24, 24, 0, 0, 0, 0, 10, 12, 17, 19, 24, 24, 0, 0, 0, 0, 10, 12, 17, 19, 24, 24, 0, 0, 0, 0, 10, 12, 17, 19, 24, 24, 0, 0, 0, 0, 10, 12, 17, 19, 0, 0, 0, 0, 0, 0, 0, 0, 17, 19, 24, 24, 0, 0, 0, 0, 0, 0, 17, 19, 24, 24, 0, 0, 0, 0, 0, 0, 17, 19, 24, 24, 0, 0, 0, 0, 0, 0, 17, 19, 24, 24, 0, 0, 0, 0, 0, 0, 17, 19, 0, 0};
   ArrayCopy(gia_1280, lia_0, 0, 0, WHOLE_ARRAY);
   return (0);
}

bool SaveFileOrder(int ai_unused_0, int ai_4, int ai_8, double ad_12, double ad_20, double ad_28, double ad_36) {
   bool li_ret_48 = FALSE;
   string l_name_52 = gs_1672 + ".csv";
   int l_file_44 = FileOpen(l_name_52, FILE_CSV|FILE_WRITE, ';');
   if (l_file_44 < 1) {
      Comments(9, "SaveFileOrder()", "Ôàéë " + l_name_52 + " íå ñîçäàí, îøèáêà :" + PrintError(GetLastError()), "Can not create file " + l_name_52 + ", error :" + PrintError(GetLastError()));
      return (li_ret_48);
   }
   FileWrite(l_file_44, ai_4, ad_12, ai_8, ad_20, DoubleToStr(ad_28, Digits), DoubleToStr(ad_36, Digits));
   FileClose(l_file_44);
   li_ret_48 = TRUE;
   if (ai_4 == 0) {
      Comments(9, "SaveFileOrder()", "BUY     " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "BUY     " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   if (ai_4 == 1) {
      Comments(9, "SaveFileOrder()", "SELL    " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "SELL    " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   if (ai_4 == 98) {
      Comments(9, "SaveFileOrder()", "CLOSE   " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "CLOSE   " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   if (ai_4 == 99) {
      Comments(9, "SaveFileOrder()", "NONE    " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "NONE    " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   g_count_1120++;
   if (g_count_1120 > gi_1172) g_count_1120 = 0;
   int l_datetime_60 = TimeLocal();
   if (gi_844) {
      li_ret_48 = FALSE;
      while (TimeLocal() - l_datetime_60 < gi_848) {
         if (!isFile()) {
            li_ret_48 = TRUE;
            break;
         }
         Sleep(25);
      }
      if (!li_ret_48) {
         if (gi_860) {
            if (FileErase(l_name_52)) Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è î÷èùåí", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è î÷èùåí");
            else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü");
         } else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà");
      }
   }
   l_datetime_60 = TimeLocal();
   if (gi_852) {
      li_ret_48 = FALSE;
      while (TimeLocal() - l_datetime_60 < gi_856) {
         if (ai_4 == 1 && isOrderSell()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 0 && isOrderBuy()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 98 && !isOrderSell() && !isOrderBuy()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 99) {
            li_ret_48 = TRUE;
            break;
         }
         Sleep(25);
      }
      if (!li_ret_48) {
         if (gi_860) {
            if (FileErase(l_name_52)) Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è î÷èùåí", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è î÷èùåí");
            else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü");
         } else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà");
      }
   }
   return (li_ret_48);
}

bool isFile() {
   bool li_ret_12 = FALSE;
   string l_name_4 = gs_1672 + ".csv";
   int l_file_0 = FileOpen(l_name_4, FILE_CSV|FILE_WRITE|FILE_READ);
   if (l_file_0 > 0 && FileSize(l_file_0) > 0) {
      FileClose(l_file_0);
      li_ret_12 = TRUE;
   }
   return (li_ret_12);
}

bool FileErase(string a_name_0) {
   bool li_ret_12 = FALSE;
   int l_file_8 = FileOpen(a_name_0, FILE_CSV|FILE_WRITE);
   if (l_file_8 > 0) {
      FileClose(l_file_8);
      li_ret_12 = TRUE;
   }
   return (li_ret_12);
}

bool ReadFileOrder() {
   int l_file_0;
   string ls_8;
   string l_name_16;
   bool li_ret_24 = FALSE;
   if (gi_1468) {
      for (int l_count_4 = 0; l_count_4 < gi_1172 + 1; l_count_4++) {
         l_name_16 = gs_1672 + ((gi_932 + Period())) + "_" + l_count_4 + ".csv";
         l_file_0 = FileOpen(l_name_16, FILE_CSV|FILE_READ);
         if (!(l_file_0 < 0)) {
            g_count_1116 = l_count_4;
            gi_1468 = FALSE;
            FileClose(l_file_0);
            break;
         }
      }
   }
   if (gi_1468) return (li_ret_24);
   l_name_16 = gs_1672 + ((gi_932 + Period())) + "_" + g_count_1116 + ".csv";
   l_file_0 = FileOpen(l_name_16, FILE_CSV|FILE_READ);
   if (l_file_0 > 0) {
      ls_8 = FileReadString(l_file_0);
      gda_1428[0][0] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1428[0][1] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1428[0][2] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1428[0][3] = StrToDouble(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1428[0][4] = StrToDouble(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1428[0][5] = StrToDouble(ls_8);
      FileClose(l_file_0);
      FileDelete(l_name_16);
      g_count_1116++;
      if (g_count_1116 > gi_1172) g_count_1116 = 0;
      Comments(9, "ReadFileOrder()", "Ïîñëåäíèé çàãðóæåííûé ôàéë " + l_name_16, "Ïîñëåäíèé çàãðóæåííûé ôàéë " + l_name_16);
      li_ret_24 = TRUE;
   }
   return (TRUE);
}

int CheckReceiveBuffer() {
   bool li_ret_0 = FALSE;
   if (gda_1428[0][1] != 99.0) {
      if (gda_1428[0][1] == 98.0) {
         if (gda_1432[0][3] != 0.0 && gda_1428[0][2] == gda_1432[0][2]) {
            gda_1432[0][1] = 98;
            gda_1432[0][5] = gda_1428[0][3];
            li_ret_0 = TRUE;
         }
      }
      if (gda_1428[0][1] == 0.0 || gda_1428[0][1] == 1.0 && gda_1432[0][1] == 99.0) {
         gda_1432[0][0] = gda_1428[0][0];
         gda_1432[0][1] = gda_1428[0][1];
         gda_1432[0][2] = gda_1428[0][2];
         gda_1432[0][4] = gda_1428[0][3];
         gda_1432[0][6] = gda_1428[0][4];
         gda_1432[0][7] = gda_1428[0][5];
         li_ret_0 = TRUE;
      }
   }
   ClearBuffer("ReceiveBuffer", 0);
   return (li_ret_0);
}

int CheckCommandBuffer() {
   bool li_ret_0 = FALSE;
   if (gda_1432[0][1] != 99.0) {
      if (gda_1432[0][0] + gi_1020 * (60 * Period()) <= Time[0]) {
         if (gda_1432[0][1] == 0.0 && gda_1432[0][4] >= Ask)
            if (SendBuyOrder(gda_1432[0][6], gda_1432[0][7])) li_ret_0 = TRUE;
         if (gda_1432[0][1] == 1.0 && gda_1432[0][4] <= Bid)
            if (SendSellOrder(gda_1432[0][6], gda_1432[0][7])) li_ret_0 = TRUE;
      }
      if (gda_1432[0][0] + gi_1020 * (60 * Period()) <= Time[0]) {
      }
   }
   return (li_ret_0);
}

int FillSettingsArray() {
   string lsa_0[130][21] = {"", "1 (EURGBP)", "2 (EURGBP)", "3 (EURGBP)", "4 (EURGBP)", "5 (EURGBP)", "6 (EURGBP)", "7 (EURGBP)", "8 (EURGBP)", "9 (EURGBP)", "10 (EURGBP)", "11 (AUDNZD)", "12 (AUDNZD)", "13 (AUDNZD)", "14 (AUDNZD)", "15 (AUDNZD)", "16 (AUDNZD)", "17 (AUDNZD)", "18 (AUDNZD)", "19 (AUDNZD)", "20 (AUDNZD)", "", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "32", "32", "32", "32", "32", "32", "32", "32", "32", "32", "160", "160", "160", "160", "160", "160", "160", "160", "160", "160", "", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "50", "50", "50", "50", "50", "50", "50", "50", "50", "50", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "300", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "5", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "2", "1", "2", "2", "3", "2", "2", "2", "2", "2", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "", "4", "4", "4", "4", "4", "4", "4", "4", "4", "4", "20", "20", "20", "20", "20", "20", "20", "20", "20", "20", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "99", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "5", "7", "6", "6", "4", "6", "7", "6", "5", "6", "12", "9", "12", "9", "12", "9", "12", "9", "12", "9", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "3", "3", "3", "3", "5", "5", "5", "5", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "3", "3", "3", "3", "5", "5", "5", "5", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "2", "2", "3", "3", "2", "2", "3", "3", "", "0", "21", "21", "21", "21", "21", "15", "19", "21", "21", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "", "3", "3", "3", "3", "3", "4", "4", "3", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "140", "", "2", "2", "2", "2", "3", "3", "4", "2", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "170", "", "0", "0", "1", "0", "1", "3", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "200", "", "-1", "-1", "0", "-1", "-1", "1", "-1", "-1", "0", "-1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "240", "", "-4", "-4", "-2", "-2", "-3", "-1", "-2", "-4", "-2", "-2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "15", "15", "15", "15", "15", "15", "15", "15", "15", "15", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "6", "6", "6", "7", "6", "4", "8", "6", "7", "7", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "2", "2", "6", "2", "4", "2", "2", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "20", "19", "11", "15", "11", "13", "27", "20", "11", "15", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "2", "2", "6", "0", "3", "0", "2", "3", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "8", "2", "2", "2", "2", "3", "2", "2", "3", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "2", "2", "2", "2", "2", "3", "3", "2", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "3", "3", "3", "1", "3", "2", "0", "2", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "4", "4", "4", "4", "4", "6", "1", "4", "4", "4", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "30", "30", "30", "30", "30", "30", "30", "30", "30", "30", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "70", "70", "70", "70", "70", "70", "70", "70", "70", "70", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "40", "40", "40", "40", "40", "40", "40", "40", "40", "40", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "60", "60", "60", "60", "60", "60", "60", "60", "60", "60", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "36", "36", "36", "36", "36", "36", "36", "36", "36", "36", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "64", "64", "64", "64", "64", "64", "64", "64", "64", "64", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "10", "10", "10", "10", "10", "10", "10", "10", "10", "10", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "", "12", "12", "12", "12", "12", "12", "12", "12", "12", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", ""};
   ArrayCopy(gsa_1696, lsa_0, 0, 0, WHOLE_ARRAY);
   return (0);
}

int CheckLastOptTime() {
   double l_global_var_12;
   bool li_ret_0 = FALSE;
   double ld_4 = MathRound(GetTickCount() / 100);
   if (IsOptimization() || IsTesting()) {
      if (GlobalVariableCheck("LastOptTime")) {
         l_global_var_12 = GlobalVariableGet("LastOptTime");
         GlobalVariableSet("LastOptTime", ld_4);
         if (l_global_var_12 > ld_4) ld_4 += 86400.0;
         if (ld_4 - l_global_var_12 > gd_1000) li_ret_0 = TRUE;
      } else {
         GlobalVariableSet("LastOptTime", ld_4);
         li_ret_0 = TRUE;
      }
      if (!GlobalVariableCheck("OptCounter")) GlobalVariableSet("OptCounter", 0.0);
   }
   return (li_ret_0);
}

int CheckBlockByStopsDate() {
   bool li_ret_0 = FALSE;
   if (GlobalVariableGet(g_var_name_1756) == 1.0 * gi_1228 && g_hour_1220 < 16 && !gi_1560 && !gi_1484) gi_1484 = TRUE;
   return (li_ret_0);
}

int SaveCommentsFile(string as_0) {
   string l_name_16;
   int l_file_24;
   bool li_ret_8 = FALSE;
   int l_index_12 = 0;
   if (!gi_964) return (li_ret_8);
   if (gsa_1704[0] != "" || as_0 == "deinit") {
      l_name_16 = gs_1708 + "_";
      if (gi_1228 < 10) l_name_16 = l_name_16 + "0";
      l_name_16 = l_name_16 + gi_1228;
      if (g_month_1232 < 10) l_name_16 = l_name_16 + "0";
      l_name_16 = l_name_16 + g_month_1232 + g_year_1236 + ".log";
      l_file_24 = FileOpen(l_name_16, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_24 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + l_name_16 + ", îøèáêà: ", GetLastError());
         return (li_ret_8);
      }
      FileSeek(l_file_24, 0, SEEK_END);
      if (as_0 == "deinit") FileWrite(l_file_24, TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ----------------------------deinit------------------------------");
      else {
         for (l_index_12 = 0; l_index_12 < 20; l_index_12++) {
            if (gsa_1704[l_index_12] == "") break;
            FileWrite(l_file_24, gsa_1704[l_index_12]);
            gsa_1704[l_index_12] = "";
         }
      }
      FileClose(l_file_24);
      li_ret_8 = TRUE;
   }
   return (li_ret_8);
}

int CheckPointDifference() {
   if (Point == 0.00001 || Point == 0.001) gi_1044 = 10;
   else gi_1044 = 1;
   gi_156 *= gi_1044;
   gi_160 *= gi_1044;
   gi_280 *= gi_1044;
   gi_288 *= gi_1044;
   gd_308 *= gi_1044;
   gd_332 *= gi_1044;
   gd_344 *= gi_1044;
   gi_396 *= gi_1044;
   gi_400 *= gi_1044;
   gi_404 *= gi_1044;
   gi_408 *= gi_1044;
   gd_452 *= gi_1044;
   gd_484 *= gi_1044;
   gd_512 *= gi_1044;
   gd_528 *= gi_1044;
   gd_636 *= gi_1044;
   gi_252 *= gi_1044;
   gi_256 *= gi_1044;
   gd_716 *= gi_1044;
   gd_724 *= gi_1044;
   gd_732 *= gi_1044;
   gi_216 *= gi_1044;
   gi_220 *= gi_1044;
   gi_560 *= gi_1044;
   gi_568 *= gi_1044;
   gi_576 *= gi_1044;
   gi_584 *= gi_1044;
   gi_592 *= gi_1044;
   g_slippage_228 *= gi_1044;
   g_slippage_232 *= gi_1044;
   return (0);
}

int CheckMarketInfo() {
   if (MarketInfo(Symbol(), MODE_LOTSIZE) < 100000.0) {
      LotsPercent = 10 * LotsPercent;
      gi_96 = 10 * gi_96;
   }
   if (SettingsNumber < 11) SettingsNumber += 10;
   if (StringFind(Symbol(), "EURGBP", 0) >= 0) gs_1672 = "EURGBP";
   else {
      if (StringFind(Symbol(), "AUDNZD", 0) >= 0 || StringFind(Symbol(), "audnzd", 0) >= 0) gs_1672 = "AUDNZD";
      else {
         gs_1672 = StringSubstr(Symbol(), 0, 6);
         gi_1584 = TRUE;
      }
   }
   if (StringFind(Symbol(), gs_1672, 0) != 0) gs_1780 = StringSubstr(Symbol(), 0, StringFind(Symbol(), gs_1672, 0));
   if (StringLen(Symbol()) != StringLen(gs_1780) + StringLen(gs_1672)) gs_1788 = StringSubstr(Symbol(), StringLen(gs_1780) + StringLen(gs_1672), 0);
   gs_1680 = StringSubstr(AccountCompany(), 0, StringFind(AccountCompany(), " ", 0));
   gi_1152 = gi_932;
   g_magic_1112 = gi_932 + StringGetChar(Symbol(), 0) + StringGetChar(Symbol(), 1) + StringGetChar(Symbol(), 2) + StringGetChar(Symbol(), 3) + StringGetChar(Symbol(), 4) + StringGetChar(Symbol(), 5) + Period();
   gd_1300 = NormalizeDouble(MarketInfo(Symbol(), MODE_LOTSTEP), 2);
   gd_1308 = NormalizeDouble(MarketInfo(Symbol(), MODE_MINLOT), 2);
   if (gd_100 == 0.0 || gd_100 > NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2)) gd_100 = NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2);
   for (gi_1604 = StrToTime(Year() + ".10.31"); TimeDayOfWeek(gi_1604) != 0; gi_1604 -= 86400) {
   }
   gi_1616 = gi_1604 + 604800;
   for (gi_1608 = StrToTime(Year() + ".03.31"); TimeDayOfWeek(gi_1608) != 0; gi_1608 -= 86400) {
   }
   for (gi_1612 = StrToTime((Year() + 1) + ".03.31"); TimeDayOfWeek(gi_1612) != 0; gi_1612 -= 86400) {
   }
   gi_1620 = gi_1608 - 1814400;
   gs_1708 = gs_1680 + AccountNumber() + "TradeComments" + "_Magic" + g_magic_1112;
   gs_1716 = gs_1680 + AccountNumber() + "TestReport";
   gs_1724 = gs_1680 + AccountNumber() + "TradeReport_Magic" + g_magic_1112;
   gi_unused_1080 = -1;
   if (gs_1672 == "EURGBP") {
      gi_764 = 4;
      gi_1136 = 23;
      gi_1140 = 23;
      gi_1144 = 23;
      gi_1148 = 23;
      if (!IsTesting() && !IsOptimization())
         if (gd_1348 <= 0.0) gd_1348 = iClose(gs_1788 + "EURUSD" + gs_1788, PERIOD_H1, 0);
      if (gd_1348 > 0.0) gi_unused_1080 = 100.0 * MathRound(1000.0 * iClose(gs_1780 + "EURUSD" + gs_1788, PERIOD_H1, 0) / MarketInfo(Symbol(), MODE_MARGINREQUIRED));
   }
   if (gs_1672 == "AUDNZD") {
      gi_764 = 16;
      gi_1136 = 18;
      gi_1140 = 18;
      gi_1144 = 20;
      gi_1148 = 20;
      if (!IsTesting() && !IsOptimization())
         if (gd_1356 <= 0.0) gd_1356 = iClose(gs_1780 + "AUDUSD" + gs_1788, PERIOD_H1, 0);
      if (gd_1356 > 0.0) gi_unused_1080 = 100.0 * MathRound(1000.0 * iClose(gs_1780 + "AUDUSD" + gs_1788, PERIOD_H1, 0) / MarketInfo(Symbol(), MODE_MARGINREQUIRED));
   }
   gi_1084 = gi_96;
   return (0);
}

int SetGlobalVariableNames() {
   g_var_name_1756 = gs_1672 + "StopDay" + AccountNumber();
   g_var_name_1764 = "MailReportLB" + AccountNumber();
   g_var_name_1772 = "MailReportLD" + AccountNumber();
   g_var_name_1740 = "MaxBalance";
   g_var_name_1748 = "LB";
   if (IsTesting() || IsOptimization()) {
      g_var_name_1756 = "Test" + g_var_name_1756;
      g_var_name_1764 = "Test" + g_var_name_1764;
      g_var_name_1772 = "Test" + g_var_name_1772;
      g_var_name_1740 = "Test" + g_var_name_1740;
      g_var_name_1748 = "Test" + g_var_name_1748;
   } else {
      g_var_name_1740 = g_var_name_1740 + AccountNumber();
      g_var_name_1748 = g_var_name_1748 + AccountNumber();
   }
   return (0);
}

double GetPointPrice() {
   double ld_ret_0;
   if (gs_1672 == "EURGBP") {
      if (AccountCurrency() == "USD") {
         if (!IsTesting() && !IsOptimization())
            if (gd_1316 <= 0.0) gd_1316 = iClose(gs_1780 + "GBPUSD" + gs_1788, PERIOD_H1, 0);
         if (gd_1316 <= 0.0) gd_1316 = 1.5;
         ld_ret_0 = (100000.0 * (Bid + Point) - 100000.0 * Bid) * gd_1316;
      }
      if (AccountCurrency() == "EUR") ld_ret_0 = 10 / gi_1044;
   }
   if (gs_1672 == "EURCHF") {
      if (AccountCurrency() == "USD") {
         if (!IsTesting() && !IsOptimization())
            if (gd_1324 <= 0.0) gd_1324 = iClose(gs_1780 + "USDCHF" + gs_1788, PERIOD_H1, 0);
         if (gd_1324 <= 0.0) gd_1324 = 1.15;
         ld_ret_0 = (100000.0 * (Bid + Point) - 100000.0 * Bid) / gd_1324;
      }
      if (AccountCurrency() == "EUR") ld_ret_0 = 10 / gi_1044;
   }
   if (gs_1672 == "AUDNZD") {
      if (AccountCurrency() == "USD") {
         if (!IsTesting() && !IsOptimization())
            if (gd_1332 <= 0.0) gd_1332 = iClose(gs_1780 + "NZDUSD" + gs_1788, PERIOD_H1, 0);
         if (gd_1332 <= 0.0) gd_1332 = 0.5;
         ld_ret_0 = (100000.0 * (Bid + Point) - 100000.0 * Bid) * gd_1332;
      }
      if (AccountCurrency() == "EUR") {
         if (!IsTesting() && !IsOptimization())
            if (gd_1340 <= 0.0) gd_1340 = iClose(gs_1780 + "EURNZD" + gs_1788, PERIOD_H1, 0);
         if (gd_1340 <= 0.0) gd_1340 = 0.65;
         ld_ret_0 = (100000.0 * (Bid + Point) - 100000.0 * Bid) / gd_1340;
      }
   }
   return (ld_ret_0);
}

int DrawDownAction(int ai_0) {
   bool li_ret_4 = FALSE;
   if (CheckDrawDown) {
      if (gi_1504) {
         if (gi_1156 != gi_772) {
            gi_1156 = gi_772;
            SetTimeSettings(gi_772);
            MakeTimeString();
            gi_1192--;
            Comments(9, "DrawDownAction()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìèí. ðèñêàìè", "Low risk trade time");
         }
      } else {
         if (gi_1156 != gi_768) {
            gi_1156 = gi_768;
            SetTimeSettings(gi_768);
            MakeTimeString();
            gi_1192--;
            Comments(9, "DrawDownAction()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìàêñ. ðèñêàìè", "High risk trade time");
         }
      }
      gi_1580 = FALSE;
      if (!gi_1560 && ai_0 == gi_1136 || ai_0 == gi_1140 || ai_0 == gi_1144 || ai_0 == gi_1148) {
         gi_1580 = TRUE;
         if (gi_1160 != gi_144 && gi_144 != 0) {
            gi_1160 = gi_144;
            SetSettings(gi_144);
            MakeInitString();
         }
      } else {
         if (gi_1160 != SettingsNumber) {
            gi_1160 = SettingsNumber;
            SetSettings(SettingsNumber);
            MakeInitString();
         }
      }
   }
   return (li_ret_4);
}

int CheckLicense() {
   int li_4 = 0;
   int li_8 = 0;
   int li_12 = 0;
   string l_acc_number_16 = AccountNumber();
   string ls_24 = AccountName();
   bool li_ret_32 = FALSE;
   for (int li_0 = 0; li_0 < StringLen(l_acc_number_16); li_0++) {
      li_4 += StrToInteger(StringSubstr(l_acc_number_16, li_0, 1));
      li_8 += StringGetChar(l_acc_number_16, li_0);
   }
   for (li_0 = 0; li_0 < StringLen(ls_24); li_0++) li_12 += StringGetChar(ls_24, li_0);
   if (li_4 != 0) li_ret_32 = TRUE;
   if (li_8 != 0) li_ret_32 = TRUE;
   if (li_12 != 0) li_ret_32 = TRUE;
   if (IsOptimization() || IsTesting()) li_ret_32 = FALSE;
   if (IsDemo()) li_ret_32 = FALSE;
   return (li_ret_32);
}
