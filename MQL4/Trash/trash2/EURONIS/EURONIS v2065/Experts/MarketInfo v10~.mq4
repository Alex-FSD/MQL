/*
   Generated by EX4-TO-MQ4 decompiler V4.0.220.2c []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2008-2009, Sotnikov Denis (fxexpert@freemail.ru)"
#property link      "fxexpert@freemail.ru"

int gi_76;
int gi_80 = 1;
int gi_84;
string gs_88;
string gs_96;
double g_spread_104;
double g_spread_112;
double gd_120;
double gda_128[24][5];
extern bool CheckHourSpread = TRUE;
string gs_136;
string gs_144;
string gs_152;

int init() {
   int li_unused_4 = 0;
   string ls_8 = "";
   g_spread_104 = MarketInfo(Symbol(), MODE_SPREAD);
   g_spread_112 = MarketInfo(Symbol(), MODE_SPREAD);
   gd_120 = MarketInfo(Symbol(), MODE_SPREAD);
   gs_136 = "";
   gs_144 = "";
   gs_152 = "";
   if (StringFind(Symbol(), "EURGBP", 0) >= 0) gs_152 = "EURGBP";
   else {
      if (StringFind(Symbol(), "AUDNZD", 0) >= 0 || StringFind(Symbol(), "audnzd", 0) >= 0) gs_152 = "AUDNZD";
      else gs_152 = StringSubstr(Symbol(), 0, 6);
   }
   if (StringFind(Symbol(), gs_152, 0) != 0) gs_136 = StringSubstr(Symbol(), 0, StringFind(Symbol(), gs_152, 0));
   if (StringLen(Symbol()) != StringLen(gs_136) + StringLen(gs_152)) gs_144 = StringSubstr(Symbol(), StringLen(gs_136) + StringLen(gs_152), 0);
   gi_76 = 99;
   gi_84 = 99;
   gs_88 = "n/a";
   gs_96 = "n/a";
   if (!GMTAutoDetection()) ls_8 = "?";
   if (gi_76 != 99) gs_88 = gi_76 + ls_8;
   if (gi_84 != 99) gs_96 = gi_84 + ls_8;
   int l_file_0 = FileOpen(Symbol() + ".csv", FILE_CSV|FILE_WRITE, ';');
   if (l_file_0 < 1) {
      Print("Файл ", Symbol(), " не обнаружен, ошибка ", GetLastError());
      return (0);
   }
   FileWrite(l_file_0, "AccountCompany() ", AccountCompany(), 
      "\n", "GMTDifference (ST) ", gs_88, gs_96, 
      "\n", "Symbol() ", Symbol(), 
      "\n", "MODE_POINT ", MarketInfo(Symbol(), MODE_POINT), 
      "\n", "MODE_SPREAD ", MarketInfo(Symbol(), MODE_SPREAD), 
      "\n", "MODE_STOPLEVEL ", MarketInfo(Symbol(), MODE_STOPLEVEL), 
      "\n", "MODE_FREEZELEVEL ", MarketInfo(Symbol(), MODE_FREEZELEVEL), 
      "\n", "MODE_LOTSIZE ", MarketInfo(Symbol(), MODE_LOTSIZE), 
      "\n", "MODE_TICKVALUE ", MarketInfo(Symbol(), MODE_TICKVALUE), 
      "\n", "MODE_TICKSIZE ", MarketInfo(Symbol(), MODE_TICKSIZE), 
      "\n", "MODE_SWAPLONG ", MarketInfo(Symbol(), MODE_SWAPLONG), 
      "\n", "MODE_SWAPSHORT ", MarketInfo(Symbol(), MODE_SWAPSHORT), 
      "\n", "MODE_MINLOT ", MarketInfo(Symbol(), MODE_MINLOT), 
      "\n", "MODE_LOTSTEP ", MarketInfo(Symbol(), MODE_LOTSTEP), 
      "\n", "MODE_MAXLOT ", MarketInfo(Symbol(), MODE_MAXLOT), 
      "\n", "MODE_MARGININIT ", MarketInfo(Symbol(), MODE_MARGININIT), 
      "\n", "MODE_MARGINMAINTENANCE ", MarketInfo(Symbol(), MODE_MARGINMAINTENANCE), 
      "\n", "MODE_MARGINHEDGED ", MarketInfo(Symbol(), MODE_MARGINHEDGED), 
   "\n", "MODE_MARGINREQUIRED ", MarketInfo(Symbol(), MODE_MARGINREQUIRED));
   FileClose(l_file_0);
   string l_dbl2str_16 = "n/a";
   if (gs_152 == "EURGBP")
      if (iClose(gs_136 + "EURUSD" + gs_144, PERIOD_H1, 0) > 0.0) l_dbl2str_16 = DoubleToStr(MathRound(MarketInfo(Symbol(), MODE_MARGINREQUIRED) / iClose(gs_136 + "EURUSD" + gs_144, PERIOD_H1, 0) / 100000.0 / Point), 0);
   if (gs_152 == "AUDNZD")
      if (iClose(gs_136 + "AUDUSD" + gs_144, PERIOD_H1, 0) > 0.0) l_dbl2str_16 = DoubleToStr(MathRound(MarketInfo(Symbol(), MODE_MARGINREQUIRED) / iClose(gs_136 + "AUDUSD" + gs_144, PERIOD_H1, 0) / 100000.0 / Point), 0);
   Comment("AccountCompany() ", AccountCompany(), 
      "\n", "GMTDifference (ST) ", gs_88, " (", gs_96, ")\n", "Leverage 1:", l_dbl2str_16, 
      "\n", "Symbol() ", Symbol(), 
      "\n", "MarketInfo() ", 
      "\n", "MODE_POINT ", MarketInfo(Symbol(), MODE_POINT), 
      "\n", "MODE_SPREAD ", MarketInfo(Symbol(), MODE_SPREAD), 
      "\n", "MODE_STOPLEVEL ", MarketInfo(Symbol(), MODE_STOPLEVEL), 
      "\n", "MODE_FREEZELEVEL ", MarketInfo(Symbol(), MODE_FREEZELEVEL), 
      "\n", "MODE_LOTSIZE ", MarketInfo(Symbol(), MODE_LOTSIZE), 
      "\n", "MODE_TICKVALUE ", MarketInfo(Symbol(), MODE_TICKVALUE), 
      "\n", "MODE_TICKSIZE ", MarketInfo(Symbol(), MODE_TICKSIZE), 
      "\n", "MODE_SWAPLONG ", MarketInfo(Symbol(), MODE_SWAPLONG), 
      "\n", "MODE_SWAPSHORT ", MarketInfo(Symbol(), MODE_SWAPSHORT), 
      "\n", "MODE_MINLOT ", MarketInfo(Symbol(), MODE_MINLOT), 
      "\n", "MODE_LOTSTEP ", MarketInfo(Symbol(), MODE_LOTSTEP), 
      "\n", "MODE_MAXLOT ", MarketInfo(Symbol(), MODE_MAXLOT), 
      "\n", "MODE_MARGININIT ", MarketInfo(Symbol(), MODE_MARGININIT), 
      "\n", "MODE_MARGINMAINTENANCE ", MarketInfo(Symbol(), MODE_MARGINMAINTENANCE), 
      "\n", "MODE_MARGINHEDGED ", MarketInfo(Symbol(), MODE_MARGINHEDGED), 
   "\n", "MODE_MARGINREQUIRED ", MarketInfo(Symbol(), MODE_MARGINREQUIRED));
   int l_datetime_24 = TimeLocal();
   double ld_28 = 1.0 * (3600 * TimeHour(l_datetime_24) + 60 * TimeMinute(l_datetime_24) + TimeSeconds(l_datetime_24));
   GlobalVariableSet("LastTimeLocal", ld_28);
   GlobalVariableSet("TestGBPUSD", iClose(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestUSDCHF", iClose(gs_136 + "USDCHF" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestEURNZD", iClose(gs_136 + "EURNZD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestNZDUSD", iClose(gs_136 + "NZDUSD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestEURUSD", iClose(gs_136 + "EURUSD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestAUDUSD", iClose(gs_136 + "AUDUSD" + gs_144, PERIOD_H1, 0));
   return (0);
}

int deinit() {
   GlobalVariableDel("TestGBPUSD");
   GlobalVariableDel("TestUSDCHF");
   GlobalVariableDel("TestEURNZD");
   GlobalVariableDel("TestNZDUSD");
   GlobalVariableDel("TestEURUSD");
   GlobalVariableDel("TestAUDUSD");
   return (0);
}

int start() {
   string ls_0;
   gi_80++;
   if (g_spread_104 > MarketInfo(Symbol(), MODE_SPREAD)) g_spread_104 = MarketInfo(Symbol(), MODE_SPREAD);
   if (g_spread_112 < MarketInfo(Symbol(), MODE_SPREAD)) g_spread_112 = MarketInfo(Symbol(), MODE_SPREAD);
   gd_120 += MarketInfo(Symbol(), MODE_SPREAD);
   if (gda_128[TimeHour(TimeLocal())][4] == 0.0) {
      gda_128[TimeHour(TimeLocal())][0] = MarketInfo(Symbol(), MODE_SPREAD);
      gda_128[TimeHour(TimeLocal())][3] = MarketInfo(Symbol(), MODE_SPREAD);
      gda_128[TimeHour(TimeLocal())][1] = MarketInfo(Symbol(), MODE_SPREAD);
      gda_128[TimeHour(TimeLocal())][4] = 1.0;
   } else {
      gda_128[TimeHour(TimeLocal())][4] += 1.0;
      if (gda_128[TimeHour(TimeLocal())][0] > MarketInfo(Symbol(), MODE_SPREAD)) gda_128[TimeHour(TimeLocal())][0] = MarketInfo(Symbol(), MODE_SPREAD);
      if (gda_128[TimeHour(TimeLocal())][3] < MarketInfo(Symbol(), MODE_SPREAD)) gda_128[TimeHour(TimeLocal())][3] = MarketInfo(Symbol(), MODE_SPREAD);
      gda_128[TimeHour(TimeLocal())][1] += MarketInfo(Symbol(), MODE_SPREAD);
   }
   gda_128[TimeHour(TimeLocal())][2] = gda_128[TimeHour(TimeLocal())][1] / gda_128[TimeHour(TimeLocal())][4];
   if (CheckHourSpread) {
      ls_0 = "\n" 
         + "00:" + DoubleToStr(gda_128[0][0], 0) + "/" + DoubleToStr(gda_128[0][2], 1) + "/" + DoubleToStr(gda_128[0][3], 0) + "/" + DoubleToStr(gda_128[0][4], 0) + "  " + "01:" + DoubleToStr(gda_128[1][0], 0) + "/" + DoubleToStr(gda_128[1][2], 1) + "/" + DoubleToStr(gda_128[1][3], 0) + "/" + DoubleToStr(gda_128[1][4], 0) + "  " + "02:" + DoubleToStr(gda_128[2][0], 0) + "/" + DoubleToStr(gda_128[2][2], 1) + "/" + DoubleToStr(gda_128[2][3], 0) + "/" + DoubleToStr(gda_128[2][4], 0) + "  " + "03:" + DoubleToStr(gda_128[3][0], 0) + "/" + DoubleToStr(gda_128[3][2], 1) + "/" + DoubleToStr(gda_128[3][3], 0) + "/" + DoubleToStr(gda_128[3][4], 0) + "  " + "04:" + DoubleToStr(gda_128[4][0], 0) + "/" + DoubleToStr(gda_128[4][2], 1) + "/" + DoubleToStr(gda_128[4][3], 0) + "/" + DoubleToStr(gda_128[4][4], 0) + "  " + "05:" + DoubleToStr(gda_128[5][0], 0) + "/" + DoubleToStr(gda_128[5][2], 1) + "/" + DoubleToStr(gda_128[5][3], 0) + "/" + DoubleToStr(gda_128[5][4], 0) + "  " + "06:" + DoubleToStr(gda_128[6][0], 0) + "/" + DoubleToStr(gda_128[6][2], 1) + "/" + DoubleToStr(gda_128[6][3], 0) + "/" + DoubleToStr(gda_128[6][4], 0) + "  " + "07:" + DoubleToStr(gda_128[7][0], 0) + "/" + DoubleToStr(gda_128[7][2], 1) + "/" + DoubleToStr(gda_128[7][3], 0) + "/" + DoubleToStr(gda_128[7][4], 0) + "  " + "08:" + DoubleToStr(gda_128[8][0], 0) + "/" + DoubleToStr(gda_128[8][2], 1) + "/" + DoubleToStr(gda_128[8][3], 0) + "/" + DoubleToStr(gda_128[8][4], 0) + "  " + "09:" + DoubleToStr(gda_128[9][0], 0) + "/" + DoubleToStr(gda_128[9][2], 1) + "/" + DoubleToStr(gda_128[9][3], 0) + "/" + DoubleToStr(gda_128[9][4], 0) + "  " + "10:" + DoubleToStr(gda_128[10][0], 0) + "/" + DoubleToStr(gda_128[10][2], 1) + "/" + DoubleToStr(gda_128[10][3], 0) + "/" + DoubleToStr(gda_128[10][4], 0) + "  " + "11:" + DoubleToStr(gda_128[11][0], 0) + "/" + DoubleToStr(gda_128[11][2], 1) + "/" + DoubleToStr(gda_128[11][3], 0) + "/" + DoubleToStr(gda_128[11][4], 0) 
         + "\n" 
      + "12:" + DoubleToStr(gda_128[12][0], 0) + "/" + DoubleToStr(gda_128[12][2], 1) + "/" + DoubleToStr(gda_128[12][3], 0) + "/" + DoubleToStr(gda_128[12][4], 0) + "  " + "13:" + DoubleToStr(gda_128[13][0], 0) + "/" + DoubleToStr(gda_128[13][2], 1) + "/" + DoubleToStr(gda_128[13][3], 0) + "/" + DoubleToStr(gda_128[13][4], 0) + "  " + "14:" + DoubleToStr(gda_128[14][0], 0) + "/" + DoubleToStr(gda_128[14][2], 1) + "/" + DoubleToStr(gda_128[14][3], 0) + "/" + DoubleToStr(gda_128[14][4], 0) + "  " + "15:" + DoubleToStr(gda_128[15][0], 0) + "/" + DoubleToStr(gda_128[15][2], 1) + "/" + DoubleToStr(gda_128[15][3], 0) + "/" + DoubleToStr(gda_128[15][4], 0) + "  " + "16:" + DoubleToStr(gda_128[16][0], 0) + "/" + DoubleToStr(gda_128[16][2], 1) + "/" + DoubleToStr(gda_128[16][3], 0) + "/" + DoubleToStr(gda_128[16][4], 0) + "  " + "17:" + DoubleToStr(gda_128[17][0], 0) + "/" + DoubleToStr(gda_128[17][2], 1) + "/" + DoubleToStr(gda_128[17][3], 0) + "/" + DoubleToStr(gda_128[17][4], 0) + "  " + "18:" + DoubleToStr(gda_128[18][0], 0) + "/" + DoubleToStr(gda_128[18][2], 1) + "/" + DoubleToStr(gda_128[18][3], 0) + "/" + DoubleToStr(gda_128[18][4], 0) + "  " + "19:" + DoubleToStr(gda_128[19][0], 0) + "/" + DoubleToStr(gda_128[19][2], 1) + "/" + DoubleToStr(gda_128[19][3], 0) + "/" + DoubleToStr(gda_128[19][4], 0) + "  " + "20:" + DoubleToStr(gda_128[20][0], 0) + "/" + DoubleToStr(gda_128[20][2], 1) + "/" + DoubleToStr(gda_128[20][3], 0) + "/" + DoubleToStr(gda_128[20][4], 0) + "  " + "21:" + DoubleToStr(gda_128[21][0], 0) + "/" + DoubleToStr(gda_128[21][2], 1) + "/" + DoubleToStr(gda_128[21][3], 0) + "/" + DoubleToStr(gda_128[21][4], 0) + "  " + "22:" + DoubleToStr(gda_128[22][0], 0) + "/" + DoubleToStr(gda_128[22][2], 1) + "/" + DoubleToStr(gda_128[22][3], 0) + "/" + DoubleToStr(gda_128[22][4], 0) + "  " + "23:" + DoubleToStr(gda_128[23][0], 0) + "/" + DoubleToStr(gda_128[23][2], 1) + "/" + DoubleToStr(gda_128[23][3], 0) + "/" + DoubleToStr(gda_128[23][4], 0);
   } else ls_0 = "";
   string l_dbl2str_8 = "n/a";
   if (gs_152 == "EURGBP")
      if (iClose(gs_136 + "EURUSD" + gs_144, PERIOD_H1, 0) > 0.0) l_dbl2str_8 = DoubleToStr(100.0 * MathRound(1000.0 * iClose(gs_136 + "EURUSD" + gs_144, PERIOD_H1, 0) / MarketInfo(Symbol(), MODE_MARGINREQUIRED)), 0);
   if (gs_152 == "AUDNZD")
      if (iClose(gs_136 + "AUDUSD" + gs_144, PERIOD_H1, 0) > 0.0) l_dbl2str_8 = DoubleToStr(100.0 * MathRound(1000.0 * iClose(gs_136 + "AUDUSD" + gs_144, PERIOD_H1, 0) / MarketInfo(Symbol(), MODE_MARGINREQUIRED)), 0);
   string ls_16 = "AccountCompany() " + AccountCompany() 
      + "\n" 
      + "GMTDifference (ST) " + gs_88 + " (" + gs_96 + ")\n" + "Leverage 1:" + l_dbl2str_8 
      + "\n" 
      + "Symbol() " + Symbol() 
      + "\n" 
      + "MarketInfo() " 
      + "\n" 
      + "MODE_POINT " + DoubleToStr(MarketInfo(Symbol(), MODE_POINT), Digits) 
      + "\n" 
      + "MODE_SPREAD " + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + " (min=" + DoubleToStr(g_spread_104, 0) + "   avrg=" + DoubleToStr(gd_120 / gi_80, 1) + "   max=" + DoubleToStr(g_spread_112, 0) + ")\n" + "MODE_STOPLEVEL " + DoubleToStr(MarketInfo(Symbol(), MODE_STOPLEVEL), 0) 
      + "\n" 
      + "MODE_FREEZELEVEL " + DoubleToStr(MarketInfo(Symbol(), MODE_FREEZELEVEL), 0) 
      + "\n" 
      + "MODE_LOTSIZE " + DoubleToStr(MarketInfo(Symbol(), MODE_LOTSIZE), 0) 
      + "\n" 
      + "MODE_TICKVALUE " + DoubleToStr(MarketInfo(Symbol(), MODE_TICKVALUE), 3) 
      + "\n" 
      + "MODE_TICKSIZE " + DoubleToStr(MarketInfo(Symbol(), MODE_TICKSIZE), Digits) 
      + "\n" 
      + "MODE_SWAPLONG " + DoubleToStr(MarketInfo(Symbol(), MODE_SWAPLONG), 2) 
      + "\n" 
      + "MODE_SWAPSHORT " + DoubleToStr(MarketInfo(Symbol(), MODE_SWAPSHORT), 2) 
      + "\n" 
      + "MODE_MINLOT " + DoubleToStr(MarketInfo(Symbol(), MODE_MINLOT), 2) 
      + "\n" 
      + "MODE_LOTSTEP " + DoubleToStr(MarketInfo(Symbol(), MODE_LOTSTEP), 2) 
      + "\n" 
      + "MODE_MAXLOT " + DoubleToStr(MarketInfo(Symbol(), MODE_MAXLOT), 2) 
      + "\n" 
      + "MODE_MARGININIT " + DoubleToStr(MarketInfo(Symbol(), MODE_MARGININIT), 0) 
      + "\n" 
      + "MODE_MARGINMAINTENANCE " + DoubleToStr(MarketInfo(Symbol(), MODE_MARGINMAINTENANCE), 0) 
      + "\n" 
      + "MODE_MARGINHEDGED " + DoubleToStr(MarketInfo(Symbol(), MODE_MARGINHEDGED), 0) 
      + "\n" 
   + "MODE_MARGINREQUIRED " + DoubleToStr(MarketInfo(Symbol(), MODE_MARGINREQUIRED), 0) + ls_0;
   Comment(ls_16);
   int l_datetime_24 = TimeLocal();
   double ld_28 = 1.0 * (3600 * TimeHour(l_datetime_24) + 60 * TimeMinute(l_datetime_24) + TimeSeconds(l_datetime_24));
   GlobalVariableSet("LastTimeLocal", ld_28);
   GlobalVariableSet("TestGBPUSD", iClose(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestUSDCHF", iClose(gs_136 + "USDCHF" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestEURNZD", iClose(gs_136 + "EURNZD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestNZDUSD", iClose(gs_136 + "NZDUSD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestEURUSD", iClose(gs_136 + "EURUSD" + gs_144, PERIOD_H1, 0));
   GlobalVariableSet("TestAUDUSD", iClose(gs_136 + "AUDUSD" + gs_144, PERIOD_H1, 0));
   return (0);
}

bool GMTAutoDetection() {
   int l_str2time_28;
   string ls_32;
   int l_count_0 = 0;
   int li_8 = 10;
   bool l_str2time_12 = FALSE;
   bool l_str2time_16 = FALSE;
   bool l_str2time_20 = FALSE;
   bool l_str2time_24 = FALSE;
   bool li_ret_40 = TRUE;
   int l_shift_4 = iBarShift(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, D'24.10.2008 03:00', TRUE);
   if (l_shift_4 < 240) return (FALSE);
   for (l_count_0 = 2; l_count_0 < 18; l_count_0++) {
      if (l_count_0 < 10) ls_32 = "0" + l_count_0;
      else ls_32 = l_count_0;
      l_str2time_28 = StrToTime("2008.10.24 " + ls_32 + ":00");
      l_shift_4 = iBarShift(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_str2time_28);
      if (iHigh(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) > 1.562 && iLow(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) < 1.562) {
         l_str2time_12 = l_str2time_28;
         li_8 = l_count_0 - 8;
         gi_76 = li_8;
         break;
      }
   }
   if (l_str2time_12 == 0) li_ret_40 = FALSE;
   for (l_count_0 = 0; l_count_0 < 16; l_count_0++) {
      if (l_count_0 < 10) ls_32 = "0" + l_count_0;
      else ls_32 = l_count_0;
      l_str2time_28 = StrToTime("2008.10.27 " + ls_32 + ":00");
      l_shift_4 = iBarShift(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_str2time_28);
      if (iHigh(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) > 1.55 && iLow(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) < 1.55) {
         l_str2time_16 = l_str2time_28;
         break;
      }
   }
   if (l_str2time_16 == 0) li_ret_40 = FALSE;
   for (l_count_0 = 6; l_count_0 < 22; l_count_0++) {
      if (l_count_0 < 10) ls_32 = "0" + l_count_0;
      else ls_32 = l_count_0;
      l_str2time_28 = StrToTime("2008.11.03 " + ls_32 + ":00");
      l_shift_4 = iBarShift(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_str2time_28);
      if (iHigh(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) > 1.607 && iLow(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) < 1.607) {
         l_str2time_20 = l_str2time_28;
         break;
      }
   }
   if (l_str2time_20 == 0) li_ret_40 = FALSE;
   for (l_count_0 = 8; l_count_0 < 24; l_count_0++) {
      if (l_count_0 < 10) ls_32 = "0" + l_count_0;
      else ls_32 = l_count_0;
      l_str2time_28 = StrToTime("2008.11.05 " + ls_32 + ":00");
      l_shift_4 = iBarShift(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_str2time_28);
      if (iHigh(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) > 1.61 && iLow(gs_136 + "GBPUSD" + gs_144, PERIOD_H1, l_shift_4) < 1.61) {
         l_str2time_24 = l_str2time_28;
         break;
      }
   }
   if (l_str2time_24 == 0) li_ret_40 = FALSE;
   if (TimeHour(l_str2time_16) - TimeHour(l_str2time_12) == -2) gi_84 = 0;
   else {
      if (TimeHour(l_str2time_16) - TimeHour(l_str2time_12) == -1) {
         if (TimeHour(l_str2time_20) - TimeHour(l_str2time_16) == 5) gi_84 = 1;
         else {
            if (TimeHour(l_str2time_20) - TimeHour(l_str2time_16) == 6) {
               if (TimeHour(l_str2time_24) - TimeHour(l_str2time_20) == 2) gi_84 = 2;
               else
                  if (TimeHour(l_str2time_24) - TimeHour(l_str2time_20) == 1) gi_84 = 3;
            }
         }
      }
   }
   return (li_ret_40);
}
